cmake_minimum_required(VERSION 3.8)

# Download NumpyEigen
function(ipc_toolkit_download_numpyeigen)
  ipc_toolkit_download_project(numpyeigen
    GIT_REPOSITORY https://github.com/fwilliams/numpyeigen.git
    GIT_TAG        97450b05b8a95fbf26f7c7f5b93814deeddb8dc5
  )
endfunction()

if(TRUE)
  ipc_toolkit_download_numpyeigen()
  find_package(Python)
  set(NPE_PYTHON_EXECUTABLE "${Python_EXECUTABLE}" CACHE STRING "Path to the Python interpreter")
  # Include numpyeigen's cmake directory
  list(APPEND CMAKE_MODULE_PATH ${IPC_TOOLKIT_EXTERNAL}/numpyeigen/cmake)
  include(numpyeigen)
endif()

# This creates a CMake target representing an importable python module.
# The first argument is the name of the target (in this case `ipc_toolkit`).
# It is also the name of the Python module (i.e. `import ipc_toolkit` in Python)
# The files specified after BINDING_SOURCES are the source files containing numpyeigen bindings
npe_add_module(ipc_toolkit
  BINDING_SOURCES

  src/barrier/barrier.cpp

  src/distance/distance_type.cpp
  src/distance/edge_edge_mollifier.cpp
  src/distance/edge_edge.cpp
  src/distance/line_line.cpp
  src/distance/point_edge.cpp
  src/distance/point_line.cpp
  src/distance/point_plane.cpp
  src/distance/point_point.cpp
  src/distance/point_triangle.cpp

)

# The target generated by `npe_add_module` is like any other CMake target. You can add include files and link libraries.
target_include_directories(ipc_toolkit PUBLIC src)

target_link_libraries(ipc_toolkit PUBLIC ${PROJECT_NAME})
target_link_libraries(ipc_toolkit PRIVATE spdlog::spdlog)

# Extra warnings
# target_link_libraries(ipc_toolkit PRIVATE warnings::all)

# Move Python library to build root
set_target_properties(ipc_toolkit PROPERTIES LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}")
