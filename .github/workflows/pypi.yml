name: PyPi Release

on:
  workflow_dispatch:
  # release:
  #   types: [published]
  # push:
  #   branches:
  #     - pypi
  #     - main
  #     - python
  # pull_request:
  #   branches:
  #     - main

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.name }} (${{ matrix.python-version }} ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [cp39, cp310, cp311, cp312, cp313]
        arch: [x86_64, arm64]
        exclude:
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64
        include:
          - os: ubuntu-latest
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macOS-latest
            name: macOS

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.1
        # to supply options, put them in 'env', like:
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.python-version }}-*
          CIBW_SKIP: "cp38-* pp* *musllinux* *manylinux1* *-win32 *linux_i686 *linux_aarch64 *linux_ppc64le *linux_s390x"

      - uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheelhouse-*
          merge-multiple: true
          path: dist

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: sdist
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          # To test:
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          # repository-url: https://test.pypi.org/legacy/
          # To release:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
