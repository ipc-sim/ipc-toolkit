Search.setIndex({"titles": ["Changelog", "Contributor Covenant Code of Conduct", "Contributing", "C++", "Adhesion", "Barrier", "Broad Phase", "Candidates", "Continuous Collision Detection", "Collision Mesh", "Distance", "Friction", "Intersections", "Normal Collisions", "Potentials", "Tangent", "Tangential Collisions", "Utils", "Home", "License", "Python", "Adhesion", "Barrier", "Broad Phase", "Candidates", "Continuous Collision Detection", "Collision Mesh", "Distance", "Friction", "Intersections", "Normal Collisions", "Potentials", "Tangent", "Tangential Collisions", "Utils", "Style Guide", "Convergent Formulation", "Frequently Asked Questions", "Getting Started", "Miscellaneous", "Nonlinear CCD", "References", "Physical Simulation"], "terms": {"move": [0, 6, 8, 23, 25], "test": [0, 20, 29], "data": [0, 3, 6, 18, 23, 24, 26, 30, 31, 33, 38, 42], "an": [0, 1, 2, 3, 5, 6, 8, 9, 10, 13, 15, 18, 19, 22, 23, 26, 27, 30, 32, 35, 36, 37, 38, 40, 41, 42], "extern": [0, 1, 3, 18], "repositori": [0, 18, 20], "113": 0, "download": [0, 3, 18], "compil": [0, 2, 20], "time": [0, 1, 4, 6, 7, 8, 9, 11, 15, 21, 23, 24, 25, 28, 32, 36, 38, 40, 41], "need": [0, 6, 9, 23, 25, 36, 38, 40, 42], "us": [0, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42], "cmake": [0, 3, 18, 37], "individu": [0, 1, 38], "converg": [0, 13, 14, 25, 30, 41], "formul": [0, 13, 14, 30], "flag": [0, 14, 36], "120": 0, "replac": 0, "use_convergent_formul": 0, "collis": [0, 3, 6, 12, 14, 18, 23, 29, 31, 35, 36, 40, 41, 42], "two": [0, 6, 7, 8, 9, 10, 14, 15, 23, 24, 25, 26, 27, 29, 32, 36, 37, 38], "use_area_weight": [0, 13, 30, 36], "use_improved_max_approxim": [0, 13, 30, 36], "physic": [0, 1, 14, 18], "barrier": [0, 7, 13, 16, 18, 24, 30, 42], "rescal": [0, 8, 25], "from": [0, 1, 3, 5, 6, 7, 8, 9, 13, 14, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 38, 40, 42], "weight": [0, 13, 16, 30, 33, 36, 38], "barrierpotenti": [0, 14, 16, 31, 33, 36, 38, 42], "use_physcial_barri": 0, "scalar": [0, 38], "tbb": [0, 39], "enumerable_thread_specif": 0, "parallel_reduc": 0, "121": 0, "miss": [0, 38], "max_iter": [0, 8, 25], "toler": [0, 8, 13, 25], "variabl": [0, 8, 14, 31, 35, 38], "compute_collision_free_steps": [0, 7, 8, 24, 25, 38], "when": [0, 1, 3, 6, 14, 18, 35, 36, 38, 39, 42], "sweep_and_tiniest_queu": [0, 6, 23, 38], "antoinebou12": 0, "123": 0, "add": [0, 3, 6, 18, 37, 38], "cuda": [0, 38], "yml": 0, "code": [0, 2, 3, 20, 39, 40], "enabl": [0, 3, 13, 14, 18, 31, 36, 39], "125": 0, "updat": [0, 5, 22, 38, 40], "filib": [0, 3, 8, 18, 25], "allow": [0, 1, 7, 8, 24, 25, 38], "share": [0, 3], "librari": [0, 3, 18, 20, 38, 39], "build": [0, 6, 7, 8, 9, 13, 16, 23, 24, 26, 30, 33, 36, 38, 42], "122": 0, "friction_collis": 0, "tutori": [0, 3, 18, 20, 38], "issu": [0, 1, 2, 18, 37], "126": 0, "127": 0, "sort": [0, 1, 7, 24], "includ": [0, 1, 2, 3, 7, 9, 18, 19, 26, 36, 38, 39], "clang": 0, "format": 0, "129": 0, "frequent": 0, "ask": 0, "question": [0, 1], "page": 0, "document": [0, 3, 18, 19], "api": 0, "On": 0, "appl": 0, "link": [0, 3, 18], "eigen": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 31, 38, 40, 42], "against": [0, 3, 18], "acceler": 0, "bla": 0, "lapack": 0, "backend": 0, "requir": [0, 3, 18, 36, 38], "brew": 0, "instal": [0, 3, 18, 42], "header": 0, "separ": [0, 7, 8, 13, 24, 25, 30, 40], "set": [0, 1, 3, 6, 7, 13, 14, 18, 24, 30, 31, 34, 35, 36, 38, 39, 42], "potenti": [0, 5, 13, 16, 18, 22, 30, 35, 36, 41, 42], "comput": [0, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 37, 38, 41, 42], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 31, 35, 36, 38, 39, 40, 42], "u": [0, 1, 3, 36, 38, 41], "more": [0, 2, 14, 18, 36, 38, 39, 40], "easili": 0, "new": [0, 9, 17, 18, 26, 41], "futur": 0, "call": [0, 3, 9, 17, 18, 26, 36, 38, 39, 40, 42], "compute_potential_": 0, "see": [0, 1, 3, 14, 18, 36, 38], "class": [0, 1, 6, 7, 8, 9, 10, 13, 14, 16, 17, 23, 24, 25, 26, 27, 30, 31, 33, 34, 35, 37, 38, 40, 42], "dynam": [0, 3, 18, 38, 41], "select": [0, 7, 9, 42], "function": [0, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 42], "narrowphaseccd": [0, 7, 8, 24, 25], "narrow": [0, 2, 7, 8, 18, 24, 25], "phase": [0, 7, 8, 12, 13, 18, 24, 25, 29, 30], "ccd": [0, 3, 7, 18, 24, 38], "method": [0, 6, 7, 8, 12, 13, 17, 23, 24, 25, 26, 29, 30, 31, 33, 34, 38, 40, 42], "refactor": 0, "83": 0, "constraint": [0, 35], "contact": [0, 18, 25, 35, 41], "name": [0, 2, 3, 18, 23, 27, 31, 34], "hierarchi": [0, 3, 18, 23], "which": [0, 1, 4, 6, 11, 13, 18, 20, 21, 23, 25, 28, 30, 38, 42], "repres": [0, 1, 7, 38], "sum": [0, 9, 36, 38], "per": [0, 36], "implement": [0, 6, 8, 17, 18, 23, 34, 36, 38, 40], "friction": [0, 16, 18, 33, 35, 42], "dissip": [0, 14, 18, 42], "frictionpotenti": [0, 14, 31, 38, 42], "now": [0, 38], "serv": 0, "sole": 0, "activ": [0, 4, 5, 7, 10, 13, 14, 21, 22, 24, 27, 30, 31, 38], "distanc": [0, 4, 5, 7, 8, 13, 14, 18, 21, 22, 24, 25, 30, 31, 36, 37, 38, 40], "mollifi": [0, 4, 13, 14, 21, 30, 31], "all": [0, 1, 3, 4, 5, 6, 9, 11, 16, 18, 19, 21, 22, 23, 26, 28, 33, 36, 38, 42], "is_mollifi": [0, 13, 30], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 42], "default": [0, 3, 5, 6, 7, 8, 9, 13, 14, 16, 18, 25, 26, 36, 38, 39], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42], "m": [0, 14, 16, 18, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 41], "x": [0, 6, 7, 9, 10, 14, 26, 27, 31, 36, 38, 40], "onli": [0, 2, 3, 36, 38, 42], "edgeedgecollis": 0, "overrid": [0, 5, 6, 7, 8, 13, 14, 16, 25, 40], "version": [0, 1, 2, 3, 18], "compute_dist": [0, 7, 13], "collisionstencil": [0, 7, 13, 16, 24, 30, 33], "take": [0, 1, 9, 14, 26, 31, 36, 38, 40], "full": [0, 3, 7, 8, 9, 18, 24, 25, 26, 42], "mesh": [0, 6, 7, 8, 12, 13, 14, 16, 23, 24, 25, 29, 30, 31, 33, 35, 36, 39, 41], "input": [0, 25, 39, 40], "instead": [0, 36, 42], "expos": 0, "stencil": [0, 13, 14, 16, 30, 31, 33, 36], "": [0, 1, 3, 6, 7, 8, 9, 13, 14, 15, 16, 18, 23, 25, 30, 31, 32, 33, 36, 38, 39, 40, 42], "vertex": [0, 6, 8, 9, 10, 14, 15, 23, 25, 26, 27, 31, 32, 35, 38], "posit": [0, 1, 6, 7, 8, 9, 10, 13, 14, 16, 23, 24, 25, 26, 27, 30, 31, 33, 35, 36, 38, 40], "directli": [0, 9, 20, 26, 38, 42], "polymorph": 0, "84": 0, "make": [0, 1, 2, 14, 18, 20, 31, 36, 39, 42], "object": [0, 3, 6, 8, 9, 14, 17, 23, 24, 25, 26, 27, 31, 34, 38, 39, 40], "so": [0, 3, 9, 14, 19, 36, 39], "can": [0, 3, 6, 7, 9, 18, 20, 23, 26, 36, 37, 38, 39, 40, 42], "runtim": 0, "virtual": [0, 5, 6, 7, 8, 13, 14, 16, 40], "interfac": 0, "gener": 0, "clampedlogbarri": [0, 5, 14, 22], "smoothli": [0, 5, 22, 36, 38], "clamp": [0, 17, 34, 38, 42], "log": [0, 3, 18, 34, 38, 39], "li": [0, 5, 18, 22, 36, 38, 41, 42], "et": [0, 3, 5, 18, 22, 36, 38, 40, 42], "al": [0, 3, 5, 18, 22, 36, 38, 40, 42], "barrier_gradi": 0, "barrier_hessian": 0, "renam": 0, "barrier_first_deriv": [0, 5, 22], "barrier_second_deriv": [0, 5, 22], "respect": [0, 1, 14, 16, 31, 33, 38, 40, 42], "co": [0, 40], "author": [0, 18, 19], "arvigj": 0, "warn": [0, 34, 39], "88": 0, "werror": 0, "enum": [0, 6, 10, 14, 17, 35], "convers": 0, "wfloat": 0, "hash": [0, 3, 18, 26, 38], "abseil": [0, 3, 18], "90": 0, "clean": 0, "up": 0, "spatialhash": [0, 6, 23], "broad": [0, 7, 8, 12, 13, 18, 24, 25, 29, 30], "91": 0, "ipc_toolkit_with_correct_ccd": 0, "ipc_toolkit_with_inexact_ccd": [0, 3, 18], "alwai": [0, 2, 7, 13], "tight": [0, 3, 18, 36, 38], "inclus": [0, 1, 3, 18, 38, 41], "becaus": [0, 7, 38, 39, 40, 42], "nonlinear": [0, 3, 18, 38], "support": [0, 7, 38, 39], "face": [0, 6, 9, 23, 25, 26, 35, 36, 38, 42], "anywher": 0, "complet": [0, 42], "proof": 0, "camelcas": 0, "snake_cas": [0, 35], "hashgrid": [0, 6, 23], "scalabl": [0, 3, 18, 41], "92": 0, "e": [0, 1, 3, 6, 9, 13, 14, 16, 23, 26, 30, 31, 33, 35, 36, 38, 42], "sweep": 0, "tiniest": 0, "queue": 0, "unifi": 0, "pair": [0, 10, 15, 23, 27, 32, 35, 36, 38], "sweep_and_prun": [0, 6, 23, 38], "reflect": 0, "standard": 0, "prune": 0, "algorithm": [0, 3, 7, 8, 18, 24, 25, 36, 39, 41, 42], "g": [0, 3, 13, 14, 16, 30, 31, 33, 35, 36, 38, 42], "real": 0, "detect": [0, 3, 6, 7, 18, 23, 24, 35, 41], "ericson": 0, "2004": 0, "sweep_and_tiniest_queue_gpu": 0, "exist": [0, 3, 18], "mark": 0, "singl": [0, 1, 3, 14, 25, 31, 38], "argument": [0, 3, 38], "constructor": [0, 9, 42], "explicit": [0, 1, 14], "93": 0, "doubl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 31, 36, 38, 40, 42], "avoid": [0, 1, 3, 40], "implicit": 0, "compat": 0, "latest": [0, 20], "teseoch": 0, "94": 0, "check": [0, 3, 6, 8, 18, 23, 25, 37, 40, 42], "action": [0, 1, 19], "96": 0, "project": [0, 2, 3, 8, 18, 35, 41], "psd": [0, 17, 34, 41, 42], "option": [0, 25, 42], "huangzizh": 0, "95": 0, "neg": [0, 9, 17, 25, 34, 36, 42], "eigenvalu": [0, 17, 34, 41, 42], "zero": [0, 10, 17, 25, 27, 34, 40], "flip": [0, 17, 34], "sign": 0, "accord": 0, "chen": [0, 41, 42], "python": [0, 36, 37, 38, 39, 40, 42], "bind": [0, 20], "numpi": [0, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 38], "100": 0, "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 42], "collisionmesh": [0, 7, 8, 9, 12, 13, 14, 16, 24, 25, 26, 29, 30, 31, 33, 38, 42], "105": 0, "rc": 0, "108": 0, "110": 0, "parent": 0, "pass": [0, 42], "choos": 0, "const": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 38, 40, 42], "narrow_phase_ccd": [0, 7, 8, 24, 25], "contain": [0, 6, 9, 23, 26, 36, 38], "point": [0, 6, 8, 9, 13, 16, 23, 25, 26, 33, 35, 36, 38, 40, 42], "edg": [0, 6, 8, 9, 15, 18, 23, 25, 26, 32, 35, 36, 38, 40, 42], "triangl": [0, 6, 8, 9, 15, 18, 23, 25, 32, 36, 38, 42], "inexactccd": 0, "tightinclusionccd": [0, 8, 24, 25, 40], "additiveccd": 0, "break": [0, 40], "order": [0, 6, 36, 38, 39, 40, 41], "is_step_collision_fre": [0, 7, 8, 24, 25, 38], "broadphasemethod": [0, 6, 7, 8, 12, 13, 23, 24, 25, 29, 30, 38], "broad_phase_method": [0, 7, 8, 12, 13, 24, 25, 29, 30, 38], "default_broad_phase_method": [0, 6, 7, 8, 12, 13, 38], "min_dist": [0, 5, 7, 8, 22, 24, 25, 38, 40], "default_ccd_toler": [0, 8], "long": [0, 6, 7, 8, 9, 13, 14, 16, 39], "default_ccd_max_iter": [0, 8], "default_narrow_phase_ccd": [0, 7, 8], "inexact": [0, 3, 18], "float": [0, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "besid": 0, "rather": [0, 3, 38], "than": [0, 3, 5, 18, 22, 37, 38, 39], "bug": [0, 18], "pybind11": [0, 18, 20], "segment": [0, 10, 27, 29, 40], "fault": 0, "describ": [0, 42], "102": 0, "variou": 0, "featur": 0, "some": [0, 6, 13, 20, 30, 42], "improv": [0, 13, 30, 36, 39], "max": [0, 6, 13, 16, 23, 30, 33, 36], "approxim": [0, 13, 30, 36, 37, 38], "port": 0, "addit": [0, 36], "linear": [0, 3, 7, 8, 18, 24, 25, 36, 38, 40, 42], "geometri": [0, 3, 18, 36, 38, 40], "ferguson": [0, 3, 18, 40, 41, 42], "codimension": [0, 9, 26, 41], "websit": 0, "url": [0, 18], "ipctk": [0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42], "xyz": 0, "54": 0, "simplifi": [0, 36], "tangenti": [0, 11, 28, 38], "basi": [0, 16, 33, 38], "jacobian": [0, 9, 13, 14, 16, 26, 30, 31, 33, 42], "calcul": [0, 25], "thank": 0, "halehossadat": 0, "jpanetta": 0, "56": 0, "findsimd": 0, "neon": 0, "arm": 0, "silicon": 0, "simd": 0, "instruct": 0, "58": 0, "credit": [0, 2], "chrono": 0, "under": [0, 3], "bsd": 0, "claus": 0, "revis": 0, "licens": [0, 3], "over": [0, 7, 8, 24, 25, 35, 36, 40], "55": 0, "dtype": [0, 10, 13, 26, 27, 30], "ee": [0, 7, 13, 30], "keep": [0, 2], "track": 0, "type": [0, 6, 7, 13, 14, 16, 22, 24, 25, 30], "initi": [0, 5, 6, 7, 9, 13, 16, 22, 24, 25, 26, 30, 38], "adjac": [0, 9, 13, 26, 30], "length": [0, 5, 9, 10, 22, 27, 39], "area": [0, 9, 13, 26, 30, 36], "61": 0, "offset": [0, 5, 14, 22, 31, 38], "minimum": [0, 5, 6, 7, 8, 13, 14, 22, 23, 24, 25, 30, 31, 40], "high": [0, 38, 41], "ipc": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 30, 31, 33, 38, 39, 40, 41, 42], "also": [0, 1, 36, 37, 38, 39, 40], "collisionconstraint": 0, "minimum_dist": 0, "dmin": [0, 5, 13, 14, 22, 30, 31, 38], "62": 0, "modifi": [0, 19, 36], "origin": [0, 3, 10, 13, 18, 27, 30, 36, 38, 40], "open": [0, 1, 2, 18, 37], "sourc": [0, 2], "appach": 0, "modif": 0, "additive_ccd": [0, 8], "util": [0, 3, 18, 35, 38, 39], "our": [0, 3, 18, 36, 37, 38, 42], "codim": 0, "return": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40], "true": [0, 3, 7, 8, 9, 24, 25, 26, 29, 36, 39], "less": [0, 5, 22, 37], "tmax": [0, 7, 8, 24, 25, 40], "reli": [0, 42], "valu": [0, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 22, 23, 24, 25, 27, 28, 30, 31, 34, 35, 38, 40, 42], "toi": [0, 7, 8, 25, 38, 40], "mostli": 0, "refer": [0, 3, 6, 13, 16, 17, 18, 20, 23, 30, 33, 35, 38], "comparison": [0, 3, 18], "integr": [0, 18, 36, 38, 42], "abil": 0, "pull": [0, 18, 35], "sampl": 0, "queri": [0, 6, 7, 24, 25], "run": [0, 25], "them": [0, 20, 36, 38], "unit": [0, 5, 14, 22, 36, 38], "gmp": [0, 3, 18], "mention": 0, "63": 0, "codecov": 0, "get": [0, 2, 5, 7, 9, 13, 14, 16, 22, 26, 30, 31, 33, 34, 35, 36, 39, 40, 42], "report": [0, 1, 18, 38], "coverag": 0, "64": 0, "small": [0, 38], "65": 0, "symmetr": [0, 17, 34], "matrix": [0, 7, 8, 9, 16, 17, 25, 26, 33, 34, 35, 38, 42], "assert": [0, 38, 40], "project_to_psd": [0, 17, 34], "project_to_pd": [0, 17, 34], "67": 0, "handl": [0, 3, 42], "66": 0, "discuss": [0, 36], "nose2": 0, "69": 0, "In": [0, 35, 36, 38, 40, 41, 42], "motion": 0, "occur": [0, 7, 8, 24, 25, 38], "71": 0, "72": 0, "trajectori": [0, 3, 7, 8, 18, 24, 25], "ar": [0, 1, 2, 3, 7, 9, 10, 13, 15, 16, 18, 27, 30, 32, 33, 36, 37, 38, 39, 40, 42], "specifi": [0, 1, 38], "through": [0, 1, 2, 3, 18, 38, 42], "nonlineartrajectori": [0, 8, 25, 40], "By": [0, 9, 26, 36, 39], "maximum": [0, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 34, 38, 39, 40], "between": [0, 5, 6, 7, 8, 10, 13, 14, 15, 16, 18, 22, 24, 25, 27, 30, 31, 32, 33, 36, 37, 38, 40, 42], "interv": [0, 3, 7, 8, 18, 24, 25, 40], "arithmet": [0, 3, 8, 18, 25], "That": [0, 36, 38], "max_": [0, 36], "t": [0, 6, 7, 8, 13, 14, 23, 24, 25, 30, 31, 36, 38, 40], "vert": 0, "p": [0, 6, 8, 10, 15, 23, 25, 27, 31, 32, 36, 40], "mathrm": [0, 36], "lerp": 0, "t_0": [0, 15, 32, 40], "t_1": [0, 15, 32, 40], "vert_2": 0, "leq": [0, 40], "sup": 0, "where": [0, 3, 4, 18, 21, 36, 38, 40, 42], "b": [0, 5, 6, 10, 22, 24, 25, 27, 29, 35, 36, 38, 42], "overli": 0, "conserv": [0, 3, 6, 7, 8, 18, 23, 24, 25, 38, 41], "user": 0, "max_distance_from_linear": [0, 8, 25, 40], "close": [0, 10, 27], "form": [0, 18, 36], "known": 0, "we": [0, 1, 3, 14, 18, 20, 35, 36, 37, 38, 40, 42], "perform": [0, 7, 8, 24, 25, 38, 39], "ha": [0, 12, 29, 36, 38], "been": [0, 9, 26], "shown": 0, "correct": [0, 3, 18], "consist": [0, 36], "portabl": 0, "effici": [0, 38], "tang": 0, "2022": 0, "doc": [0, 2], "78": 0, "resolv": 0, "free": [0, 1, 7, 8, 18, 19, 24, 25, 38, 39, 41], "73": 0, "igl": [0, 37, 38, 40, 42], "predic": [0, 3, 18, 29], "segment_segment_intersect": [0, 29], "74": 0, "simplebvh": [0, 3, 6, 18, 38], "75": 0, "shape": [0, 13, 14, 26, 31], "deriv": [0, 4, 5, 11, 13, 14, 18, 21, 22, 28, 31, 36, 42], "76": 0, "addition": [0, 18, 39], "orient": [0, 1], "recent": 0, "comment": [0, 1, 2], "77": 0, "3d": [0, 9, 10, 18, 27, 36, 37, 38], "79": 0, "logo": 0, "zfergu": [0, 1], "52": 0, "independ": 0, "merg": [0, 19], "correctli": 0, "larg": [0, 18, 41], "other": [0, 1, 6, 7, 9, 13, 17, 18, 19, 23, 24, 26, 27, 29, 30, 31, 34, 42], "being": 0, "veloc": [0, 4, 11, 14, 16, 21, 28, 31, 33, 35, 38, 42], "construct_collision_candid": 0, "candid": [0, 6, 13, 23, 30, 38], "compute_barrier_potenti": 0, "compute_potenti": 0, "compute_shape_deriv": 0, "compute_minimum_dist": [0, 13, 30, 38], "construct_friction_constraint_set": 0, "friction_constraint": 0, "compute_friction_": 0, "compute_": 0, "frictionconstraint": 0, "letter": 0, "v": [0, 9, 26, 31, 36, 38], "f": [0, 9, 26, 38], "vertic": [0, 6, 7, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 29, 30, 31, 33, 35, 36, 38, 39], "_index": 0, "_id": 0, "inflation_radiu": [0, 6, 7, 23, 24, 38], "99": 0, "round": [0, 39], "mode": 0, "conservativli": 0, "inflat": [0, 6, 7, 23, 24], "aabb": 0, "are_shape_derivatives_en": 0, "must": [0, 13], "access": 0, "getter": 0, "setter": 0, "previous": 0, "v0": 0, "were": [0, 1, 14, 31, 36], "limit": [0, 19, 39], "scheme": [0, 38], "euler": [0, 38], "upstream": 0, "mean": [0, 36, 37], "you": [0, 2, 3, 8, 18, 20, 25, 37, 38, 39, 42], "multipli": [0, 14, 31, 36, 38], "dv": 0, "dx": 0, "forc": [0, 4, 11, 14, 16, 21, 28, 31, 33, 38, 42], "epsilon_vh": 0, "epsilon_v": [0, 11, 14, 28, 38], "37": 0, "fact": 0, "defin": [0, 10, 27, 36, 38, 39], "term": [0, 1, 13, 30, 35, 36], "displac": [0, 7, 9, 14, 24, 26, 31, 35, 42], "project_hessian_to_psd": [0, 14, 31, 42], "fals": [0, 3, 6, 8, 13, 14, 23, 25, 26, 31, 36, 38], "30": 0, "31": 0, "dropdown": 0, "list": [0, 7, 23, 24, 26, 30, 31, 33, 42], "34": 0, "switch": 0, "templat": [0, 6, 7, 13, 14, 17], "ref": [0, 10, 15], "28": 0, "speed": [0, 4, 11, 14, 21, 28], "1e": [0, 5, 17, 22, 25, 34, 38], "4": [0, 7, 13, 14, 18, 23, 27, 31, 34, 38, 41], "43": 0, "out": [0, 5, 6, 7, 8, 14, 19, 31, 36, 39, 42], "41": 0, "42": 0, "should": [0, 3, 9, 13, 14, 24, 26, 30, 36, 38, 42], "divid": [0, 4, 11, 21, 28], "hat": [0, 4, 5, 14, 21, 22, 31, 36, 38], "d": [0, 4, 5, 14, 21, 22, 29, 31, 36, 38, 39, 42], "cdot": [0, 36, 38], "2d_": 0, "min": [0, 6, 23, 38, 40], "squar": [0, 5, 10, 14, 22, 27, 31, 36, 38], "befor": [0, 13, 18, 25, 35, 36, 38], "wa": [0, 1, 20, 36], "off": [0, 3, 34], "44": 0, "fetchcont": [0, 3, 18], "cpm": [0, 3, 18], "48": 0, "provid": [0, 1, 3, 18, 19, 20, 35, 37, 38, 39, 40, 42], "better": [0, 3, 36, 38], "cach": [0, 13, 16, 30, 33], "made": 0, "robin": [0, 3, 18], "map": [0, 3, 6, 8, 9, 18, 23, 26, 42], "depend": [0, 36, 37], "cfl": [0, 7, 24], "inspir": [0, 1, 7, 24], "cull": [0, 38], "section": 0, "technic": 0, "supplement": 0, "50": 0, "first": [0, 2, 4, 5, 6, 7, 8, 10, 11, 15, 18, 21, 22, 23, 24, 25, 27, 28, 32, 36, 38, 40], "offici": [0, 1, 2], "releas": [0, 20, 39], "stabl": 0, "toolkit": [0, 2, 3, 8, 18, 20, 38, 39, 42], "prior": 0, "place": 0, "7": [0, 27, 41], "wrap": 0, "structur": [0, 3, 18, 38], "ignor": [0, 42], "intern": [0, 36, 42], "surfac": [0, 7, 8, 9, 24, 25, 26, 36, 38, 42], "to_full_dof": [0, 9, 26, 42], "reduc": 0, "gradient": [0, 5, 7, 9, 10, 13, 14, 16, 22, 26, 27, 30, 31, 33, 38, 42], "hessian": [0, 7, 9, 10, 13, 14, 26, 27, 30, 31, 38, 42], "dof": [0, 7, 9, 16, 33, 42], "folder": 0, "organ": [0, 18], "plane": 0, "static": [0, 3, 4, 6, 9, 11, 16, 21, 23, 26, 28, 33, 38, 40], "analyt": [0, 40], "target": [0, 3, 37], "system": [0, 2, 3, 18, 20], "modern": 0, "strategi": 0, "no_zero_toi": [0, 25], "detect_edge_face_collision_candidates_brute_forc": 0, "intersect": [0, 3, 6, 7, 8, 18, 23, 24, 25, 41], "save": 0, "obj": 0, "has_intersect": [0, 12, 29, 39], "after": 0, "possibl": [0, 2, 38], "numer": [0, 25, 35, 36], "problem": 0, "are_overlap": 0, "ignore_codimensional_vertic": 0, "brute": [0, 38], "group": 0, "id": [0, 6, 7, 9, 13, 14, 23, 24, 26, 30, 31, 38], "power": 0, "can_collid": [0, 6, 9, 26], "everyth": 0, "collid": [0, 6, 8, 9, 23, 25, 26, 38], "same": [0, 6, 36, 38, 42], "reorder": 0, "construct_constraint_set": 0, "is_collision_fre": 0, "update_barrier_stiff": [0, 5, 22, 38], "constraint_set": 0, "drop": [0, 9], "dhat": [0, 5, 7, 13, 14, 22, 24, 30, 31, 36, 38, 42], "2d": [0, 9, 10, 18, 27, 29, 36, 38, 40], "verison": 0, "initial_barrier_stiff": [0, 5, 22, 38], "lot": 0, "directori": [0, 3, 8, 37], "src": [0, 37], "spatial_hash": [0, 6, 23, 38], "broad_phas": 0, "file": [0, 2, 3, 18, 19, 37, 38, 39, 42], "hash_grid": [0, 6, 23, 24, 25, 29, 30, 38], "brute_forc": [0, 6, 23, 38], "iter": [0, 8, 25, 38], "tight_inclusion_with_no_zero_toi": 0, "ON": [0, 3, 20], "clear": [0, 6, 7, 13, 16, 23, 24, 30, 33], "given": [0, 2, 6, 8, 14, 23, 25, 29, 31, 36, 40, 42], "friction_constraint_set": 0, "tightinclus": 0, "degener": 0, "char": 0, "except": 0, "std": [0, 3, 6, 7, 8, 9, 13, 14, 16, 17, 18, 23, 26, 31, 39, 42], "gave": 0, "dhat_epsilon_scal": [0, 5, 22], "9": [0, 5, 15, 27, 30, 32, 40], "bbox_diagon": [0, 5, 22, 38], "output": [0, 3, 8, 25, 38], "eigen_ext": 0, "namespac": 0, "size": [0, 1, 7, 8, 9, 13, 14, 16, 24, 25, 26, 31, 33, 36, 38], "matric": [0, 38], "vectorx": 0, "vectormax": 0, "matrixxx": 0, "arraymax": 0, "exact": [0, 3, 18], "voxel_size_heurist": 0, "cpp": [0, 3, 18], "suggest": 0, "good": [0, 36], "voxel": [0, 6, 23], "averag": [0, 5, 22], "consid": [0, 1, 6, 18], "result": [0, 36, 39], "memori": 0, "usag": 0, "parallel": [0, 3, 10, 18, 27, 38], "loop": 0, "main": [0, 38, 39], "compute_friction_potenti": 0, "etc": 0, "addverticesfromedg": 0, "connect": [0, 9, 19, 42], "duplic": [0, 9, 36], "arraymax3": 0, "vectorx3": 0, "base": [0, 3, 5, 10, 14, 18, 22, 23, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 41], "benchmark": [0, 41], "indic": [0, 6, 7, 9, 23, 26, 38, 42], "faster": [0, 3, 18], "multithread": 0, "todo": [0, 42], "fulli": [0, 36], "hpp": [0, 38], "wang": [0, 3, 18, 38, 41], "etienn": [0, 3, 18], "vouga": [0, 3, 18], "readm": 0, "md": 0, "seper": 0, "thick": 0, "increment": [0, 18, 41], "model": 0, "further": [0, 25], "f2e": 0, "similar": [0, 3, 18, 38], "recommend": [0, 8, 18, 25], "If": [0, 2, 3, 6, 7, 8, 10, 13, 14, 18, 20, 23, 24, 25, 27, 30, 31, 36, 37, 38, 39, 42], "simpl": [0, 3, 18, 20], "search": [0, 38], "done": [0, 38], "vectorxd": [0, 5, 9, 14, 16, 38, 42], "matrixxd": [0, 6, 7, 8, 9, 12, 13, 14, 16, 38, 42], "local": [0, 2, 36], "grid": [0, 38], "without": [0, 1, 19], "spatial": [0, 38], "multipl": 0, "broken": 0, "never": [0, 38], "mollif": [0, 10, 27], "have": [0, 1, 9, 13, 14, 24, 26, 30, 31, 36, 38, 40, 42], "pp": 0, "pe": 0, "store": [0, 14, 26, 31, 38, 42], "threshold": [0, 4, 10, 11, 13, 21, 27, 28, 30, 37, 38], "eps_x": [0, 10, 13, 27, 30], "like": [0, 1, 18], "normal": [0, 7, 10, 16, 24, 27, 33, 38], "anywai": 0, "one": [0, 6, 10, 23, 27, 36, 39, 42], "boolean": [0, 12, 29, 38, 42], "compute_friction_potential_hessian": 0, "control": 0, "exclud": 0, "self": [0, 12, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 40], "second": [0, 4, 5, 6, 7, 8, 10, 11, 15, 21, 22, 24, 25, 27, 28, 32, 38, 40], "alreadi": [0, 42], "world": [0, 6, 23], "bound": [0, 3, 5, 6, 7, 8, 18, 22, 23, 24, 25, 37, 38], "box": [0, 5, 6, 7, 22, 23, 24, 25, 37, 38], "diagon": [0, 5, 22], "average_mass": [0, 5, 22], "min_barrier_stiffness_scal": [0, 5, 22], "typo": 0, "intial_barrier_stiff": 0, "inform": [0, 1, 3, 18], "tangent": [0, 16, 33], "magnitud": [0, 4, 14, 16, 21, 31, 33, 38], "closest": [0, 10, 15, 16, 27, 32, 33], "coeffici": [0, 10, 16, 27, 33, 38], "compar": [0, 7, 24], "compon": [0, 38, 42], "compute_friction_bas": 0, "It": [0, 38], "mu": [0, 14, 16, 31, 33, 38, 42], "put": 0, "insid": [0, 37], "dure": [0, 1, 25], "line": [0, 38, 40], "edge_edge_tangent_basi": [0, 15, 32], "spdlog": [0, 3, 17, 18, 39], "prefix": [0, 35, 37], "edgeedgeconstraint": 0, "dhat_squar": 0, "non": [0, 10, 13, 27, 30, 38, 39], "epsv_times_h_squar": 0, "epsv_times_h": 0, "rest": [0, 9, 10, 13, 14, 26, 27, 30, 31, 35, 42], "v_rest": 0, "longer": 0, "member": [1, 6, 7, 9, 13, 14, 16, 23, 27, 31, 34, 35], "leader": 1, "particip": 1, "commun": 1, "harass": 1, "experi": 1, "everyon": 1, "regardless": 1, "ag": 1, "bodi": [1, 5, 18, 22, 40, 41], "visibl": 1, "invis": 1, "disabl": [1, 3], "ethnic": 1, "sex": 1, "characterist": 1, "gender": 1, "ident": 1, "express": [1, 19], "level": [1, 3, 18, 34, 38, 39], "educ": 1, "socio": 1, "econom": 1, "statu": 1, "nation": 1, "person": [1, 19], "appear": 1, "race": 1, "religion": 1, "sexual": 1, "act": 1, "interact": 1, "wai": [1, 2, 3, 18, 20], "contribut": 1, "welcom": [1, 2], "divers": 1, "healthi": 1, "exampl": [1, 3, 18, 20, 36, 38, 39, 40, 42], "behavior": [1, 39], "environ": 1, "demonstr": 1, "empathi": 1, "kind": [1, 19], "toward": 1, "peopl": 1, "Being": 1, "differ": [1, 3, 18, 36, 39], "opinion": 1, "viewpoint": 1, "give": 1, "gracefulli": 1, "accept": 1, "construct": [1, 6, 9, 14, 16, 23, 26, 31, 33, 42], "feedback": 1, "apolog": 1, "those": [1, 2, 37], "affect": 1, "mistak": 1, "learn": 1, "focus": 1, "what": [1, 38], "best": [1, 2, 37, 39], "just": [1, 36, 42], "overal": 1, "unaccept": 1, "languag": 1, "imageri": 1, "attent": 1, "advanc": 1, "ani": [1, 2, 3, 6, 7, 8, 13, 18, 19, 23, 24, 25, 30, 37, 38, 40, 42], "troll": 1, "insult": 1, "derogatori": 1, "polit": 1, "attack": 1, "public": [1, 3, 5, 6, 7, 8, 9, 13, 14, 16, 18, 23, 24, 25, 26, 30, 31, 33, 35, 37, 40], "privat": [1, 6, 9, 14, 23], "publish": [1, 19], "email": 1, "address": 1, "permiss": [1, 19], "could": [1, 2], "reason": 1, "inappropri": 1, "profession": 1, "clarifi": 1, "appropri": [1, 36], "fair": 1, "thei": [1, 2, 29, 36, 37, 39], "deem": 1, "threaten": 1, "offens": 1, "harm": 1, "right": [1, 5, 6, 19, 22, 23, 36, 38], "remov": [1, 36], "edit": 1, "reject": 1, "commit": [1, 3], "wiki": 1, "align": [1, 6, 25, 36], "moder": 1, "decis": 1, "appli": [1, 4, 9, 11, 21, 26, 28, 36, 38, 40, 42], "within": 1, "space": [1, 8, 15, 32, 36], "mail": 1, "post": [1, 2], "via": 1, "social": 1, "media": 1, "account": 1, "appoint": 1, "onlin": 1, "offlin": 1, "event": [1, 19], "instanc": 1, "abus": 1, "otherwis": [1, 3, 8, 19, 25, 36, 40], "mai": 1, "nyu": 1, "edu": [1, 41], "complaint": 1, "review": 1, "investig": [1, 24], "promptli": 1, "fairli": 1, "oblig": 1, "privaci": 1, "secur": 1, "incid": [1, 36], "follow": [1, 3, 18, 19, 20, 35, 38, 39, 40, 42], "impact": [1, 7, 8, 24, 25, 38, 40, 41], "determin": [1, 6, 7, 8, 9, 10, 12, 23, 24, 25, 26, 27, 29, 38], "consequ": 1, "violat": 1, "unprofession": 1, "unwelcom": 1, "A": [1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 24, 25, 26, 27, 29, 30, 32, 33, 34, 41], "written": 1, "clariti": 1, "around": [1, 6, 23, 36, 40], "natur": 1, "explan": 1, "why": [1, 24], "apologi": 1, "request": [1, 18, 35], "seri": 1, "continu": [1, 6, 18, 23, 35, 36, 41], "No": [1, 17, 34], "involv": 1, "unsolicit": 1, "period": 1, "well": [1, 36, 42], "channel": 1, "lead": 1, "seriou": 1, "sustain": 1, "pattern": 1, "aggress": 1, "disparag": 1, "adapt": [1, 18, 40], "0": [1, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 36, 38, 39, 40, 42], "avail": [1, 39], "http": [1, 2, 3, 18, 20, 41], "www": [1, 41], "org": 1, "code_of_conduct": 1, "html": 1, "mozilla": 1, "ladder": 1, "For": [1, 3, 18, 36, 38, 39, 40], "answer": 1, "common": [1, 36], "about": [1, 2, 40], "faq": 1, "translat": [1, 40], "greatli": 2, "appreci": [2, 18], "everi": 2, "littl": 2, "bit": 2, "help": [2, 10, 27, 37], "github": [2, 3, 18, 20, 37, 41], "com": [2, 3, 18, 20, 40], "sim": [2, 3, 18, 19, 20, 41], "pleas": [2, 3, 18, 35, 36, 37], "your": [2, 3, 18, 20, 35, 38, 39, 42], "oper": [2, 5, 7, 8, 13, 14, 16, 36, 40], "detail": [2, 14, 18], "setup": [2, 17, 20], "might": 2, "troubleshoot": 2, "step": [2, 7, 8, 24, 25, 38, 42], "reproduc": 2, "look": [2, 7, 24], "anyth": 2, "tag": [2, 3], "want": [2, 3, 14, 18, 36, 39, 42], "whoever": 2, "enhanc": 2, "timer": 2, "suitabl": 2, "start": [2, 6, 7, 8, 23, 24, 25, 35, 40], "softwar": [2, 18, 19], "whether": [2, 6, 9, 14, 19, 26, 29, 31], "part": [2, 38, 39], "even": [2, 36], "web": 2, "blog": 2, "articl": [2, 18], "send": 2, "propos": [2, 42], "explain": 2, "how": [2, 20, 36, 38, 39, 42], "would": [2, 3, 18, 36], "work": [2, 18, 24, 36, 40, 42], "scope": [2, 39], "easier": [2, 36, 42], "rememb": 2, "volunt": 2, "driven": 2, "easiest": [3, 18, 20], "do": [3, 18, 19, 20, 36, 38, 39, 42], "3": [3, 5, 6, 9, 11, 14, 15, 16, 18, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 36, 38, 41], "14": [3, 18], "veri": [3, 18], "process": [3, 18, 25, 38], "fetchcontent_declar": [3, 18], "ipc_toolkit": [3, 18], "git_repositori": [3, 18], "git": [3, 18, 20], "git_tag": [3, 18], "ipc_toolkit_git_tag": [3, 18], "fetchcontent_makeavail": [3, 18], "target_link_librari": [3, 18], "project_nam": [3, 18], "binari": [3, 18], "v1": 3, "1": [3, 5, 6, 7, 8, 9, 10, 11, 13, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41], "git_shallow": 3, "algebra": [3, 18], "libigl": [3, 18, 42], "basic": [3, 18, 38], "onetbb": [3, 18, 39], "provabl": [3, 18, 38], "2021": [3, 18, 38, 40, 41], "volum": [3, 18, 23], "gpu": [3, 18, 23], "belgrod": [3, 18, 38, 41], "2023": [3, 18, 36, 38, 41, 42], "unordered_set": [3, 6, 9, 18], "unordered_map": [3, 6, 18], "ipc_toolkit_with_robin_map": [3, 18], "ipc_toolkit_with_abseil": [3, 18], "ipc_toolkit_with_filib": [3, 18], "ration": [3, 18], "ipc_toolkit_with_rational_intersect": [3, 18], "lgpl": 3, "2": [3, 5, 6, 9, 11, 15, 16, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 36, 38, 40, 41], "automat": [3, 9, 10, 26, 27, 38], "challeng": 3, "linkag": 3, "dynaic": 3, "copi": [3, 19, 38], "dylib": 3, "dll": 3, "path": [3, 37], "To": [3, 18, 20, 36, 37, 38, 39, 42], "filib_build_shared_lib": 3, "libarai": 3, "lib": [3, 37], "add_custom_command": 3, "my_exe_target": 3, "post_build": 3, "command": [3, 20], "cmake_command": 3, "copy_if_differ": 3, "target_runtime_dl": 3, "target_file_dir": 3, "command_expand_list": 3, "execut": 3, "know": [3, 8, 24, 25, 40], "let": [3, 38, 40], "entir": [3, 38, 39], "With": 3, "quick": [3, 18], "introduct": [3, 18], "ensur": [3, 18], "piec": [3, 18, 38, 40], "ipc_toolkit_build_test": [3, 18], "catch2": [3, 18], "framework": [3, 18, 42], "finit": [3, 18, 42], "diff": [3, 18], "nlohman": [3, 18], "json": [3, 18], "load": [3, 18, 42], "normal_adhesion_potenti": [4, 21], "dhat_p": [4, 14, 21, 31], "dhat_a": [4, 14, 21, 31], "a2": [4, 21], "largest": [4, 7, 14, 21, 24, 31], "_p": [4, 14, 21], "_a": [4, 14, 21], "adjust": [4, 21, 40], "relat": [4, 21], "a_2": [4, 21], "normal_adhesion_potential_first_deriv": [4, 21], "wrt": [4, 5, 9, 10, 13, 14, 16, 21, 22, 26, 27, 30, 31, 33], "normal_adhesion_potential_second_deriv": [4, 21], "max_normal_adhesion_force_magnitud": [4, 21], "tangential_adhesion_f0": [4, 21], "y": [4, 6, 11, 14, 21, 28, 31, 38], "eps_a": [4, 14, 21, 31], "rel": [4, 11, 16, 21, 28, 33, 36, 38], "below": [4, 11, 21, 28], "tangential_adhesion_f1": [4, 21], "tangential_adhesion_f2": [4, 21], "tangential_adhesion_f1_over_x": [4, 21], "tangential_adhesion_f2_x_minus_f1_over_x3": [4, 21], "minu": [4, 11, 21, 28], "cube": [4, 11, 21, 28], "grow": [5, 22], "infin": [5, 22, 25], "approach": [5, 22, 36], "ln": [5, 22, 36], "left": [5, 6, 22, 23, 36, 38], "frac": [5, 11, 15, 22, 28, 32, 36, 38], "barrier_force_magnitud": [5, 22], "distance_squar": [5, 14, 22, 31], "barrier_stiff": [5, 14, 16, 22, 31, 33, 38, 42], "due": [5, 22], "element": [5, 6, 7, 8, 13, 14, 18, 22, 23, 24, 25, 26, 30, 31, 35, 42], "vectormax12d": [5, 7, 13, 14, 16], "barrier_force_magnitude_gradi": [5, 22], "distance_squared_gradi": [5, 14, 22, 31], "grad_energi": [5, 22, 38], "grad_barri": [5, 22, 38], "max_barrier_stiff": [5, 22, 38], "1e11": 5, "init": [5, 16, 22], "scene": [5, 22, 25], "mass": [5, 22, 40], "elast": [5, 22, 36, 38], "energi": [5, 22, 38], "scale": [5, 22, 38, 41], "premultipli": [5, 9, 10, 15, 16, 22, 27, 32, 33, 38], "prev_min_dist": [5, 22], "decreas": [5, 22, 36], "diag": [5, 22], "previou": [5, 14, 22, 31, 38], "current": [5, 13, 14, 17, 20, 22, 31, 38, 39], "fraction": [5, 22], "inherit": [5, 13, 14, 16, 23, 24, 25, 26, 30, 31, 33], "diagram": [5, 13, 14, 16], "subclass": [5, 6, 7, 8, 13, 14, 16], "evalu": [5, 22, 36, 42], "first_deriv": [5, 22], "second_deriv": [5, 22], "collabor": [5, 13, 14, 16], "2020": [5, 18, 19, 22, 36, 41, 42], "inlin": [5, 6, 7, 9, 13, 14, 16], "enumer": [6, 10, 14, 17, 23, 34], "num_method": 6, "constexpr": 6, "broadphas": [6, 23, 37], "bruteforc": [6, 23], "sweepandprun": [6, 23], "void": [6, 7, 9, 13, 14, 16, 17, 39], "matrixxi": [6, 7, 9, 13, 38, 42], "radiu": [6, 23, 40], "vertices_t0": [6, 7, 8, 23, 24, 25, 38], "vertices_t1": [6, 7, 8, 23, 24, 25, 38], "end": [6, 7, 8, 11, 15, 23, 24, 25, 28, 32, 35, 36, 38, 39, 40], "built": [6, 13, 14, 23, 30, 31, 36, 38], "detect_vertex_vertex_candid": [6, 23], "vector": [6, 7, 9, 13, 14, 15, 16, 23, 26, 32, 38, 39, 42], "vertexvertexcandid": [6, 7, 13, 16, 23, 24, 30, 33], "find": [6, 8, 23, 25, 38, 40], "detect_edge_vertex_candid": [6, 23], "edgevertexcandid": [6, 7, 13, 16, 23, 24, 30, 33, 38], "detect_edge_edge_candid": [6, 23, 37], "edgeedgecandid": [6, 7, 13, 16, 23, 24, 30, 33, 38], "detect_face_vertex_candid": [6, 23], "facevertexcandid": [6, 7, 13, 16, 23, 24, 30, 33, 38], "detect_edge_face_candid": [6, 23], "edgefacecandid": [6, 7, 23, 24], "detect_face_face_candid": [6, 23], "facefacecandid": [6, 23], "detect_collision_candid": [6, 23], "int": [6, 7, 9, 13, 15, 16, 17, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 39], "dim": [6, 7, 9, 15, 16, 23, 26, 32, 33], "dimension": [6, 23], "simul": [6, 18, 23, 25, 38, 41], "dimens": [6, 7, 9, 15, 16, 23, 26, 32, 33, 38], "bool": [6, 7, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 38, 39, 40, 42], "size_t": [6, 7, 9, 13, 16], "can_vertices_collid": [6, 23], "default_can_vertices_collid": 6, "shared_ptr": [6, 14, 17, 39], "make_broad_phas": [6, 23], "regist": [6, 23], "protect": [6, 9, 13, 14, 16, 40], "can_edge_vertex_collid": 6, "ei": [6, 9, 26], "vi": [6, 9, 26], "can_edges_collid": 6, "eai": 6, "ebi": 6, "can_face_vertex_collid": 6, "fi": 6, "can_edge_face_collid": 6, "can_faces_collid": 6, "fai": 6, "fbi": 6, "attribut": [6, 7, 9, 13, 14, 23, 24, 26, 30, 31, 33], "vertex_box": 6, "edge_box": 6, "face_box": 6, "typenam": [6, 7, 13, 14, 17], "triangular": [6, 9, 38], "detect_candid": 6, "boxes0": 6, "boxes1": 6, "j": [6, 36], "primit": [6, 7, 9, 23, 24, 26, 38], "cell_siz": [6, 23], "arraymax3i": 6, "grid_siz": [6, 23], "arraymax3d": 6, "domain_min": [6, 23], "domain_max": [6, 23], "resiz": 6, "insert_box": 6, "hashitem": 6, "item": 6, "extent": 6, "z": 6, "creat": [6, 35, 38], "cell": 6, "locat": [6, 25], "m_cell_siz": 6, "m_grid_siz": 6, "m_domain_min": 6, "m_domain_max": 6, "vertex_item": 6, "edge_item": 6, "face_item": 6, "items0": 6, "items1": 6, "among": 6, "voxel_s": [6, 23], "is_vertex_index": [6, 23], "idx": [6, 23], "index": [6, 9, 13, 16, 23, 26, 30, 33, 42], "is_edge_index": [6, 23], "is_triangle_index": [6, 23], "to_edge_index": [6, 23], "convert": [6, 9, 23, 42], "to_triangle_index": [6, 23], "left_bottom_corn": [6, 23], "bottom": [6, 23], "corner": [6, 23, 25], "right_top_corn": [6, 23], "top": [6, 23], "voxel_count": [6, 23], "number": [6, 7, 8, 9, 13, 16, 18, 23, 25, 26, 30, 33, 34, 38, 39], "each": [6, 9, 23, 26, 29, 36, 38, 40], "one_div_voxels": [6, 23], "voxel_count_0x1": [6, 23], "edge_start_ind": [6, 23], "tri_start_ind": [6, 23], "voxel_to_primit": [6, 23], "point_to_voxel": [6, 23], "occupi": [6, 23], "edge_to_voxel": [6, 23], "face_to_voxel": [6, 23], "query_point_for_point": 6, "vert_ind": 6, "query_point_for_edg": 6, "edge_ind": 6, "query_point_for_triangl": 6, "tri_ind": 6, "query_edge_for_edg": 6, "query_edge_for_triangl": 6, "query_triangle_for_triangl": 6, "ti": [6, 41], "locate_voxel_index": 6, "vectormax3d": [6, 8, 10, 13, 15, 16, 40], "locate_voxel_axis_index": 6, "locate_box_voxel_axis_index": 6, "min_corn": [6, 25], "max_corn": [6, 25], "min_index": 6, "max_index": 6, "voxel_axis_index_to_voxel_index": 6, "voxel_axis_index": 6, "ix": 6, "ii": 6, "iz": 6, "built_in_radiu": 6, "swap_ord": 6, "boxesa": 6, "boxesb": 6, "query_a_for_b": 6, "swap": 6, "ad": [6, 37, 39], "query_a_for_a": 6, "vertex_bvh": 6, "edge_bvh": 6, "face_bvh": 6, "init_bvh": 6, "scalable_ccd": 6, "mutabl": 6, "vv_sort_axi": 6, "ev_sort_axi": 6, "ee_sort_axi": 6, "fv_sort_axi": 6, "ef_sort_axi": 6, "ff_sort_axi": 6, "axi": [6, 25], "aabb1": [6, 23], "aabb2": [6, 23], "aabb3": [6, 23], "anoth": [6, 23], "arrai": [6, 7, 13, 14, 25, 26, 36, 38, 40, 42], "vertex_id": [6, 7, 13, 14, 16, 23, 24, 30, 31], "attach": [6, 23], "from_point": [6, 23], "sphere": [6, 23], "enclos": [6, 23, 40], "p_t0": [6, 10, 23, 27, 38, 40], "p_t1": [6, 10, 23, 27, 38, 40], "tempor": [6, 23], "capsul": [6, 23], "conservative_infl": [6, 23], "discret": [7, 24, 36, 42], "rowwis": [7, 14, 24, 31], "amount": [7, 24], "assum": [7, 8, 24, 25], "empti": [7, 13, 16, 24, 30, 33], "continuouscollisioncandid": [7, 24, 30, 33], "maxim": [7, 8, 24, 25], "compute_noncandidate_conservative_steps": [7, 24], "feasibl": [7, 24], "compute_cfl_steps": [7, 24], "save_obj": [7, 24], "string": [7, 13, 39], "filenam": [7, 24, 35], "vv_candid": [7, 24, 30], "ev_candid": [7, 24], "ee_candid": [7, 24], "fv_candid": [7, 24], "most": [7, 40], "four": 7, "normalcollis": [7, 13, 14, 16, 30, 31, 33, 38, 42], "tangentialcollis": [7, 14, 16, 31, 33, 36, 38, 42], "num_vertic": [7, 9, 13, 26], "ndof": [7, 9, 16, 26, 33], "degre": [7, 9, 14, 16, 26, 31, 33], "freedom": [7, 9, 14, 16, 26, 31, 33], "vectormax3": 7, "matrixx": 7, "nan": 7, "vectormax12": 7, "compute_distance_gradi": [7, 13], "w": [7, 13, 14, 30, 31, 41], "r": [7, 13, 14, 30, 31, 36, 40], "matrixmax12d": [7, 13, 14], "compute_distance_hessian": [7, 13], "had": [7, 24], "ostream": 7, "write_ccd_queri": 7, "write": 7, "stream": 7, "vertexvertexnormalcollis": [7, 13, 16, 30, 33], "vertexvertextangentialcollis": [7, 16, 33], "vertex0_id": [7, 13, 16, 24, 30], "vertex1_id": [7, 13, 16, 24, 30], "friend": [7, 13], "h": [7, 13, 38, 39], "abslhashvalu": [7, 13], "vv": [7, 13, 30], "edgevertexnormalcollis": [7, 13, 16, 30, 33], "edgevertextangentialcollis": [7, 16, 33], "edge_id": [7, 13, 16, 24, 30], "pointedgedistancetyp": [7, 10, 13, 24, 27], "known_dtyp": [7, 13, 16, 24], "ev": [7, 13, 30], "edgeedgenormalcollis": [7, 13, 16, 30, 33], "edgeedgetangentialcollis": [7, 16, 33], "edge0_id": [7, 13, 16, 24, 30], "edge1_id": [7, 13, 16, 24, 30], "edgeedgedistancetyp": [7, 10, 13, 16, 24, 27, 30], "Not": 7, "face_id": [7, 13, 16, 24, 30], "fv": [7, 9, 13, 26], "facevertexnormalcollis": [7, 13, 16, 30, 33], "facevertextangentialcollis": [7, 16, 33], "pointtriangledistancetyp": [7, 10, 13, 24, 27], "row": [8, 9, 25, 26, 38, 42], "doxygenvari": 8, "cannot": [8, 42], "doxygen": [8, 35], "xml": 8, "doxyoutput": 8, "default_ccd_conservative_resc": 8, "doxygenfunct": 8, "point_point_ccd": 8, "point_edge_ccd": [8, 38], "edge_edge_ccd": [8, 25, 38], "point_triangle_ccd": [8, 25, 38], "ccd_strategi": 8, "intervalnonlineartrajectori": [8, 25], "t0": [8, 10, 12, 15, 25, 27, 29, 32, 40], "t1": [8, 10, 12, 15, 25, 27, 29, 32, 40], "vectormax3i": 8, "tighter": [8, 25], "point_point_nonlinear_ccd": [8, 25, 40], "p0": [8, 10, 15, 25, 27, 32], "p1": [8, 10, 15, 25, 27, 32], "default_toler": [8, 40], "default_max_iter": [8, 40], "conservative_resc": [8, 25, 40], "default_conservative_resc": 8, "along": [8, 25], "point_edge_nonlinear_ccd": [8, 25, 40], "e0": [8, 10, 12, 15, 25, 27, 29, 32, 35, 40], "e1": [8, 10, 12, 15, 25, 27, 29, 32, 35, 40], "endpoint": [8, 15, 25, 29, 32, 40], "edge_edge_nonlinear_ccd": [8, 25, 40], "ea0": [8, 10, 15, 25, 27, 32], "ea1": [8, 10, 15, 25, 27, 32], "eb0": [8, 10, 15, 25, 27, 32], "eb1": [8, 10, 15, 25, 27, 32], "point_triangle_nonlinear_ccd": [8, 25, 40], "t2": [8, 10, 12, 15, 25, 27, 29, 32], "third": [8, 10, 15, 25, 27, 32, 36], "conservative_piecewise_linear_ccd": [8, 25], "linear_ccd": [8, 25], "piecewis": [8, 25, 36, 40], "encapsol": 9, "transform": [9, 40], "go": 9, "volumetr": 9, "fe": 9, "immut": 9, "rest_posit": [9, 13, 14, 26, 30, 31, 35, 38, 42], "sparsematrix": [9, 14, 38, 42], "displacement_map": [9, 26, 42], "include_vertex": [9, 26], "full_rest_posit": [9, 26, 42], "init_adjac": [9, 26], "init_area_jacobian": [9, 26], "destroi": 9, "num_codim_vertic": [9, 26], "num_codim_edg": [9, 26], "num_edg": [9, 26], "num_fac": [9, 26], "full_num_vertic": [9, 26], "full_ndof": [9, 26], "vectorxi": [9, 42], "codim_vertic": [9, 26, 42], "cv": [9, 26], "codim_edg": [9, 26], "ce": [9, 26], "faces_to_edg": [9, 26], "full_posit": [9, 26, 42], "displace_vertic": [9, 26, 42], "full_displac": [9, 26, 42], "map_displac": [9, 26, 42], "to_full_vertex_id": [9, 26], "correspond": [9, 26, 36], "quantiti": [9, 26], "chain": [9, 26, 42], "rule": [9, 26, 35, 42], "equal": [9, 26], "vertex_vertex_adjac": [9, 26], "vertex_edge_adjac": [9, 26], "edge_vertex_adjac": [9, 26], "are_adjacencies_initi": [9, 26], "is_vertex_on_boundari": [9, 26], "boundari": [9, 26, 36, 42], "vertex_area": [9, 26], "barycentr": [9, 15, 16, 26, 32, 33], "sparsevector": [9, 13, 16], "vertex_area_gradi": [9, 26], "edge_area": [9, 26], "edge_area_gradi": [9, 26], "are_area_jacobians_initi": [9, 26], "default_can_collid": 9, "build_from_full_mesh": [9, 26, 42], "helper": [9, 26, 42], "construct_is_on_surfac": [9, 26, 42], "construct_faces_to_edg": [9, 26], "init_codim_vertic": 9, "init_codim_edg": 9, "init_selection_matric": 9, "init_area": 9, "m_full_rest_posit": 9, "m_rest_posit": 9, "m_codim_vertic": 9, "m_codim_edg": 9, "m_edg": 9, "indici": 9, "m_face": 9, "m_faces_to_edg": 9, "m_full_vertex_to_vertex": 9, "m_vertex_to_full_vertex": 9, "m_select_vertic": 9, "\u211d": 9, "m_select_dof": 9, "m_displacement_map": 9, "m_displacement_dof_map": 9, "m_vertex_vertex_adjac": 9, "m_vertex_edge_adjac": 9, "m_edge_vertex_adjac": 9, "m_is_vertex_on_boundari": 9, "polylin": 9, "m_vertex_area": 9, "m_edge_area": 9, "m_vertex_area_jacobian": 9, "m_edge_area_jacobian": 9, "vertex_matrix_to_dof_matrix": 9, "m_v": 9, "meant": 9, "m_dof": 9, "entri": [9, 42], "p_e0": [10, 27], "p_e1": [10, 27], "p_e": [10, 27], "interior": [10, 27], "auto": [10, 13, 27, 30], "ea0_eb0": [10, 27], "ea0_eb1": [10, 27], "ea1_eb0": [10, 27], "ea1_eb1": [10, 27], "ea_eb0": [10, 27], "ea_eb1": [10, 27], "ea0_eb": [10, 27], "ea1_eb": [10, 27], "ea_eb": [10, 27], "p_t2": [10, 27], "p_e2": [10, 27], "p_t": [10, 27], "point_edge_distance_typ": [10, 27], "edge_edge_distance_typ": [10, 27], "vector3d": [10, 12, 15, 38], "point_triangle_distance_typ": [10, 27], "edge_edge_mollifier_threshold": [10, 27], "ea0_rest": [10, 27], "ea1_rest": [10, 27], "eb0_rest": [10, 27], "eb1_rest": [10, 27], "edge_edge_cross_squarednorm": [10, 27], "norm": [10, 27, 36, 40], "cross": [10, 27], "product": [10, 27], "vector12d": [10, 13], "edge_edge_cross_squarednorm_gradi": [10, 27], "matrix12d": [10, 13], "edge_edge_cross_squarednorm_hessian": [10, 27], "edge_edge_mollifi": [10, 13, 27], "smooth": [10, 14, 18, 27, 31, 36, 38], "edge_edge_mollifier_gradi": [10, 27], "edge_edge_mollifier_hessian": [10, 27], "edge_edge_dist": [10, 27, 37], "actual": [10, 27], "edge_edge_distance_gradi": [10, 27], "edge_edge_distance_hessian": [10, 27], "line_line_dist": [10, 27], "infinit": [10, 27], "line_line_distance_gradi": [10, 27], "line_line_distance_hessian": [10, 27], "point_edge_dist": [10, 27], "vectormax9d": [10, 15], "point_edge_distance_gradi": [10, 27], "grad": [10, 27, 42], "matrixmax9d": 10, "point_edge_distance_hessian": [10, 27], "hess": [10, 27, 42], "point_line_dist": [10, 27], "point_line_distance_gradi": [10, 27], "point_line_distance_hessian": [10, 27], "point_plane_dist": [10, 27], "point_plane_distance_gradi": [10, 27], "matrix3d": 10, "point_plane_distance_hessian": [10, 27], "point_point_dist": [10, 27], "vectormax6d": 10, "point_point_distance_gradi": [10, 27], "matrixmax6d": 10, "point_point_distance_hessian": [10, 27], "point_triangle_dist": [10, 27], "point_triangle_distance_gradi": [10, 27], "point_triangle_distance_hessian": [10, 27], "smooth_friction_f0": [11, 28], "eps_v": [11, 14, 28, 31, 38, 42], "f_0": [11, 28, 38], "begin": [11, 15, 28, 32, 36, 38, 39], "case": [11, 28, 36, 38, 40, 42], "newlin": [11, 28], "geq": [11, 28, 36], "smooth_friction_f1": [11, 28], "f_1": [11, 28], "smooth_friction_f2": [11, 28], "f_2": [11, 28], "smooth_friction_f1_over_x": [11, 28], "smooth_friction_f2_x_minus_f1_over_x3": [11, 28], "f1": [11, 28], "is_edge_intersecting_triangl": [12, 29], "value_typ": [13, 14, 16], "is_vertex_vertex": [13, 30], "is_edge_vertex": [13, 30], "is_edge_edg": [13, 30], "is_face_vertex": [13, 30], "is_plane_vertex": [13, 30], "necessarili": 13, "set_use_area_weight": [13, 36], "set_use_improved_max_approxim": [13, 36], "enable_shape_deriv": [13, 30], "set_enable_shape_deriv": 13, "to_str": 13, "vv_collis": [13, 16, 30, 33], "ev_collis": [13, 16, 30, 33], "ee_collis": [13, 16, 30, 33], "fv_collis": [13, 16, 30, 33], "planevertexnormalcollis": [13, 30], "pv_collis": [13, 30], "m_use_area_weight": 13, "m_use_improved_max_approxim": 13, "m_enable_shape_deriv": 13, "weight_gradi": [13, 16, 30, 33], "doe": [13, 18, 30, 42], "mollifier_threshold": [13, 30], "mollifier_gradi": [13, 30], "mollifier_hessian": [13, 30], "mollifier_gradient_wrt_x": [13, 30], "mollifier_gradient_jacobian_wrt_x": [13, 30], "_vertex0_id": 13, "_vertex1_id": 13, "_weight": 13, "_weight_gradi": 13, "_edge_id": 13, "_vertex_id": 13, "_face_id": 13, "plane_origin": [13, 30], "plane_norm": [13, 30], "tcollis": 14, "psdprojectionmethod": [14, 17, 31, 34], "none": [14, 17, 23, 24, 26, 27, 30, 31, 33, 34], "sure": [14, 31], "semi": [14, 31], "definit": [14, 31], "normalpotenti": [14, 16, 31], "normaladhesionpotenti": [14, 31], "shape_deriv": [14, 31], "throw": 14, "runtime_error": [14, 31], "triplet": [14, 31], "inout": 14, "here": [14, 20, 31, 36, 38], "force_magnitud": [14, 31], "stiff": [14, 16, 18, 31, 36], "force_magnitude_gradi": [14, 31], "unmollifi": 14, "unsquar": 14, "super": 14, "use_physical_barri": [14, 31, 36], "set_dhat": 14, "set_barri": 14, "pa": [14, 36], "\u03ba": 14, "notebook": [14, 20], "physical_barri": 14, "ipynb": [14, 20], "set_use_physical_barri": [14, 36], "m_barrier": 14, "make_shar": [14, 39], "m_dhat": 14, "m_use_physical_barri": 14, "_dhat_p": 14, "_dhat_a": 14, "_y": 14, "_eps_c": 14, "young": [14, 31, 36], "modulu": [14, 31, 36], "eps_c": [14, 31], "critic": [14, 31, 34], "strain": [14, 31], "varepsilon_c": 14, "normal_adhesion_potential_arg": 14, "tangentialpotenti": [14, 31], "tangentialadhesionpotenti": [14, 31], "diffwrt": [14, 31], "differenti": [14, 31], "lagged_displac": [14, 31], "lag": [14, 18, 31, 38], "barrier_potenti": [14, 16, 31, 33, 36, 38], "no_mu": [14, 31], "force_jacobian": [14, 31], "f0": 14, "f1_over_x": 14, "f2_x_minus_f1_over_x3": 14, "is_dynam": 14, "set_eps_v": 14, "m_eps_v": 14, "epsilon_a": [14, 31], "set_eps_a": 14, "m_eps_a": 14, "matrixmax": [15, 16], "point_point_tangent_basi": [15, 32], "3x2": [15, 32], "whose": [15, 32, 38], "column": [15, 26, 32], "point_edge_tangent_basi": [15, 32], "point_triangle_tangent_basi": [15, 32], "bmatrix": [15, 32, 38], "t_2": [15, 32], "18": 15, "point_point_tangent_basis_jacobian": [15, 32], "6": [15, 16, 25, 27, 32, 34, 41], "27": 15, "point_edge_tangent_basis_jacobian": [15, 32], "36": [15, 16, 32], "edge_edge_tangent_basis_jacobian": [15, 32], "12": [15, 16, 27, 30, 32], "point_triangle_tangent_basis_jacobian": [15, 32], "point_point_relative_veloc": [15, 32], "dp0": [15, 32], "dp1": [15, 32], "point_edge_relative_veloc": [15, 32], "dp": [15, 32], "de0": [15, 32], "de1": [15, 32], "alpha": [15, 32], "parametr": [15, 32], "coordin": [15, 16, 32, 33, 35, 36], "edge_edge_relative_veloc": [15, 32], "dea0": [15, 32], "dea1": [15, 32], "deb0": [15, 32], "deb1": [15, 32], "vector2d": [15, 40], "coord": [15, 32], "point_triangle_relative_veloc": [15, 32], "dt0": [15, 32], "dt1": [15, 32], "dt2": [15, 32], "baricentr": [15, 32], "point_point_relative_velocity_matrix": [15, 32], "point_edge_relative_velocity_matrix": [15, 32], "edge_edge_relative_velocity_matrix": [15, 32], "point_triangle_relative_velocity_matrix": [15, 32], "point_point_relative_velocity_matrix_jacobian": [15, 32], "point_edge_relative_velocity_matrix_jacobian": [15, 32], "edge_edge_relative_velocity_matrix_jacobian": [15, 32], "point_triangle_relative_velocity_matrix_jacobian": [15, 32], "point_edge_closest_point": [15, 32], "vector2": 15, "edge_edge_closest_point": [15, 32], "point_triangle_closest_point": [15, 32], "point_edge_closest_point_jacobian": [15, 32], "edge_edge_closest_point_jacobian": [15, 32], "point_triangle_closest_point_jacobian": [15, 32], "blend_mu": [16, 33], "default_blend_mu": [16, 33], "mu0": [16, 33], "mu1": [16, 33], "compute_tangent_basi": [16, 33], "compute_tangent_basis_jacobian": [16, 33], "vectormax2d": 16, "compute_closest_point": [16, 33], "compute_closest_point_jacobian": [16, 33], "relative_veloc": [16, 33], "relative_velocity_matrix": [16, 33], "closest_point": [16, 33], "relative_velocity_matrix_jacobian": [16, 33], "normal_force_magnitud": [16, 33], "ratio": [16, 33], "tangent_basi": [16, 33], "normal_potenti": 16, "retriev": 17, "set_logg": [17, 39], "thread": 17, "safe": 17, "_scalar": 17, "_row": 17, "_col": 17, "_option": 17, "_maxrow": 17, "_maxcol": 17, "onto": [17, 34, 42], "cone": [17, 34, 42], "ep": [17, 34], "8": [17, 25, 27, 38, 40, 41], "ab": [17, 34, 38, 41, 42], "reusabl": 18, "its": [18, 38, 42], "As": [18, 36, 39, 42], "solver": [18, 25, 36, 38], "polyfem": [18, 42], "rigid": [18, 40, 41], "both": [18, 36, 38], "contributor": 18, "come": 18, "fix": [18, 36, 38], "highli": 18, "submit": 18, "simpli": [18, 36, 42], "fork": 18, "cite": 18, "zachari": [18, 41], "titl": 18, "year": 18, "paper": [18, 36], "li2020ipc": 18, "minchen": [18, 41], "teseo": [18, 41], "schneider": [18, 41], "timothi": [18, 41], "langloi": [18, 41], "deni": [18, 41], "zorin": [18, 41], "daniel": [18, 41], "panozzo": [18, 41], "chenfanfu": [18, 41], "jiang": [18, 41], "danni": [18, 41], "kaufman": [18, 41], "invers": [18, 41], "deform": [18, 38, 41, 42], "journal": 18, "acm": [18, 41], "tran": 18, "graph": 18, "siggraph": [18, 41], "39": 18, "articleno": 18, "49": [18, 40], "mit": [18, 19], "copyright": 19, "c": [19, 20, 29, 31, 36, 37, 38, 39, 40, 41, 42], "herebi": 19, "grant": 19, "charg": 19, "obtain": 19, "associ": [19, 41], "deal": 19, "restrict": 19, "distribut": 19, "sublicens": 19, "sell": 19, "permit": 19, "whom": 19, "furnish": 19, "subject": 19, "condit": 19, "abov": [19, 36], "notic": 19, "shall": 19, "substanti": 19, "portion": 19, "THE": 19, "AS": 19, "warranti": 19, "OF": 19, "OR": 19, "impli": [19, 36], "BUT": 19, "NOT": 19, "TO": 19, "merchant": 19, "fit": 19, "FOR": 19, "particular": 19, "purpos": 19, "AND": 19, "noninfring": 19, "IN": 19, "NO": 19, "holder": 19, "BE": 19, "liabl": 19, "claim": 19, "damag": 19, "liabil": 19, "contract": 19, "tort": 19, "aris": 19, "WITH": 19, "pip": [20, 42], "wish": 20, "develop": 20, "scratch": 20, "either": 20, "clone": 20, "repo": 20, "manual": 20, "py": 20, "script": 20, "setuptool": 20, "root": [20, 25], "success": 20, "import": [20, 37], "altern": [20, 38], "mkdir": 20, "cd": 20, "dcmake_build_typ": 20, "dipc_toolkit_build_python": 20, "j4": 20, "found": 20, "jupyt": 20, "ndarrai": [22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34], "float64": [22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34], "100000000000": 22, "tupl": [22, 23, 24, 25], "09": 22, "pybind11_object": [22, 23, 24, 25, 26, 27, 30, 31, 33, 34], "__call__": [22, 25, 31, 40], "__init__": [22, 23, 24, 25, 26, 27, 30, 31, 33, 34, 40], "__module__": [22, 23, 24, 25, 26, 27, 30, 31, 33, 34], "__annotations__": [22, 23, 24, 25, 26, 27, 30, 31, 33, 34], "bounding_volume_hierarchi": 23, "5": [23, 27, 34, 38, 40, 41], "__eq__": [23, 24, 27, 30, 31, 34], "__getstate__": [23, 27, 31, 34], "__hash__": [23, 24, 27, 30, 31, 34], "__index__": [23, 27, 31, 34], "__int__": [23, 27, 31, 34], "__members__": [23, 27, 31, 34], "__ne__": [23, 24, 27, 30, 31, 34], "__repr__": [23, 24, 27, 31, 34], "str": [23, 24, 27, 30, 31, 34], "__setstate__": [23, 27, 31, 34], "state": [23, 27, 31, 34], "__str__": [23, 24, 27, 30, 31, 34], "properti": [23, 24, 26, 27, 30, 31, 33, 34], "arg": [23, 24, 25, 26, 27, 30, 31, 33, 40], "kwarg": [23, 24, 25, 26, 27, 30, 31, 33], "overload": [23, 24, 25, 26, 27, 30, 31, 33], "n": [23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 38], "int32": [23, 24, 26], "collect": [23, 25, 26], "abc": [23, 25, 26], "callabl": [23, 25, 26, 33], "tsl": [23, 26], "robin_map": 23, "alloc": [23, 26, 39], "absl": [23, 26], "lts_20230125": [23, 26], "hash_intern": [23, 26], "equal_to": [23, 26], "rh": [23, 26], "power_of_two_growth_polici": [23, 26], "2ul": [23, 26], "annot": [23, 31], "fixeds": [23, 31], "__getitem__": [24, 30, 33], "arg0": 24, "__len__": [24, 30, 33], "0x7f906d309470": 24, "0x7f906c56b930": 24, "0x7f906c5c1770": 24, "autoclass": 24, "don": 24, "0x7f906c5c2870": 24, "print_ccd_queri": 24, "print": 24, "cout": 24, "__lt__": [24, 30], "0x7f9060bbb170": 25, "0x7f906c5c3e30": 25, "tight_inclus": [25, 41], "ea0_t0": 25, "ea1_t0": 25, "eb0_t0": 25, "eb1_t0": 25, "ea0_t1": 25, "ea1_t1": 25, "eb0_t1": 25, "eb1_t1": 25, "06": 25, "10000000": 25, "filter": [25, 41], "ccd_method": 25, "ccdrootfindingmethod": 25, "breadth_first_search": 25, "earliest": [25, 40], "upper": 25, "1e7": 25, "until": [25, 39], "get_numerical_error": 25, "refin": 25, "produc": [25, 36], "happen": 25, "precis": 25, "v_t0": 25, "f0_t0": 25, "f1_t0": 25, "f2_t0": 25, "v_t1": 25, "f0_t1": 25, "f1_t1": 25, "f2_t1": 25, "compute_ccd_filt": 25, "is_vertex_fac": 25, "using_minimum_separ": 25, "error": [25, 34], "estim": [25, 36, 40], "whole": 25, "scipi": [26, 30, 31, 33], "spars": [26, 30, 31, 33, 38], "csc_matrix": [26, 30, 31, 33], "compress": 26, "robin_set": 26, "orient2d": 29, "1st": 29, "2st": 29, "_": [31, 36], "varepsilon_": 31, "epsilon_": 31, "psilon_a": 31, "note": 33, "loggerlevel": [34, 39], "trace": 34, "debug": [34, 39], "info": [34, 39], "set_logger_level": [34, 39], "get_num_thread": [34, 39], "set_num_thread": [34, 39], "nthread": [34, 39], "08": 34, "clangformat": 35, "autom": 35, "push": 35, "stick": 35, "pascalcas": 35, "struct": 35, "all_cap": 35, "constant": 35, "m_": 35, "set_memb": 35, "materi": [35, 36], "suffix": 35, "_t0": 35, "_t1": 35, "favor": 35, "hard": 35, "prefer": 35, "three": 36, "collision_mesh": [36, 38, 39, 42], "effect": 36, "briefli": 36, "summar": 36, "conveni": [36, 38], "mathcal": 36, "embed": 36, "parameter": 36, "possibli": 36, "discontinu": 36, "tild": 36, "subset": 36, "mathbb": 36, "travers": 36, "across": 36, "contigu": 36, "total": 36, "int_": 36, "setminu": 36, "_r": 36, "setminus_r": 36, "mapsto": 36, "mid": 36, "_2": 36, "rightarrow": 36, "triangul": [36, 38], "domain": 36, "backslash": 36, "node": 36, "quadratur": 36, "nodal": 36, "bar": [36, 40], "sum_": [36, 38], "w_": 36, "next": [36, 38], "howev": [36, 39, 42], "l": 36, "logsumexp": 36, "sparsiti": 36, "subsequ": 36, "solv": [36, 38], "increas": [36, 40], "leverag": 36, "psi_": 36, "e_": 36, "text": 36, "x_2": 36, "v_": 36, "approx": 36, "subseteq": 36, "convex": 36, "region": 36, "while": [36, 40, 42], "remain": 36, "turn": 36, "nonconvex": 36, "direct": [36, 38], "summat": 36, "p_": 36, "w_x": 36, "cover": 36, "curv": [36, 41], "kei": 36, "cancel": 36, "minor": 36, "chang": [36, 39], "consider": 36, "togeth": 36, "pressur": 36, "achiev": 36, "lr": 36, "equival": 36, "therefor": 36, "kappa": [36, 38], "mani": 36, "intent": 36, "treat": 36, "thin": 36, "pick": 36, "choic": 36, "bin": 37, "too": [37, 38], "approximatli": 37, "walk": 38, "bunni": [38, 42], "ply": [38, 42], "core": [38, 39], "read_triangle_mesh": [38, 42], "meshio": [38, 42], "read": [38, 42], "cells_dict": [38, 42], "undeform": 38, "squash": 38, "height": 38, "col": 38, "01": 38, "10": 38, "discard": 38, "mathemat": [38, 40], "k": 38, "d_k": 38, "th": 38, "c2": 38, "barrier_potential_grad": 38, "barrier_potential_hess": 38, "These": [38, 42], "dens": 38, "taken": 38, "wise": 38, "flatten": 38, "x_1": 38, "y_1": 38, "z_1": 38, "vdot": 38, "x_n": 38, "y_n": 38, "z_n": 38, "nabla": 38, "partial": 38, "ddot": 38, "last": [38, 40], "becom": 38, "world_bbox_diagonal_length": 38, "avg_mass": 38, "prev_dist": 38, "curr_dist": 38, "xi": 38, "d_": 38, "shell": [38, 42], "cloth": 38, "field": 38, "tangential_collis": [38, 42], "global": 38, "friction_potenti": 38, "transit": 38, "backward": 38, "lambda_k": 38, "nf_0": 38, "t_k": 38, "tv": 38, "friction_potential_grad": 38, "friction_potential_hess": 38, "incorpor": 38, "There": 38, "former": 38, "latter": 38, "max_step_s": 38, "collision_free_vertic": 38, "compris": 38, "quadrat": 38, "elimin": 38, "overlap": 38, "show": [38, 39, 42], "codebas": 38, "bvh": 38, "accur": [38, 40], "rare": 38, "t0_t0": 38, "t1_t0": 38, "t2_t0": 38, "t0_t1": 38, "t1_t1": 38, "t2_t1": 38, "is_collid": 38, "np": [38, 40], "verifi": 39, "is_intersect": 39, "stdout": 39, "log_fil": 39, "txt": 39, "sink_ptr": 39, "sink": 39, "emplace_back": 39, "stdout_color_sink_mt": 39, "basic_file_sink_mt": 39, "truncat": 39, "unfortun": 39, "yet": 39, "set_level": 39, "significantli": 39, "expect": 39, "determinist": 39, "global_control": 39, "thread_limit": 39, "max_allowed_parallel": 39, "stai": 39, "aliv": 39, "stack": 39, "goe": [39, 42], "program": 39, "default_concurr": 39, "els": 39, "attempt": 39, "persist": 39, "durat": 39, "reset": 39, "active_valu": 39, "max_nthread": 39, "introduc": 40, "context": 40, "rigid2dtrajectori": 40, "_posit": 40, "_translat": 40, "_delta_transl": 40, "_rotat": 40, "_delta_rot": 40, "delta_transl": 40, "rotat": 40, "delta_rot": 40, "matrix2d": 40, "rotation2d": 40, "torotationmatrix": 40, "pi": 40, "def": 40, "theta": 40, "sin": 40, "linalg": 40, "dive": 40, "deeper": 40, "down": 40, "center": 40, "delta": 40, "angl": 40, "interi": 40, "frame": 40, "d_rigid_2d_trajectori": 40, "min_": 40, "underset": 40, "practic": 40, "suffici": 40, "penetr": 40, "david": 41, "bolun": 41, "xin": 41, "zhao": 41, "marco": 41, "atten": 41, "dataset": 41, "arxiv": 41, "2112": 41, "06300": 41, "honglin": 41, "hsueh": 41, "derek": 41, "liu": 41, "levin": 41, "changxi": 41, "zheng": 41, "alec": 41, "jacobson": 41, "stabler": 41, "neo": 41, "hookean": 41, "absolut": [41, 42], "newton": [41, 42], "2024": [41, 42], "confer": 41, "proceed": 41, "columbia": 41, "cg": 41, "pranav": 41, "jain": 41, "elastodynam": 41, "23": 41, "york": 41, "ny": 41, "usa": 41, "machineri": 41, "zferg": 41, "research": 41, "francisca": 41, "gil": 41, "ureta": 41, "transact": 41, "graphic": 41, "io": 41, "2307": 41, "15908": 41, "octob": 41, "principl": 42, "block": 42, "sever": 42, "job": 42, "often": 42, "back": 42, "accordingli": 42, "tet": 42, "mshio": 42, "boundary_facet": 42, "msh": 42, "tetra": 42, "full_vertic": 42, "full_veloc": 42, "fortun": 42, "grad_ful": 42, "hess_ful": 42, "One": 42, "conjunct": 42, "is_on_surfac": 42, "boundary_edg": 42, "len": 42, "transfer": 42, "proxi": 42, "fe_rest_posit": 42, "proxy_rest_posit": 42, "proxy_edg": 42, "proxy_fac": 42, "Or": 42, "fe_mesh": 42, "proxy_mesh": 42, "fe_displac": 42, "similarli": 42, "collision_forc": 42, "potential_hessian": 42, "solut": 42, "pde": 42, "fe_posit": 42, "indefinit": 42, "problemat": 42, "remedi": 42, "semidefinit": 42, "projecttopsd": 42}, "objects": {"": [[6, 0, 1, "_CPPv4N3ipc4AABBE", "ipc::AABB", "Axis aligned bounding-box of some type."], [6, 1, 1, "_CPPv4N3ipc4AABB4AABBERK10ArrayMax3dRK10ArrayMax3d", "ipc::AABB::AABB", ""], [6, 1, 1, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABB", "ipc::AABB::AABB", ""], [6, 1, 1, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABBRK4AABB", "ipc::AABB::AABB", ""], [6, 1, 1, "_CPPv4N3ipc4AABB4AABBEv", "ipc::AABB::AABB", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABB", "ipc::AABB::AABB::aabb1", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABBRK4AABB", "ipc::AABB::AABB::aabb1", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABB", "ipc::AABB::AABB::aabb2", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABBRK4AABB", "ipc::AABB::AABB::aabb2", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABBRK4AABB", "ipc::AABB::AABB::aabb3", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK10ArrayMax3dRK10ArrayMax3d", "ipc::AABB::AABB::max", ""], [6, 2, 2, "_CPPv4N3ipc4AABB4AABBERK10ArrayMax3dRK10ArrayMax3d", "ipc::AABB::AABB::min", ""], [6, 1, 1, "_CPPv4N3ipc4AABB22conservative_inflationER10ArrayMax3dR10ArrayMax3dKd", "ipc::AABB::conservative_inflation", "Compute a conservative inflation of the AABB."], [6, 2, 2, "_CPPv4N3ipc4AABB22conservative_inflationER10ArrayMax3dR10ArrayMax3dKd", "ipc::AABB::conservative_inflation::inflation_radius", "Compute a conservative inflation of the AABB."], [6, 2, 2, "_CPPv4N3ipc4AABB22conservative_inflationER10ArrayMax3dR10ArrayMax3dKd", "ipc::AABB::conservative_inflation::max", "Compute a conservative inflation of the AABB."], [6, 2, 2, "_CPPv4N3ipc4AABB22conservative_inflationER10ArrayMax3dR10ArrayMax3dKd", "ipc::AABB::conservative_inflation::min", "Compute a conservative inflation of the AABB."], [6, 1, 1, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dKd", "ipc::AABB::from_point", "Construct an AABB for a static point."], [6, 1, 1, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dRK11VectorMax3dKd", "ipc::AABB::from_point", "Construct an AABB for a moving point (i.e."], [6, 2, 2, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dKd-p-inflation_radius", "ipc::AABB::from_point::inflation_radius", "Radius of a sphere around the point which the AABB encloses."], [6, 2, 2, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dRK11VectorMax3dKd-p-inflation_radius", "ipc::AABB::from_point::inflation_radius", "Radius of a capsule around the temporal edge which the AABB encloses."], [6, 2, 2, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dKd-p-p", "ipc::AABB::from_point::p", "The point's position."], [6, 2, 2, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dRK11VectorMax3dKd-p-p_t0", "ipc::AABB::from_point::p_t0", "The point's position at time t=0."], [6, 2, 2, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dRK11VectorMax3dKd-p-p_t1", "ipc::AABB::from_point::p_t1", "The point's position at time t=1."], [6, 1, 1, "_CPPv4NK3ipc4AABB10intersectsERK4AABB", "ipc::AABB::intersects", "Check if another AABB intersects with this one."], [6, 2, 2, "_CPPv4NK3ipc4AABB10intersectsERK4AABB-p-other", "ipc::AABB::intersects::other", "The other AABB."], [6, 3, 1, "_CPPv4N3ipc4AABB3maxE", "ipc::AABB::max", "Maximum corner of the AABB."], [6, 3, 1, "_CPPv4N3ipc4AABB3minE", "ipc::AABB::min", "Minimum corner of the AABB."], [6, 3, 1, "_CPPv4N3ipc4AABB10vertex_idsE", "ipc::AABB::vertex_ids", "Vertex IDs attached to the AABB."], [6, 0, 1, "_CPPv4N3ipc3BVHE", "ipc::BVH", "Build the broad phase for static collision detection."], [6, 1, 1, "_CPPv4N3ipc3BVH3BVHEv", "ipc::BVH::BVH", ""], [6, 1, 1, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd", "ipc::BVH::build", "Build the broad phase for continuous collision detection."], [6, 1, 1, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd", "ipc::BVH::build", "Build the broad phase for static collision detection."], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-edges", "ipc::BVH::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-edges", "ipc::BVH::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-faces", "ipc::BVH::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-faces", "ipc::BVH::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-inflation_radius", "ipc::BVH::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-inflation_radius", "ipc::BVH::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices", "ipc::BVH::build::vertices", "Vertex positions"], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices_t0", "ipc::BVH::build::vertices_t0", "Starting vertices of the vertices."], [6, 2, 2, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices_t1", "ipc::BVH::build::vertices_t1", "Ending vertices of the vertices."], [6, 1, 1, "_CPPv4N3ipc3BVH5clearEv", "ipc::BVH::clear", "Clear any built data."], [6, 1, 1, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE", "ipc::BVH::detect_candidates", "Detect candidate collisions between a BVH and a sets of boxes."], [6, 4, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::BVH::detect_candidates::Candidate", "Type of candidate collision."], [6, 2, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes", "ipc::BVH::detect_candidates::boxes", "[in] The boxes to detect collisions with."], [6, 2, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-bvh", "ipc::BVH::detect_candidates::bvh", "[in] The BVH to detect collisions with."], [6, 2, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::BVH::detect_candidates::can_collide", "[in] Function to determine if two primitives can collide given their ids."], [6, 2, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::BVH::detect_candidates::candidates", "[out] The candidate collisions."], [6, 5, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-swap_order", "ipc::BVH::detect_candidates::swap_order", "Whether to swap the order of box id with the BVH id when adding to the candidates."], [6, 5, 2, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-triangular", "ipc::BVH::detect_candidates::triangular", "Whether to consider (i, j) and (j, i) as the same."], [6, 1, 1, "_CPPv4NK3ipc3BVH27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::BVH::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc3BVH27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE-p-candidates", "ipc::BVH::detect_edge_edge_candidates::candidates", "[out] The candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc3BVH27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::BVH::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc3BVH27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE-p-candidates", "ipc::BVH::detect_edge_face_candidates::candidates", "[out] The candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc3BVH29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::BVH::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc3BVH29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE-p-candidates", "ipc::BVH::detect_edge_vertex_candidates::candidates", "[out] The candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc3BVH27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::BVH::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc3BVH27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::BVH::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc3BVH29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::BVH::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc3BVH29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE-p-candidates", "ipc::BVH::detect_face_vertex_candidates::candidates", "[out] The candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc3BVH31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::BVH::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc3BVH31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE-p-candidates", "ipc::BVH::detect_vertex_vertex_candidates::candidates", "[out] The candidate vertex-vertex collisions."], [6, 3, 1, "_CPPv4N3ipc3BVH8edge_bvhE", "ipc::BVH::edge_bvh", "BVH containing the edges."], [6, 3, 1, "_CPPv4N3ipc3BVH8face_bvhE", "ipc::BVH::face_bvh", "BVH containing the faces."], [6, 1, 1, "_CPPv4N3ipc3BVH8init_bvhERKNSt6vectorI4AABBEERN9SimpleBVH3BVHE", "ipc::BVH::init_bvh", "Initialize a BVH from a set of boxes."], [6, 2, 2, "_CPPv4N3ipc3BVH8init_bvhERKNSt6vectorI4AABBEERN9SimpleBVH3BVHE-p-boxes", "ipc::BVH::init_bvh::boxes", "[in] Set of boxes to initialize the BVH with."], [6, 2, 2, "_CPPv4N3ipc3BVH8init_bvhERKNSt6vectorI4AABBEERN9SimpleBVH3BVHE-p-bvh", "ipc::BVH::init_bvh::bvh", "[out] The BVH to initialize."], [6, 3, 1, "_CPPv4N3ipc3BVH10vertex_bvhE", "ipc::BVH::vertex_bvh", "BVH containing the vertices."], [5, 0, 1, "_CPPv4N3ipc7BarrierE", "ipc::Barrier", "Inheritence diagram for ipc::Barrier:"], [5, 1, 1, "_CPPv4N3ipc7Barrier7BarrierEv", "ipc::Barrier::Barrier", ""], [5, 1, 1, "_CPPv4NK3ipc7Barrier16first_derivativeEKdKd", "ipc::Barrier::first_derivative", "Evaluate the first derivative of the barrier function wrt d."], [5, 2, 2, "_CPPv4NK3ipc7Barrier16first_derivativeEKdKd-p-d", "ipc::Barrier::first_derivative::d", "Distance."], [5, 2, 2, "_CPPv4NK3ipc7Barrier16first_derivativeEKdKd-p-dhat", "ipc::Barrier::first_derivative::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc7BarrierclEKdKd", "ipc::Barrier::operator()", "Evaluate the barrier function."], [5, 2, 2, "_CPPv4NK3ipc7BarrierclEKdKd-p-d", "ipc::Barrier::operator()::d", "Distance."], [5, 2, 2, "_CPPv4NK3ipc7BarrierclEKdKd-p-dhat", "ipc::Barrier::operator()::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc7Barrier17second_derivativeEKdKd", "ipc::Barrier::second_derivative", "Evaluate the second derivative of the barrier function wrt d."], [5, 2, 2, "_CPPv4NK3ipc7Barrier17second_derivativeEKdKd-p-d", "ipc::Barrier::second_derivative::d", "Distance."], [5, 2, 2, "_CPPv4NK3ipc7Barrier17second_derivativeEKdKd-p-dhat", "ipc::Barrier::second_derivative::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc7Barrier5unitsEKd", "ipc::Barrier::units", "Get the units of the barrier function."], [5, 2, 2, "_CPPv4NK3ipc7Barrier5unitsEKd-p-dhat", "ipc::Barrier::units::dhat", "The activation distance of the barrier."], [5, 1, 1, "_CPPv4N3ipc7BarrierD0Ev", "ipc::Barrier::~Barrier", ""], [14, 0, 1, "_CPPv4N3ipc16BarrierPotentialE", "ipc::BarrierPotential", "Inheritence diagram for ipc::BarrierPotential:"], [14, 1, 1, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKNSt10shared_ptrI7BarrierEEKdKb", "ipc::BarrierPotential::BarrierPotential", "Construct a barrier potential."], [14, 1, 1, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKdKb", "ipc::BarrierPotential::BarrierPotential", "Construct a barrier potential."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKNSt10shared_ptrI7BarrierEEKdKb-p-barrier", "ipc::BarrierPotential::BarrierPotential::barrier", "The barrier function."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKNSt10shared_ptrI7BarrierEEKdKb-p-dhat", "ipc::BarrierPotential::BarrierPotential::dhat", "The activation distance of the barrier."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKdKb-p-dhat", "ipc::BarrierPotential::BarrierPotential::dhat", "The activation distance of the barrier."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKNSt10shared_ptrI7BarrierEEKdKb", "ipc::BarrierPotential::BarrierPotential::use_physical_barrier", "Construct a barrier potential."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKdKb", "ipc::BarrierPotential::BarrierPotential::use_physical_barrier", "Construct a barrier potential."], [14, 6, 1, "_CPPv4N3ipc16BarrierPotential5SuperE", "ipc::BarrierPotential::Super", ""], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential7barrierEv", "ipc::BarrierPotential::barrier", "Get the barrier function used to compute the potential."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential4dhatEv", "ipc::BarrierPotential::dhat", "Get the activation distance of the barrier."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential15force_magnitudeEKdKdKd", "ipc::BarrierPotential::force_magnitude", "Compute the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential15force_magnitudeEKdKdKd-p-barrier_stiffness", "ipc::BarrierPotential::force_magnitude::barrier_stiffness", "The barrier stiffness."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential15force_magnitudeEKdKdKd-p-distance_squared", "ipc::BarrierPotential::force_magnitude::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential15force_magnitudeEKdKdKd-p-dmin", "ipc::BarrierPotential::force_magnitude::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd", "ipc::BarrierPotential::force_magnitude_gradient", "Compute the gradient of the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-barrier_stiffness", "ipc::BarrierPotential::force_magnitude_gradient::barrier_stiffness", "The stiffness of the barrier."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared", "ipc::BarrierPotential::force_magnitude_gradient::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared_gradient", "ipc::BarrierPotential::force_magnitude_gradient::distance_squared_gradient", "The gradient of the squared distance."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-dmin", "ipc::BarrierPotential::force_magnitude_gradient::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential8gradientEKdKd", "ipc::BarrierPotential::gradient", "Compute the gradient of the barrier potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential8gradientERK15NormalCollisionRK12VectorMax12d", "ipc::BarrierPotential::gradient", "Compute the gradient of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-collision", "ipc::BarrierPotential::gradient::collision", "The collision."], [14, 2, 2, "p-distance_squared", "ipc::BarrierPotential::gradient::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "p-dmin", "ipc::BarrierPotential::gradient::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-positions", "ipc::BarrierPotential::gradient::positions", "The collision stencil's positions."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential7hessianEKdKd", "ipc::BarrierPotential::hessian", "Compute the hessian of the barrier potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::BarrierPotential::hessian", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::BarrierPotential::hessian::collision", "The collision."], [14, 2, 2, "p-distance_squared", "ipc::BarrierPotential::hessian::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "p-dmin", "ipc::BarrierPotential::hessian::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-positions", "ipc::BarrierPotential::hessian::positions", "The collision stencil's positions."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::BarrierPotential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 3, 1, "_CPPv4N3ipc16BarrierPotential9m_barrierE", "ipc::BarrierPotential::m_barrier", "The barrier function used to compute the potential."], [14, 3, 1, "_CPPv4N3ipc16BarrierPotential6m_dhatE", "ipc::BarrierPotential::m_dhat", "The activation distance of the barrier."], [14, 3, 1, "_CPPv4N3ipc16BarrierPotential22m_use_physical_barrierE", "ipc::BarrierPotential::m_use_physical_barrier", "Whether to use the physical barrier."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotentialclEKdKd", "ipc::BarrierPotential::operator()", "Compute the barrier potential for a collision."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotentialclEKdKd-p-distance_squared", "ipc::BarrierPotential::operator()::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc16BarrierPotentialclEKdKd-p-dmin", "ipc::BarrierPotential::operator()::dmin", "The minimum distance (unsquared) between the two objects."], [14, 1, 1, "_CPPv4N3ipc16BarrierPotential11set_barrierEKNSt10shared_ptrI7BarrierEE", "ipc::BarrierPotential::set_barrier", "Set the barrier function used to compute the potential."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential11set_barrierEKNSt10shared_ptrI7BarrierEE-p-barrier", "ipc::BarrierPotential::set_barrier::barrier", "The barrier function used to compute the potential."], [14, 1, 1, "_CPPv4N3ipc16BarrierPotential8set_dhatEKd", "ipc::BarrierPotential::set_dhat", "Set the activation distance of the barrier."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential8set_dhatEKd-p-dhat", "ipc::BarrierPotential::set_dhat::dhat", "The activation distance of the barrier."], [14, 1, 1, "_CPPv4N3ipc16BarrierPotential24set_use_physical_barrierEb", "ipc::BarrierPotential::set_use_physical_barrier", "Set use physical barrier flag."], [14, 2, 2, "_CPPv4N3ipc16BarrierPotential24set_use_physical_barrierEb-p-use_physical_barrier", "ipc::BarrierPotential::set_use_physical_barrier::use_physical_barrier", "Whether to use the physical barrier."], [14, 1, 1, "_CPPv4NK3ipc16BarrierPotential20use_physical_barrierEv", "ipc::BarrierPotential::use_physical_barrier", "Get whether to use the physical barrier."], [6, 0, 1, "_CPPv4N3ipc10BroadPhaseE", "ipc::BroadPhase", "Subclassed by ipc::BVH, ipc::BruteForce, ipc::HashGrid, ipc::SpatialHash, ipc::SweepAndPrune"], [6, 1, 1, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd", "ipc::BroadPhase::build", "Build the broad phase for continuous collision detection."], [6, 1, 1, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd", "ipc::BroadPhase::build", "Build the broad phase for static collision detection."], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-edges", "ipc::BroadPhase::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-edges", "ipc::BroadPhase::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-faces", "ipc::BroadPhase::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-faces", "ipc::BroadPhase::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-inflation_radius", "ipc::BroadPhase::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-inflation_radius", "ipc::BroadPhase::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices", "ipc::BroadPhase::build::vertices", "Vertex positions"], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices_t0", "ipc::BroadPhase::build::vertices_t0", "Starting vertices of the vertices."], [6, 2, 2, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd-p-vertices_t1", "ipc::BroadPhase::build::vertices_t1", "Ending vertices of the vertices."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase21can_edge_face_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_face_collide", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase21can_edge_face_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_face_collide::ei", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase21can_edge_face_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_face_collide::fi", ""], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase23can_edge_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_vertex_collide", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase23can_edge_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_vertex_collide::ei", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase23can_edge_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_edge_vertex_collide::vi", ""], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase17can_edges_collideE6size_t6size_t", "ipc::BroadPhase::can_edges_collide", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase17can_edges_collideE6size_t6size_t", "ipc::BroadPhase::can_edges_collide::eai", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase17can_edges_collideE6size_t6size_t", "ipc::BroadPhase::can_edges_collide::ebi", ""], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase23can_face_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_face_vertex_collide", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase23can_face_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_face_vertex_collide::fi", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase23can_face_vertex_collideE6size_t6size_t", "ipc::BroadPhase::can_face_vertex_collide::vi", ""], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase17can_faces_collideE6size_t6size_t", "ipc::BroadPhase::can_faces_collide", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase17can_faces_collideE6size_t6size_t", "ipc::BroadPhase::can_faces_collide::fai", ""], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase17can_faces_collideE6size_t6size_t", "ipc::BroadPhase::can_faces_collide::fbi", ""], [6, 3, 1, "_CPPv4N3ipc10BroadPhase20can_vertices_collideE", "ipc::BroadPhase::can_vertices_collide", "Function for determining if two vertices can collide."], [6, 1, 1, "_CPPv4N3ipc10BroadPhase5clearEv", "ipc::BroadPhase::clear", "Clear any built data."], [6, 1, 1, "_CPPv4N3ipc10BroadPhase28default_can_vertices_collideE6size_t6size_t", "ipc::BroadPhase::default_can_vertices_collide", ""], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase27detect_collision_candidatesEiR10Candidates", "ipc::BroadPhase::detect_collision_candidates", "Detect all collision candidates needed for a given dimensional simulation."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase27detect_collision_candidatesEiR10Candidates-p-candidates", "ipc::BroadPhase::detect_collision_candidates::candidates", "The detected collision candidates."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase27detect_collision_candidatesEiR10Candidates-p-dim", "ipc::BroadPhase::detect_collision_candidates::dim", "The dimension of the simulation (i.e., 2 or 3)."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::BroadPhase::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE-p-candidates", "ipc::BroadPhase::detect_edge_edge_candidates::candidates", "[out] The candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::BroadPhase::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE-p-candidates", "ipc::BroadPhase::detect_edge_face_candidates::candidates", "[out] The candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::BroadPhase::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE-p-candidates", "ipc::BroadPhase::detect_edge_vertex_candidates::candidates", "[out] The candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::BroadPhase::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::BroadPhase::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::BroadPhase::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE-p-candidates", "ipc::BroadPhase::detect_face_vertex_candidates::candidates", "[out] The candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc10BroadPhase31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::BroadPhase::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BroadPhase31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE-p-candidates", "ipc::BroadPhase::detect_vertex_vertex_candidates::candidates", "[out] The candidate vertex-vertex collisions."], [6, 3, 1, "_CPPv4N3ipc10BroadPhase10edge_boxesE", "ipc::BroadPhase::edge_boxes", ""], [6, 3, 1, "_CPPv4N3ipc10BroadPhase10face_boxesE", "ipc::BroadPhase::face_boxes", ""], [6, 1, 1, "_CPPv4N3ipc10BroadPhase16make_broad_phaseEK16BroadPhaseMethod", "ipc::BroadPhase::make_broad_phase", "Construct a registered broad phase object."], [6, 2, 2, "_CPPv4N3ipc10BroadPhase16make_broad_phaseEK16BroadPhaseMethod-p-method", "ipc::BroadPhase::make_broad_phase::method", "The broad phase method to use."], [6, 3, 1, "_CPPv4N3ipc10BroadPhase12vertex_boxesE", "ipc::BroadPhase::vertex_boxes", ""], [6, 1, 1, "_CPPv4N3ipc10BroadPhaseD0Ev", "ipc::BroadPhase::~BroadPhase", ""], [6, 7, 1, "_CPPv4N3ipc16BroadPhaseMethodE", "ipc::BroadPhaseMethod", "Enumeration of implemented broad phase methods."], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod11BRUTE_FORCEE", "ipc::BroadPhaseMethod::BRUTE_FORCE", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod3BVHE", "ipc::BroadPhaseMethod::BVH", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod9HASH_GRIDE", "ipc::BroadPhaseMethod::HASH_GRID", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod11NUM_METHODSE", "ipc::BroadPhaseMethod::NUM_METHODS", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod12SPATIAL_HASHE", "ipc::BroadPhaseMethod::SPATIAL_HASH", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod15SWEEP_AND_PRUNEE", "ipc::BroadPhaseMethod::SWEEP_AND_PRUNE", ""], [6, 8, 1, "_CPPv4N3ipc16BroadPhaseMethod23SWEEP_AND_TINIEST_QUEUEE", "ipc::BroadPhaseMethod::SWEEP_AND_TINIEST_QUEUE", ""], [6, 0, 1, "_CPPv4N3ipc10BruteForceE", "ipc::BruteForce", "Find the candidate vertex-vertex collisions."], [6, 1, 1, "_CPPv4N3ipc10BruteForce10BruteForceEv", "ipc::BruteForce::BruteForce", ""], [6, 1, 1, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE", "ipc::BruteForce::detect_candidates", "Detect candidates for collisions between two sets of boxes."], [6, 4, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::BruteForce::detect_candidates::Candidate", "Type of the candidate."], [6, 2, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes0", "ipc::BruteForce::detect_candidates::boxes0", "[in] First set of boxes."], [6, 2, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes1", "ipc::BruteForce::detect_candidates::boxes1", "[in] Second set of boxes."], [6, 2, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::BruteForce::detect_candidates::can_collide", "[in] Function to determine if two primitives can collide given their ids."], [6, 2, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::BruteForce::detect_candidates::candidates", "[out] The candidate collisions."], [6, 5, 2, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-triangular", "ipc::BruteForce::detect_candidates::triangular", "Whether to consider (i, j) and (j, i) as the same."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::BruteForce::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE-p-candidates", "ipc::BruteForce::detect_edge_edge_candidates::candidates", "[out] The candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::BruteForce::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE-p-candidates", "ipc::BruteForce::detect_edge_face_candidates::candidates", "[out] The candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::BruteForce::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE-p-candidates", "ipc::BruteForce::detect_edge_vertex_candidates::candidates", "[out] The candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::BruteForce::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::BruteForce::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::BruteForce::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE-p-candidates", "ipc::BruteForce::detect_face_vertex_candidates::candidates", "[out] The candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc10BruteForce31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::BruteForce::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc10BruteForce31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE-p-candidates", "ipc::BruteForce::detect_vertex_vertex_candidates::candidates", "[out] The candidate vertex-vertex collisions."], [7, 0, 1, "_CPPv4N3ipc10CandidatesE", "ipc::Candidates", "Initialize the set of discrete collision detection candidates."], [7, 1, 1, "_CPPv4N3ipc10Candidates10CandidatesEv", "ipc::Candidates::Candidates", ""], [7, 1, 1, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod", "ipc::Candidates::build", "Initialize the set of discrete collision detection candidates."], [7, 1, 1, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod", "ipc::Candidates::build", "Initialize the set of continuous collision detection candidates."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-broad_phase_method", "ipc::Candidates::build::broad_phase_method", "Broad phase method to use."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-broad_phase_method", "ipc::Candidates::build::broad_phase_method", "Broad phase method to use."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-inflation_radius", "ipc::Candidates::build::inflation_radius", "Amount to inflate the bounding boxes."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-inflation_radius", "ipc::Candidates::build::inflation_radius", "Amount to inflate the bounding boxes."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-mesh", "ipc::Candidates::build::mesh", "The surface of the collision mesh."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-mesh", "ipc::Candidates::build::mesh", "The surface of the collision mesh."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-vertices", "ipc::Candidates::build::vertices", "Surface vertex positions (rowwise)."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-vertices_t0", "ipc::Candidates::build::vertices_t0", "Surface vertex starting positions (rowwise)."], [7, 2, 2, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod-p-vertices_t1", "ipc::Candidates::build::vertices_t1", "Surface vertex ending positions (rowwise)."], [7, 1, 1, "_CPPv4N3ipc10Candidates5clearEv", "ipc::Candidates::clear", ""], [7, 1, 1, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD", "ipc::Candidates::compute_cfl_stepsize", "Computes a CFL-inspired CCD maximum step step size."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD", "ipc::Candidates::compute_cfl_stepsize::broad_phase_method", "Computes a CFL-inspired CCD maximum step step size."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-dhat", "ipc::Candidates::compute_cfl_stepsize::dhat", "Barrier activation distance."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-mesh", "ipc::Candidates::compute_cfl_stepsize::mesh", "The collision mesh."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-min_distance", "ipc::Candidates::compute_cfl_stepsize::min_distance", "The minimum distance allowable between any two elements."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::Candidates::compute_cfl_stepsize::narrow_phase_ccd", "The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::Candidates::compute_cfl_stepsize::vertices_t0", "Surface vertex starting positions (rowwise)."], [7, 2, 2, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::Candidates::compute_cfl_stepsize::vertices_t1", "Surface vertex ending positions (rowwise)."], [7, 1, 1, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD", "ipc::Candidates::compute_collision_free_stepsize", "Computes a maximal step size that is collision free using the set of collision candidates."], [7, 2, 2, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-mesh", "ipc::Candidates::compute_collision_free_stepsize::mesh", "The collision mesh."], [7, 2, 2, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-min_distance", "ipc::Candidates::compute_collision_free_stepsize::min_distance", "The minimum distance allowable between any two elements."], [7, 2, 2, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::Candidates::compute_collision_free_stepsize::narrow_phase_ccd", "The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::Candidates::compute_collision_free_stepsize::vertices_t0", "Surface vertex starting positions (rowwise)."], [7, 2, 2, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::Candidates::compute_collision_free_stepsize::vertices_t1", "Surface vertex ending positions (rowwise)."], [7, 1, 1, "_CPPv4NK3ipc10Candidates42compute_noncandidate_conservative_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdEKd", "ipc::Candidates::compute_noncandidate_conservative_stepsize", "Computes a conservative bound on the largest-feasible step size for surface primitives not in collision."], [7, 2, 2, "_CPPv4NK3ipc10Candidates42compute_noncandidate_conservative_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdEKd-p-dhat", "ipc::Candidates::compute_noncandidate_conservative_stepsize::dhat", "Barrier activation distance."], [7, 2, 2, "_CPPv4NK3ipc10Candidates42compute_noncandidate_conservative_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdEKd-p-displacements", "ipc::Candidates::compute_noncandidate_conservative_stepsize::displacements", "Surface vertex displacements (rowwise)."], [7, 2, 2, "_CPPv4NK3ipc10Candidates42compute_noncandidate_conservative_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdEKd-p-mesh", "ipc::Candidates::compute_noncandidate_conservative_stepsize::mesh", "The collision mesh."], [7, 3, 1, "_CPPv4N3ipc10Candidates13ee_candidatesE", "ipc::Candidates::ee_candidates", ""], [7, 1, 1, "_CPPv4NK3ipc10Candidates5emptyEv", "ipc::Candidates::empty", ""], [7, 3, 1, "_CPPv4N3ipc10Candidates13ev_candidatesE", "ipc::Candidates::ev_candidates", ""], [7, 3, 1, "_CPPv4N3ipc10Candidates13fv_candidatesE", "ipc::Candidates::fv_candidates", ""], [7, 1, 1, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD", "ipc::Candidates::is_step_collision_free", "Determine if the step is collision free from the set of candidates."], [7, 2, 2, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-mesh", "ipc::Candidates::is_step_collision_free::mesh", "The collision mesh."], [7, 2, 2, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-min_distance", "ipc::Candidates::is_step_collision_free::min_distance", "The minimum distance allowable between any two elements."], [7, 2, 2, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::Candidates::is_step_collision_free::narrow_phase_ccd", "The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::Candidates::is_step_collision_free::vertices_t0", "Surface vertex starting positions (rowwise)."], [7, 2, 2, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::Candidates::is_step_collision_free::vertices_t1", "Surface vertex ending positions (rowwise)."], [7, 1, 1, "_CPPv4N3ipc10CandidatesixE6size_t", "ipc::Candidates::operator[]", ""], [7, 1, 1, "_CPPv4NK3ipc10CandidatesixE6size_t", "ipc::Candidates::operator[]", ""], [7, 2, 2, "_CPPv4N3ipc10CandidatesixE6size_t", "ipc::Candidates::operator[]::i", ""], [7, 2, 2, "_CPPv4NK3ipc10CandidatesixE6size_t", "ipc::Candidates::operator[]::i", ""], [7, 1, 1, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::Candidates::save_obj", ""], [7, 2, 2, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::Candidates::save_obj::edges", ""], [7, 2, 2, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::Candidates::save_obj::faces", ""], [7, 2, 2, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::Candidates::save_obj::filename", ""], [7, 2, 2, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::Candidates::save_obj::vertices", ""], [7, 1, 1, "_CPPv4NK3ipc10Candidates4sizeEv", "ipc::Candidates::size", ""], [7, 3, 1, "_CPPv4N3ipc10Candidates13vv_candidatesE", "ipc::Candidates::vv_candidates", ""], [5, 0, 1, "_CPPv4N3ipc17ClampedLogBarrierE", "ipc::ClampedLogBarrier", "Inheritence diagram for ipc::ClampedLogBarrier:"], [5, 1, 1, "_CPPv4N3ipc17ClampedLogBarrier17ClampedLogBarrierEv", "ipc::ClampedLogBarrier::ClampedLogBarrier", ""], [5, 1, 1, "_CPPv4NK3ipc17ClampedLogBarrier16first_derivativeEKdKd", "ipc::ClampedLogBarrier::first_derivative", "Derivative of the barrier function."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrier16first_derivativeEKdKd-p-d", "ipc::ClampedLogBarrier::first_derivative::d", "The distance."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrier16first_derivativeEKdKd-p-dhat", "ipc::ClampedLogBarrier::first_derivative::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc17ClampedLogBarrierclEKdKd", "ipc::ClampedLogBarrier::operator()", "Function that grows to infinity as d approaches 0 from the right."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrierclEKdKd-p-d", "ipc::ClampedLogBarrier::operator()::d", "The distance."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrierclEKdKd-p-dhat", "ipc::ClampedLogBarrier::operator()::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc17ClampedLogBarrier17second_derivativeEKdKd", "ipc::ClampedLogBarrier::second_derivative", "Second derivative of the barrier function."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrier17second_derivativeEKdKd-p-d", "ipc::ClampedLogBarrier::second_derivative::d", "The distance."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrier17second_derivativeEKdKd-p-dhat", "ipc::ClampedLogBarrier::second_derivative::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4NK3ipc17ClampedLogBarrier5unitsEKd", "ipc::ClampedLogBarrier::units", "Get the units of the barrier function."], [5, 2, 2, "_CPPv4NK3ipc17ClampedLogBarrier5unitsEKd-p-dhat", "ipc::ClampedLogBarrier::units::dhat", "The activation distance of the barrier."], [9, 0, 1, "_CPPv4N3ipc13CollisionMeshE", "ipc::CollisionMesh", "A class for encapsolating the transformation/selections needed to go from a volumetric FE mesh to a surface collision mesh."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE", "ipc::CollisionMesh::CollisionMesh", "Construct a new Collision Mesh object directly from the collision mesh vertices."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE", "ipc::CollisionMesh::CollisionMesh", "Construct a new Collision Mesh object from a full mesh vertices."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh13CollisionMeshEv", "ipc::CollisionMesh::CollisionMesh", "Construct a new Collision Mesh object."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-displacement_map", "ipc::CollisionMesh::CollisionMesh::displacement_map", "The displacement mapping from displacements on the full mesh to the collision mesh."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-displacement_map", "ipc::CollisionMesh::CollisionMesh::displacement_map", "The displacement mapping from displacements on the full mesh to the collision mesh."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-edges", "ipc::CollisionMesh::CollisionMesh::edges", "The edges of the collision mesh (#E \u00d7 2)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-edges", "ipc::CollisionMesh::CollisionMesh::edges", "The edges of the collision mesh indexed into the full mesh vertices (#E \u00d7 2)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-faces", "ipc::CollisionMesh::CollisionMesh::faces", "The faces of the collision mesh (#F \u00d7 3)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-faces", "ipc::CollisionMesh::CollisionMesh::faces", "The faces of the collision mesh indexed into the full mesh vertices (#F \u00d7 3)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-full_rest_positions", "ipc::CollisionMesh::CollisionMesh::full_rest_positions", "The vertices of the full mesh at rest (#V \u00d7 dim)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-include_vertex", "ipc::CollisionMesh::CollisionMesh::include_vertex", "Vector of bools indicating whether each vertex should be included in the collision mesh."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE-p-rest_positions", "ipc::CollisionMesh::CollisionMesh::rest_positions", "The vertices of the collision mesh at rest (#V \u00d7 dim)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh27are_adjacencies_initializedEv", "ipc::CollisionMesh::are_adjacencies_initialized", "Determine if the adjacencies have been initialized by calling init_adjacencies()."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh30are_area_jacobians_initializedEv", "ipc::CollisionMesh::are_area_jacobians_initialized", "Determine if the area Jacobians have been initialized by calling init_area_jacobians()."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh20build_from_full_meshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::CollisionMesh::build_from_full_mesh", "Helper function that automatically builds include_vertex using construct_is_on_surface."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh20build_from_full_meshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::CollisionMesh::build_from_full_mesh::edges", "The edge matrix of mesh (#E \u00d7 2)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh20build_from_full_meshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::CollisionMesh::build_from_full_mesh::faces", "The face matrix of mesh (#F \u00d7 3)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh20build_from_full_meshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-full_rest_positions", "ipc::CollisionMesh::build_from_full_mesh::full_rest_positions", "The full vertices at rest (#FV \u00d7 dim)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh11can_collideE", "ipc::CollisionMesh::can_collide", "A function that takes two vertex IDs and returns true if the vertices (and faces or edges containing the vertices) can collide."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh11codim_edgesEv", "ipc::CollisionMesh::codim_edges", "Get the indices of codimensional edges of the collision mesh (#CE x 1)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh14codim_verticesEv", "ipc::CollisionMesh::codim_vertices", "Get the indices of codimensional vertices of the collision mesh (#CV x 1)."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh24construct_faces_to_edgesERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::CollisionMesh::construct_faces_to_edges", "Construct a matrix that maps from the faces' edges to rows in the edges matrix."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh24construct_faces_to_edgesERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::CollisionMesh::construct_faces_to_edges::edges", "The edge matrix of mesh (#E \u00d7 2)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh24construct_faces_to_edgesERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::CollisionMesh::construct_faces_to_edges::faces", "The face matrix of mesh (#F \u00d7 3)."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh23construct_is_on_surfaceEKlRKN5Eigen8MatrixXiERKN5Eigen8VectorXiE", "ipc::CollisionMesh::construct_is_on_surface", "Construct a vector of bools indicating whether each vertex is on the surface."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh23construct_is_on_surfaceEKlRKN5Eigen8MatrixXiERKN5Eigen8VectorXiE-p-codim_vertices", "ipc::CollisionMesh::construct_is_on_surface::codim_vertices", "The indices of codimensional vertices (#CV x 1)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh23construct_is_on_surfaceEKlRKN5Eigen8MatrixXiERKN5Eigen8VectorXiE-p-edges", "ipc::CollisionMesh::construct_is_on_surface::edges", "The surface edges of the mesh (#E \u00d7 2)."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh23construct_is_on_surfaceEKlRKN5Eigen8MatrixXiERKN5Eigen8VectorXiE-p-num_vertices", "ipc::CollisionMesh::construct_is_on_surface::num_vertices", "The number of vertices in the mesh."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh19default_can_collideE6size_t6size_t", "ipc::CollisionMesh::default_can_collide", "By default all primitives can collide with all other primitives."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh3dimEv", "ipc::CollisionMesh::dim", "Get the dimension of the mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh17displace_verticesERKN5Eigen8MatrixXdE", "ipc::CollisionMesh::displace_vertices", "Compute the vertex positions from vertex displacements on the full mesh."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh17displace_verticesERKN5Eigen8MatrixXdE-p-full_displacements", "ipc::CollisionMesh::displace_vertices::full_displacements", "The vertex displacements on the full mesh (#FV \u00d7 dim)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh9edge_areaEK6size_t", "ipc::CollisionMesh::edge_area", "Get the barycentric area of an edge."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh9edge_areaEK6size_t-p-ei", "ipc::CollisionMesh::edge_area::ei", "Edge ID."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh18edge_area_gradientEK6size_t", "ipc::CollisionMesh::edge_area_gradient", "Get the gradient of the barycentric area of an edge wrt the rest positions of all points."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh18edge_area_gradientEK6size_t-p-ei", "ipc::CollisionMesh::edge_area_gradient::ei", "Edge ID."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh10edge_areasEv", "ipc::CollisionMesh::edge_areas", "Get the barycentric area of the edges."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh23edge_vertex_adjacenciesEv", "ipc::CollisionMesh::edge_vertex_adjacencies", "Get the edge-vertex adjacency matrix."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh5edgesEv", "ipc::CollisionMesh::edges", "Get the edges of the collision mesh (#E \u00d7 2)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh5facesEv", "ipc::CollisionMesh::faces", "Get the faces of the collision mesh (#F \u00d7 3)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh14faces_to_edgesEv", "ipc::CollisionMesh::faces_to_edges", "Get the mapping from faces to edges of the collision mesh (#F \u00d7 3)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh9full_ndofEv", "ipc::CollisionMesh::full_ndof", "Get the number of degrees of freedom in the full mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh17full_num_verticesEv", "ipc::CollisionMesh::full_num_vertices", "Get the number of vertices in the full mesh."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh16init_adjacenciesEv", "ipc::CollisionMesh::init_adjacencies", "Initialize vertex-vertex and edge-vertex adjacencies."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh19init_area_jacobiansEv", "ipc::CollisionMesh::init_area_jacobians", "Initialize vertex and edge areas."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh10init_areasEv", "ipc::CollisionMesh::init_areas", "Initialize vertex and edge areas."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh16init_codim_edgesEv", "ipc::CollisionMesh::init_codim_edges", ""], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh19init_codim_verticesEv", "ipc::CollisionMesh::init_codim_vertices", ""], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh23init_selection_matricesEKi", "ipc::CollisionMesh::init_selection_matrices", "Initialize the selection matrix from full vertices/DOF to collision vertices/DOF."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh23init_selection_matricesEKi", "ipc::CollisionMesh::init_selection_matrices::dim", "Initialize the selection matrix from full vertices/DOF to collision vertices/DOF."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh21is_vertex_on_boundaryEKi", "ipc::CollisionMesh::is_vertex_on_boundary", "Is a vertex on the boundary of the collision mesh?"], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh21is_vertex_on_boundaryEKi-p-vi", "ipc::CollisionMesh::is_vertex_on_boundary::vi", "Vertex ID."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh13m_codim_edgesE", "ipc::CollisionMesh::m_codim_edges", "The indices of codimensional edges (#CE x 1)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh16m_codim_verticesE", "ipc::CollisionMesh::m_codim_vertices", "The indices of codimensional vertices (#CV x 1)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh22m_displacement_dof_mapE", "ipc::CollisionMesh::m_displacement_dof_map", "Mapping from full displacements DOF to collision displacements DOF."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh18m_displacement_mapE", "ipc::CollisionMesh::m_displacement_map", "Mapping from full displacements to collision displacements."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh20m_edge_area_jacobianE", "ipc::CollisionMesh::m_edge_area_jacobian", "The rows of the Jacobian of the edge areas vector."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh12m_edge_areasE", "ipc::CollisionMesh::m_edge_areas", "Edge areas 3D: 1/3 sum of area of connected triangles."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh25m_edge_vertex_adjacenciesE", "ipc::CollisionMesh::m_edge_vertex_adjacencies", "Vertices adjacent to edges."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh7m_edgesE", "ipc::CollisionMesh::m_edges", "Edges as rows of indicies into vertices (#E \u00d7 2)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh7m_facesE", "ipc::CollisionMesh::m_faces", "Triangular faces as rows of indicies into vertices (#F \u00d7 3)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh16m_faces_to_edgesE", "ipc::CollisionMesh::m_faces_to_edges", "Map from faces edges to rows of edges (#F \u00d7 3)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh21m_full_rest_positionsE", "ipc::CollisionMesh::m_full_rest_positions", "The full vertex positions at rest (#FV \u00d7 dim)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh23m_full_vertex_to_vertexE", "ipc::CollisionMesh::m_full_vertex_to_vertex", "Map from full vertices to collision vertices."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh23m_is_vertex_on_boundaryE", "ipc::CollisionMesh::m_is_vertex_on_boundary", "Is vertex on the boundary of the triangle mesh in 3D or polyline in 2D?"], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh16m_rest_positionsE", "ipc::CollisionMesh::m_rest_positions", "The vertex positions at rest (#V \u00d7 dim)."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh12m_select_dofE", "ipc::CollisionMesh::m_select_dof", "Selection matrix S \u2208 \u211d^{(dim*collision)\u00d7(dim*full)} for DOF."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh17m_select_verticesE", "ipc::CollisionMesh::m_select_vertices", "Selection matrix S \u2208 \u211d^{collision\u00d7full} for vertices."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh22m_vertex_area_jacobianE", "ipc::CollisionMesh::m_vertex_area_jacobian", "The rows of the Jacobian of the vertex areas vector."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh14m_vertex_areasE", "ipc::CollisionMesh::m_vertex_areas", "Vertex areas 2D: 1/2 sum of length of connected edges 3D: 1/3 sum of area of connected triangles."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh25m_vertex_edge_adjacenciesE", "ipc::CollisionMesh::m_vertex_edge_adjacencies", "Edges adjacent to vertices."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh23m_vertex_to_full_vertexE", "ipc::CollisionMesh::m_vertex_to_full_vertex", "Map from collision vertices to full vertices."], [9, 3, 1, "_CPPv4N3ipc13CollisionMesh27m_vertex_vertex_adjacenciesE", "ipc::CollisionMesh::m_vertex_vertex_adjacencies", "Vertices adjacent to vertices."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh17map_displacementsERKN5Eigen8MatrixXdE", "ipc::CollisionMesh::map_displacements", "Map vertex displacements on the full mesh to vertex displacements on the collision mesh."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh17map_displacementsERKN5Eigen8MatrixXdE-p-full_displacements", "ipc::CollisionMesh::map_displacements::full_displacements", "The vertex displacements on the full mesh (#FV \u00d7 dim)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh4ndofEv", "ipc::CollisionMesh::ndof", "Get the number of degrees of freedom in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh15num_codim_edgesEv", "ipc::CollisionMesh::num_codim_edges", "Get the number of codimensional edges in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh18num_codim_verticesEv", "ipc::CollisionMesh::num_codim_vertices", "Get the number of codimensional vertices in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh9num_edgesEv", "ipc::CollisionMesh::num_edges", "Get the number of edges in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh9num_facesEv", "ipc::CollisionMesh::num_faces", "Get the number of faces in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh12num_verticesEv", "ipc::CollisionMesh::num_vertices", "Get the number of vertices in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh14rest_positionsEv", "ipc::CollisionMesh::rest_positions", "Get the vertices of the collision mesh at rest (#V \u00d7 dim)."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen12SparseMatrixIdEE", "ipc::CollisionMesh::to_full_dof", "Map a matrix quantity on the collision mesh to the full mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen8VectorXdE", "ipc::CollisionMesh::to_full_dof", "Map a vector quantity on the collision mesh to the full mesh."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen12SparseMatrixIdEE-p-X", "ipc::CollisionMesh::to_full_dof::X", "Matrix quantity on the collision mesh with size equal to ndof() \u00d7 ndof()."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen8VectorXdE-p-x", "ipc::CollisionMesh::to_full_dof::x", "Vector quantity on the collision mesh with size equal to ndof()."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh17to_full_vertex_idEK6size_t", "ipc::CollisionMesh::to_full_vertex_id", "Map a vertex ID to the corresponding vertex ID in the full mesh."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh17to_full_vertex_idEK6size_t-p-id", "ipc::CollisionMesh::to_full_vertex_id::id", "Vertex ID in the collision mesh."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh11vertex_areaEK6size_t", "ipc::CollisionMesh::vertex_area", "Get the barycentric area of a vertex."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh11vertex_areaEK6size_t-p-vi", "ipc::CollisionMesh::vertex_area::vi", "Vertex ID."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh20vertex_area_gradientEK6size_t", "ipc::CollisionMesh::vertex_area_gradient", "Get the gradient of the barycentric area of a vertex wrt the rest positions of all points."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh20vertex_area_gradientEK6size_t-p-vi", "ipc::CollisionMesh::vertex_area_gradient::vi", "Vertex ID."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh12vertex_areasEv", "ipc::CollisionMesh::vertex_areas", "Get the barycentric area of the vertices."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh23vertex_edge_adjacenciesEv", "ipc::CollisionMesh::vertex_edge_adjacencies", "Get the vertex-edge adjacency matrix."], [9, 1, 1, "_CPPv4N3ipc13CollisionMesh27vertex_matrix_to_dof_matrixERKN5Eigen12SparseMatrixIdEEi", "ipc::CollisionMesh::vertex_matrix_to_dof_matrix", "Convert a matrix meant for M_V * vertices to M_dof * x by duplicating the entries dim times."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh27vertex_matrix_to_dof_matrixERKN5Eigen12SparseMatrixIdEEi", "ipc::CollisionMesh::vertex_matrix_to_dof_matrix::M_V", "Convert a matrix meant for M_V * vertices to M_dof * x by duplicating the entries dim times."], [9, 2, 2, "_CPPv4N3ipc13CollisionMesh27vertex_matrix_to_dof_matrixERKN5Eigen12SparseMatrixIdEEi", "ipc::CollisionMesh::vertex_matrix_to_dof_matrix::dim", "Convert a matrix meant for M_V * vertices to M_dof * x by duplicating the entries dim times."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh25vertex_vertex_adjacenciesEv", "ipc::CollisionMesh::vertex_vertex_adjacencies", "Get the vertex-vertex adjacency matrix."], [9, 1, 1, "_CPPv4NK3ipc13CollisionMesh8verticesERKN5Eigen8MatrixXdE", "ipc::CollisionMesh::vertices", "Compute the vertex positions from the positions of the full mesh."], [9, 2, 2, "_CPPv4NK3ipc13CollisionMesh8verticesERKN5Eigen8MatrixXdE-p-full_positions", "ipc::CollisionMesh::vertices::full_positions", "The vertex positions of the full mesh (#FV \u00d7 dim)."], [9, 1, 1, "_CPPv4N3ipc13CollisionMeshD0Ev", "ipc::CollisionMesh::~CollisionMesh", "Destroy the Collision Mesh object."], [7, 0, 1, "_CPPv4N3ipc16CollisionStencilE", "ipc::CollisionStencil", "A stencil representing a collision between at most four vertices."], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil16compute_distanceERK12VectorMax12d", "ipc::CollisionStencil::compute_distance", "Compute the distance of the stencil."], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil16compute_distanceERK12VectorMax12d-p-positions", "ipc::CollisionStencil::compute_distance::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil25compute_distance_gradientERK12VectorMax12d", "ipc::CollisionStencil::compute_distance_gradient", "Compute the distance gradient of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil25compute_distance_gradientERK12VectorMax12d-p-positions", "ipc::CollisionStencil::compute_distance_gradient::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil24compute_distance_hessianERK12VectorMax12d", "ipc::CollisionStencil::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil24compute_distance_hessianERK12VectorMax12d-p-positions", "ipc::CollisionStencil::compute_distance_hessian::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil3dimEKi", "ipc::CollisionStencil::dim", "Get the dimension of the collision stencil."], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil3dimEKi-p-ndof", "ipc::CollisionStencil::dim::ndof", "Number of degrees of freedom in the stencil."], [7, 1, 1, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::CollisionStencil::dof", "Select this stencil's DOF from the full matrix of DOF."], [7, 4, 2, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-T", "ipc::CollisionStencil::dof::T", "Type of the DOF"], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-X", "ipc::CollisionStencil::dof::X", "Full matrix of DOF (rowwise)."], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::CollisionStencil::dof::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::CollisionStencil::dof::faces", "Collision mesh faces"], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil12num_verticesEv", "ipc::CollisionStencil::num_vertices", "Get the number of vertices in the collision stencil."], [7, 1, 1, "_CPPv4NK3ipc16CollisionStencil10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::CollisionStencil::vertex_ids", "Get the vertex IDs of the collision stencil."], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::CollisionStencil::vertex_ids::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4NK3ipc16CollisionStencil10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::CollisionStencil::vertex_ids::faces", "Collision mesh faces"], [7, 1, 1, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::CollisionStencil::vertices", "Get the vertex attributes of the collision stencil."], [7, 4, 2, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-T", "ipc::CollisionStencil::vertices::T", "Type of the attributes"], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::CollisionStencil::vertices::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::CollisionStencil::vertices::faces", "Collision mesh faces"], [7, 2, 2, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-vertices", "ipc::CollisionStencil::vertices::vertices", "Vertex attributes"], [7, 1, 1, "_CPPv4N3ipc16CollisionStencilD0Ev", "ipc::CollisionStencil::~CollisionStencil", ""], [7, 0, 1, "_CPPv4N3ipc28ContinuousCollisionCandidateE", "ipc::ContinuousCollisionCandidate", "Virtual class for candidates that support CCD."], [7, 1, 1, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD", "ipc::ContinuousCollisionCandidate::ccd", "Perform narrow-phase CCD on the candidate."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-min_distance", "ipc::ContinuousCollisionCandidate::ccd::min_distance", "[in] Minimum separation distance between primitives."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::ContinuousCollisionCandidate::ccd::narrow_phase_ccd", "[in] The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-tmax", "ipc::ContinuousCollisionCandidate::ccd::tmax", "[in] Maximum time (normalized) to look for collisions."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-toi", "ipc::ContinuousCollisionCandidate::ccd::toi", "[out] Computed time of impact (normalized)."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::ContinuousCollisionCandidate::ccd::vertices_t0", "[in] Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::ContinuousCollisionCandidate::ccd::vertices_t1", "[in] Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4NK3ipc28ContinuousCollisionCandidate15write_ccd_queryERNSt7ostreamERK12VectorMax12dRK12VectorMax12d", "ipc::ContinuousCollisionCandidate::write_ccd_query", "Write the CCD query to a stream."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate15write_ccd_queryERNSt7ostreamERK12VectorMax12dRK12VectorMax12d-p-out", "ipc::ContinuousCollisionCandidate::write_ccd_query::out", "Stream to write to."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate15write_ccd_queryERNSt7ostreamERK12VectorMax12dRK12VectorMax12d-p-vertices_t0", "ipc::ContinuousCollisionCandidate::write_ccd_query::vertices_t0", "Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc28ContinuousCollisionCandidate15write_ccd_queryERNSt7ostreamERK12VectorMax12dRK12VectorMax12d-p-vertices_t1", "ipc::ContinuousCollisionCandidate::write_ccd_query::vertices_t1", "Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4N3ipc28ContinuousCollisionCandidateD0Ev", "ipc::ContinuousCollisionCandidate::~ContinuousCollisionCandidate", ""], [6, 3, 1, "_CPPv4N3ipc26DEFAULT_BROAD_PHASE_METHODE", "ipc::DEFAULT_BROAD_PHASE_METHOD", ""], [7, 0, 1, "_CPPv4N3ipc17EdgeEdgeCandidateE", "ipc::EdgeEdgeCandidate", "Subclassed by ipc::EdgeEdgeNormalCollision, ipc::EdgeEdgeTangentialCollision"], [7, 1, 1, "_CPPv4I0EN3ipc17EdgeEdgeCandidate13AbslHashValueE1H1HRK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::AbslHashValue", ""], [7, 4, 2, "_CPPv4I0EN3ipc17EdgeEdgeCandidate13AbslHashValueE1H1HRK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::AbslHashValue::H", ""], [7, 2, 2, "_CPPv4I0EN3ipc17EdgeEdgeCandidate13AbslHashValueE1H1HRK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::AbslHashValue::ee", ""], [7, 2, 2, "_CPPv4I0EN3ipc17EdgeEdgeCandidate13AbslHashValueE1H1HRK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::AbslHashValue::h", ""], [7, 1, 1, "_CPPv4N3ipc17EdgeEdgeCandidate17EdgeEdgeCandidateEll", "ipc::EdgeEdgeCandidate::EdgeEdgeCandidate", ""], [7, 2, 2, "_CPPv4N3ipc17EdgeEdgeCandidate17EdgeEdgeCandidateEll", "ipc::EdgeEdgeCandidate::EdgeEdgeCandidate::edge0_id", ""], [7, 2, 2, "_CPPv4N3ipc17EdgeEdgeCandidate17EdgeEdgeCandidateEll", "ipc::EdgeEdgeCandidate::EdgeEdgeCandidate::edge1_id", ""], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD", "ipc::EdgeEdgeCandidate::ccd", "Perform narrow-phase CCD on the candidate."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-min_distance", "ipc::EdgeEdgeCandidate::ccd::min_distance", "[in] Minimum separation distance between primitives."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::EdgeEdgeCandidate::ccd::narrow_phase_ccd", "[in] The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-tmax", "ipc::EdgeEdgeCandidate::ccd::tmax", "[in] Maximum time (normalized) to look for collisions."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-toi", "ipc::EdgeEdgeCandidate::ccd::toi", "[out] Computed time of impact (normalized)."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::EdgeEdgeCandidate::ccd::vertices_t0", "[in] Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::EdgeEdgeCandidate::ccd::vertices_t1", "[in] Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate16compute_distanceERK12VectorMax12d", "ipc::EdgeEdgeCandidate::compute_distance", "Compute the distance of the stencil."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate16compute_distanceERK12VectorMax12d-p-positions", "ipc::EdgeEdgeCandidate::compute_distance::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate25compute_distance_gradientERK12VectorMax12d", "ipc::EdgeEdgeCandidate::compute_distance_gradient", "Compute the distance gradient of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate25compute_distance_gradientERK12VectorMax12d-p-positions", "ipc::EdgeEdgeCandidate::compute_distance_gradient::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate24compute_distance_hessianERK12VectorMax12d", "ipc::EdgeEdgeCandidate::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate24compute_distance_hessianERK12VectorMax12d-p-positions", "ipc::EdgeEdgeCandidate::compute_distance_hessian::positions", "Stencil's vertex positions."], [7, 3, 1, "_CPPv4N3ipc17EdgeEdgeCandidate8edge0_idE", "ipc::EdgeEdgeCandidate::edge0_id", "ID of the first edge."], [7, 3, 1, "_CPPv4N3ipc17EdgeEdgeCandidate8edge1_idE", "ipc::EdgeEdgeCandidate::edge1_id", "ID of the second edge."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate11known_dtypeEv", "ipc::EdgeEdgeCandidate::known_dtype", ""], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate12num_verticesEv", "ipc::EdgeEdgeCandidate::num_vertices", "Get the number of vertices in the collision stencil."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidateneERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator!=", ""], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidateneERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator!=::other", ""], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidateltERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator&lt;", "Compare EdgeEdgeCandidates for sorting."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidateltERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator&lt;::other", "Compare EdgeEdgeCandidates for sorting."], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidateeqERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator==", ""], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidateeqERK17EdgeEdgeCandidate", "ipc::EdgeEdgeCandidate::operator==::other", ""], [7, 1, 1, "_CPPv4NK3ipc17EdgeEdgeCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::EdgeEdgeCandidate::vertex_ids", "Get the vertex IDs of the collision stencil."], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::EdgeEdgeCandidate::vertex_ids::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4NK3ipc17EdgeEdgeCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::EdgeEdgeCandidate::vertex_ids::faces", "Collision mesh faces"], [10, 7, 1, "_CPPv4N3ipc20EdgeEdgeDistanceTypeE", "ipc::EdgeEdgeDistanceType", "Closest pair between two edges."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType4AUTOE", "ipc::EdgeEdgeDistanceType::AUTO", "Automatically determine the closest pair."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA0_EBE", "ipc::EdgeEdgeDistanceType::EA0_EB", "The edges are closest at vertex 0 of edge A and the interior of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA0_EB0E", "ipc::EdgeEdgeDistanceType::EA0_EB0", "The edges are closest at vertex 0 of edge A and 0 of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA0_EB1E", "ipc::EdgeEdgeDistanceType::EA0_EB1", "The edges are closest at vertex 0 of edge A and 1 of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA1_EBE", "ipc::EdgeEdgeDistanceType::EA1_EB", "The edges are closest at vertex 1 of edge A and the interior of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA1_EB0E", "ipc::EdgeEdgeDistanceType::EA1_EB0", "The edges are closest at vertex 1 of edge A and 0 of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA1_EB1E", "ipc::EdgeEdgeDistanceType::EA1_EB1", "The edges are closest at vertex 1 of edge A and 1 of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType5EA_EBE", "ipc::EdgeEdgeDistanceType::EA_EB", "The edges are closest at an interior point of edge A and B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA_EB0E", "ipc::EdgeEdgeDistanceType::EA_EB0", "The edges are closest at the interior of edge A and vertex 0 of edge B."], [10, 8, 1, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA_EB1E", "ipc::EdgeEdgeDistanceType::EA_EB1", "The edges are closest at the interior of edge A and vertex 1 of edge B."], [13, 0, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollisionE", "ipc::EdgeEdgeNormalCollision", "Inheritence diagram for ipc::EdgeEdgeNormalCollision:"], [13, 1, 1, "_CPPv4I0EN3ipc23EdgeEdgeNormalCollision13AbslHashValueE1H1HRK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::AbslHashValue", ""], [13, 4, 2, "_CPPv4I0EN3ipc23EdgeEdgeNormalCollision13AbslHashValueE1H1HRK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::AbslHashValue::H", ""], [13, 2, 2, "_CPPv4I0EN3ipc23EdgeEdgeNormalCollision13AbslHashValueE1H1HRK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::AbslHashValue::ee", ""], [13, 2, 2, "_CPPv4I0EN3ipc23EdgeEdgeNormalCollision13AbslHashValueE1H1HRK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::AbslHashValue::h", ""], [13, 1, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionERK17EdgeEdgeCandidateKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionERK17EdgeEdgeCandidateKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::candidate", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::dtype", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::dtype", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionERK17EdgeEdgeCandidateKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::dtype", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::edge0_id", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::edge0_id", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::edge1_id", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::edge1_id", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::eps_x", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::eps_x", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionERK17EdgeEdgeCandidateKdK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::eps_x", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::weight", ""], [13, 2, 2, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType", "ipc::EdgeEdgeNormalCollision::EdgeEdgeNormalCollision::weight_gradient", ""], [13, 3, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollision5dtypeE", "ipc::EdgeEdgeNormalCollision::dtype", "Cached distance type."], [13, 3, 1, "_CPPv4N3ipc23EdgeEdgeNormalCollision5eps_xE", "ipc::EdgeEdgeNormalCollision::eps_x", "Mollifier activation threshold."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision12is_mollifiedEv", "ipc::EdgeEdgeNormalCollision::is_mollified", "Does the distance potentially have to be mollified?"], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision11known_dtypeEv", "ipc::EdgeEdgeNormalCollision::known_dtype", ""], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier", "Compute the mollifier for the distance."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12dd", "ipc::EdgeEdgeNormalCollision::mollifier", "Compute the mollifier for the distance."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12dd-p-eps_x", "ipc::EdgeEdgeNormalCollision::mollifier::eps_x", "The mollifier's tolerance."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12d-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12dd-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier_gradient", "Compute the gradient of the mollifier for the distance w.r.t."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12dd", "ipc::EdgeEdgeNormalCollision::mollifier_gradient", "Compute the gradient of the mollifier for the distance wrt the positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12dd-p-eps_x", "ipc::EdgeEdgeNormalCollision::mollifier_gradient::eps_x", "The mollifier's tolerance."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12d-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12dd-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_jacobian_wrt_x", "Compute the jacobian of the distance mollifier's gradient w.r.t."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_jacobian_wrt_x::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d-p-rest_positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_jacobian_wrt_x::rest_positions", "The stencil's rest vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_wrt_x", "Compute the gradient of the mollifier for the distance w.r.t."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_wrt_x::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d-p-rest_positions", "ipc::EdgeEdgeNormalCollision::mollifier_gradient_wrt_x::rest_positions", "The stencil's rest vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier_hessian", "Compute the Hessian of the mollifier for the distance w.r.t."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12dd", "ipc::EdgeEdgeNormalCollision::mollifier_hessian", "Compute the Hessian of the mollifier for the distance wrt the positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12dd-p-eps_x", "ipc::EdgeEdgeNormalCollision::mollifier_hessian::eps_x", "The mollifier's tolerance."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12d-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_hessian::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12dd-p-positions", "ipc::EdgeEdgeNormalCollision::mollifier_hessian::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollision19mollifier_thresholdERK12VectorMax12d", "ipc::EdgeEdgeNormalCollision::mollifier_threshold", "Compute the mollifier threshold for the distance."], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollision19mollifier_thresholdERK12VectorMax12d-p-rest_positions", "ipc::EdgeEdgeNormalCollision::mollifier_threshold::rest_positions", "The stencil's rest vertex positions."], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionneERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator!=", ""], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionneERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator!=::other", ""], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionltERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator&lt;", ""], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionltERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator&lt;::other", ""], [13, 1, 1, "_CPPv4NK3ipc23EdgeEdgeNormalCollisioneqERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator==", ""], [13, 2, 2, "_CPPv4NK3ipc23EdgeEdgeNormalCollisioneqERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeNormalCollision::operator==::other", ""], [16, 0, 1, "_CPPv4N3ipc27EdgeEdgeTangentialCollisionE", "ipc::EdgeEdgeTangentialCollision", "Inheritence diagram for ipc::EdgeEdgeTangentialCollision:"], [16, 1, 1, "_CPPv4N3ipc27EdgeEdgeTangentialCollision17EdgeEdgeCandidateEll", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeCandidate", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision17EdgeEdgeCandidateEll", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeCandidate::edge0_id", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision17EdgeEdgeCandidateEll", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeCandidate::edge1_id", ""], [16, 1, 1, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision", ""], [16, 1, 1, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollision", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeEdgeTangentialCollision::EdgeEdgeTangentialCollision::positions", ""], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_closest_pointERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::compute_closest_point", "Compute the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_closest_pointERK12VectorMax12d-p-positions", "ipc::EdgeEdgeTangentialCollision::compute_closest_point::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d-p-positions", "ipc::EdgeEdgeTangentialCollision::compute_closest_point_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_tangent_basisERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::compute_tangent_basis", "Compute the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_tangent_basisERK12VectorMax12d-p-positions", "ipc::EdgeEdgeTangentialCollision::compute_tangent_basis::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d-p-positions", "ipc::EdgeEdgeTangentialCollision::compute_tangent_basis_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision11known_dtypeEv", "ipc::EdgeEdgeTangentialCollision::known_dtype", ""], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::relative_velocity", "Compute the relative velocity of the collision."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::EdgeEdgeTangentialCollision::relative_velocity::velocities", "Compute the relative velocity of the collision."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision24relative_velocity_matrixERK11VectorMax2d", "ipc::EdgeEdgeTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision24relative_velocity_matrixEv", "ipc::EdgeEdgeTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 2, 2, "p-closest_point", "ipc::EdgeEdgeTangentialCollision::relative_velocity_matrix::closest_point", "Barycentric coordinates of the closest point."], [16, 1, 1, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d", "ipc::EdgeEdgeTangentialCollision::relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [16, 2, 2, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d-p-closest_point", "ipc::EdgeEdgeTangentialCollision::relative_velocity_matrix_jacobian::closest_point", "Barycentric coordinates of the closest point."], [7, 0, 1, "_CPPv4N3ipc17EdgeFaceCandidateE", "ipc::EdgeFaceCandidate", "Candidate for intersection between edge and face."], [7, 1, 1, "_CPPv4I0EN3ipc17EdgeFaceCandidate13AbslHashValueE1H1HRK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::AbslHashValue", ""], [7, 4, 2, "_CPPv4I0EN3ipc17EdgeFaceCandidate13AbslHashValueE1H1HRK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::AbslHashValue::H", ""], [7, 2, 2, "_CPPv4I0EN3ipc17EdgeFaceCandidate13AbslHashValueE1H1HRK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::AbslHashValue::fv", ""], [7, 2, 2, "_CPPv4I0EN3ipc17EdgeFaceCandidate13AbslHashValueE1H1HRK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::AbslHashValue::h", ""], [7, 1, 1, "_CPPv4N3ipc17EdgeFaceCandidate17EdgeFaceCandidateEll", "ipc::EdgeFaceCandidate::EdgeFaceCandidate", ""], [7, 2, 2, "_CPPv4N3ipc17EdgeFaceCandidate17EdgeFaceCandidateEll", "ipc::EdgeFaceCandidate::EdgeFaceCandidate::edge_id", ""], [7, 2, 2, "_CPPv4N3ipc17EdgeFaceCandidate17EdgeFaceCandidateEll", "ipc::EdgeFaceCandidate::EdgeFaceCandidate::face_id", ""], [7, 3, 1, "_CPPv4N3ipc17EdgeFaceCandidate7edge_idE", "ipc::EdgeFaceCandidate::edge_id", "ID of the edge."], [7, 3, 1, "_CPPv4N3ipc17EdgeFaceCandidate7face_idE", "ipc::EdgeFaceCandidate::face_id", "ID of the face."], [7, 1, 1, "_CPPv4NK3ipc17EdgeFaceCandidateneERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator!=", ""], [7, 2, 2, "_CPPv4NK3ipc17EdgeFaceCandidateneERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator!=::other", ""], [7, 1, 1, "_CPPv4NK3ipc17EdgeFaceCandidateltERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator&lt;", "Compare EdgeFaceCandidate for sorting."], [7, 2, 2, "_CPPv4NK3ipc17EdgeFaceCandidateltERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator&lt;::other", "Compare EdgeFaceCandidate for sorting."], [7, 1, 1, "_CPPv4NK3ipc17EdgeFaceCandidateeqERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator==", ""], [7, 2, 2, "_CPPv4NK3ipc17EdgeFaceCandidateeqERK17EdgeFaceCandidate", "ipc::EdgeFaceCandidate::operator==::other", ""], [7, 0, 1, "_CPPv4N3ipc19EdgeVertexCandidateE", "ipc::EdgeVertexCandidate", "Subclassed by ipc::EdgeVertexNormalCollision, ipc::EdgeVertexTangentialCollision"], [7, 1, 1, "_CPPv4I0EN3ipc19EdgeVertexCandidate13AbslHashValueE1H1HRK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::AbslHashValue", ""], [7, 4, 2, "_CPPv4I0EN3ipc19EdgeVertexCandidate13AbslHashValueE1H1HRK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::AbslHashValue::H", ""], [7, 2, 2, "_CPPv4I0EN3ipc19EdgeVertexCandidate13AbslHashValueE1H1HRK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::AbslHashValue::ev", ""], [7, 2, 2, "_CPPv4I0EN3ipc19EdgeVertexCandidate13AbslHashValueE1H1HRK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::AbslHashValue::h", ""], [7, 1, 1, "_CPPv4N3ipc19EdgeVertexCandidate19EdgeVertexCandidateEll", "ipc::EdgeVertexCandidate::EdgeVertexCandidate", ""], [7, 2, 2, "_CPPv4N3ipc19EdgeVertexCandidate19EdgeVertexCandidateEll", "ipc::EdgeVertexCandidate::EdgeVertexCandidate::edge_id", ""], [7, 2, 2, "_CPPv4N3ipc19EdgeVertexCandidate19EdgeVertexCandidateEll", "ipc::EdgeVertexCandidate::EdgeVertexCandidate::vertex_id", ""], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD", "ipc::EdgeVertexCandidate::ccd", "Perform narrow-phase CCD on the candidate."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-min_distance", "ipc::EdgeVertexCandidate::ccd::min_distance", "[in] Minimum separation distance between primitives."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::EdgeVertexCandidate::ccd::narrow_phase_ccd", "[in] The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-tmax", "ipc::EdgeVertexCandidate::ccd::tmax", "[in] Maximum time (normalized) to look for collisions."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-toi", "ipc::EdgeVertexCandidate::ccd::toi", "[out] Computed time of impact (normalized)."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::EdgeVertexCandidate::ccd::vertices_t0", "[in] Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::EdgeVertexCandidate::ccd::vertices_t1", "[in] Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate16compute_distanceERK12VectorMax12d", "ipc::EdgeVertexCandidate::compute_distance", "Compute the distance of the stencil."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate16compute_distanceERK12VectorMax12d-p-positions", "ipc::EdgeVertexCandidate::compute_distance::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate25compute_distance_gradientERK12VectorMax12d", "ipc::EdgeVertexCandidate::compute_distance_gradient", "Compute the distance gradient of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate25compute_distance_gradientERK12VectorMax12d-p-positions", "ipc::EdgeVertexCandidate::compute_distance_gradient::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate24compute_distance_hessianERK12VectorMax12d", "ipc::EdgeVertexCandidate::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate24compute_distance_hessianERK12VectorMax12d-p-positions", "ipc::EdgeVertexCandidate::compute_distance_hessian::positions", "Stencil's vertex positions."], [7, 3, 1, "_CPPv4N3ipc19EdgeVertexCandidate7edge_idE", "ipc::EdgeVertexCandidate::edge_id", "ID of the edge."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate11known_dtypeEv", "ipc::EdgeVertexCandidate::known_dtype", ""], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate12num_verticesEv", "ipc::EdgeVertexCandidate::num_vertices", "Get the number of vertices in the collision stencil."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidateneERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator!=", ""], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidateneERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator!=::other", ""], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidateltERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator&lt;", "Compare EdgeVertexCandidates for sorting."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidateltERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator&lt;::other", "Compare EdgeVertexCandidates for sorting."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidateeqERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator==", ""], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidateeqERK19EdgeVertexCandidate", "ipc::EdgeVertexCandidate::operator==::other", ""], [7, 3, 1, "_CPPv4N3ipc19EdgeVertexCandidate9vertex_idE", "ipc::EdgeVertexCandidate::vertex_id", "ID of the vertex."], [7, 1, 1, "_CPPv4NK3ipc19EdgeVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::EdgeVertexCandidate::vertex_ids", "Get the vertex IDs of the collision stencil."], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::EdgeVertexCandidate::vertex_ids::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4NK3ipc19EdgeVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::EdgeVertexCandidate::vertex_ids::faces", "Collision mesh faces"], [13, 0, 1, "_CPPv4N3ipc25EdgeVertexNormalCollisionE", "ipc::EdgeVertexNormalCollision", "Inheritence diagram for ipc::EdgeVertexNormalCollision:"], [13, 1, 1, "_CPPv4I0EN3ipc25EdgeVertexNormalCollision13AbslHashValueE1H1HRK25EdgeVertexNormalCollision", "ipc::EdgeVertexNormalCollision::AbslHashValue", ""], [13, 4, 2, "_CPPv4I0EN3ipc25EdgeVertexNormalCollision13AbslHashValueE1H1HRK25EdgeVertexNormalCollision", "ipc::EdgeVertexNormalCollision::AbslHashValue::H", ""], [13, 2, 2, "_CPPv4I0EN3ipc25EdgeVertexNormalCollision13AbslHashValueE1H1HRK25EdgeVertexNormalCollision", "ipc::EdgeVertexNormalCollision::AbslHashValue::ev", ""], [13, 2, 2, "_CPPv4I0EN3ipc25EdgeVertexNormalCollision13AbslHashValueE1H1HRK25EdgeVertexNormalCollision", "ipc::EdgeVertexNormalCollision::AbslHashValue::h", ""], [13, 1, 1, "_CPPv4N3ipc25EdgeVertexNormalCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexNormalCollision::EdgeVertexCandidate", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexNormalCollision::EdgeVertexCandidate::edge_id", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexNormalCollision::EdgeVertexCandidate::vertex_id", ""], [13, 1, 1, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionERK19EdgeVertexCandidate", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision::_edge_id", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision::_vertex_id", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision::_weight", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision::_weight_gradient", ""], [13, 2, 2, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionERK19EdgeVertexCandidate", "ipc::EdgeVertexNormalCollision::EdgeVertexNormalCollision::candidate", ""], [13, 1, 1, "_CPPv4NK3ipc25EdgeVertexNormalCollision11known_dtypeEv", "ipc::EdgeVertexNormalCollision::known_dtype", ""], [16, 0, 1, "_CPPv4N3ipc29EdgeVertexTangentialCollisionE", "ipc::EdgeVertexTangentialCollision", "Inheritence diagram for ipc::EdgeVertexTangentialCollision:"], [16, 1, 1, "_CPPv4N3ipc29EdgeVertexTangentialCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexTangentialCollision::EdgeVertexCandidate", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexTangentialCollision::EdgeVertexCandidate::edge_id", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision19EdgeVertexCandidateEll", "ipc::EdgeVertexTangentialCollision::EdgeVertexCandidate::vertex_id", ""], [16, 1, 1, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollision", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision", ""], [16, 1, 1, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollision", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::EdgeVertexTangentialCollision::EdgeVertexTangentialCollision::positions", ""], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_closest_pointERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::compute_closest_point", "Compute the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_closest_pointERK12VectorMax12d-p-positions", "ipc::EdgeVertexTangentialCollision::compute_closest_point::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d-p-positions", "ipc::EdgeVertexTangentialCollision::compute_closest_point_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::compute_tangent_basis", "Compute the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d-p-positions", "ipc::EdgeVertexTangentialCollision::compute_tangent_basis::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d-p-positions", "ipc::EdgeVertexTangentialCollision::compute_tangent_basis_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::relative_velocity", "Compute the relative velocity of the collision."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::EdgeVertexTangentialCollision::relative_velocity::velocities", "Compute the relative velocity of the collision."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d", "ipc::EdgeVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision24relative_velocity_matrixEv", "ipc::EdgeVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 2, 2, "p-closest_point", "ipc::EdgeVertexTangentialCollision::relative_velocity_matrix::closest_point", "Barycentric coordinates of the closest point."], [16, 1, 1, "_CPPv4NK3ipc29EdgeVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d", "ipc::EdgeVertexTangentialCollision::relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [16, 2, 2, "_CPPv4NK3ipc29EdgeVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d-p-closest_point", "ipc::EdgeVertexTangentialCollision::relative_velocity_matrix_jacobian::closest_point", "Barycentric coordinates of the closest point."], [7, 0, 1, "_CPPv4N3ipc19FaceVertexCandidateE", "ipc::FaceVertexCandidate", "Subclassed by ipc::FaceVertexNormalCollision, ipc::FaceVertexTangentialCollision"], [7, 1, 1, "_CPPv4I0EN3ipc19FaceVertexCandidate13AbslHashValueE1H1HRK19FaceVertexCandidate", "ipc::FaceVertexCandidate::AbslHashValue", ""], [7, 4, 2, "_CPPv4I0EN3ipc19FaceVertexCandidate13AbslHashValueE1H1HRK19FaceVertexCandidate", "ipc::FaceVertexCandidate::AbslHashValue::H", ""], [7, 2, 2, "_CPPv4I0EN3ipc19FaceVertexCandidate13AbslHashValueE1H1HRK19FaceVertexCandidate", "ipc::FaceVertexCandidate::AbslHashValue::fv", ""], [7, 2, 2, "_CPPv4I0EN3ipc19FaceVertexCandidate13AbslHashValueE1H1HRK19FaceVertexCandidate", "ipc::FaceVertexCandidate::AbslHashValue::h", ""], [7, 1, 1, "_CPPv4N3ipc19FaceVertexCandidate19FaceVertexCandidateEll", "ipc::FaceVertexCandidate::FaceVertexCandidate", ""], [7, 2, 2, "_CPPv4N3ipc19FaceVertexCandidate19FaceVertexCandidateEll", "ipc::FaceVertexCandidate::FaceVertexCandidate::face_id", ""], [7, 2, 2, "_CPPv4N3ipc19FaceVertexCandidate19FaceVertexCandidateEll", "ipc::FaceVertexCandidate::FaceVertexCandidate::vertex_id", ""], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD", "ipc::FaceVertexCandidate::ccd", "Perform narrow-phase CCD on the candidate."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-min_distance", "ipc::FaceVertexCandidate::ccd::min_distance", "[in] Minimum separation distance between primitives."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::FaceVertexCandidate::ccd::narrow_phase_ccd", "[in] The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-tmax", "ipc::FaceVertexCandidate::ccd::tmax", "[in] Maximum time (normalized) to look for collisions."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-toi", "ipc::FaceVertexCandidate::ccd::toi", "[out] Computed time of impact (normalized)."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::FaceVertexCandidate::ccd::vertices_t0", "[in] Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::FaceVertexCandidate::ccd::vertices_t1", "[in] Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate16compute_distanceERK12VectorMax12d", "ipc::FaceVertexCandidate::compute_distance", "Compute the distance of the stencil."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate16compute_distanceERK12VectorMax12d-p-positions", "ipc::FaceVertexCandidate::compute_distance::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate25compute_distance_gradientERK12VectorMax12d", "ipc::FaceVertexCandidate::compute_distance_gradient", "Compute the distance gradient of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate25compute_distance_gradientERK12VectorMax12d-p-positions", "ipc::FaceVertexCandidate::compute_distance_gradient::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate24compute_distance_hessianERK12VectorMax12d", "ipc::FaceVertexCandidate::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate24compute_distance_hessianERK12VectorMax12d-p-positions", "ipc::FaceVertexCandidate::compute_distance_hessian::positions", "Stencil's vertex positions."], [7, 3, 1, "_CPPv4N3ipc19FaceVertexCandidate7face_idE", "ipc::FaceVertexCandidate::face_id", "ID of the face."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate11known_dtypeEv", "ipc::FaceVertexCandidate::known_dtype", ""], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate12num_verticesEv", "ipc::FaceVertexCandidate::num_vertices", "Get the number of vertices in the collision stencil."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidateneERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator!=", ""], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidateneERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator!=::other", ""], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidateltERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator&lt;", "Compare FaceVertexCandidate for sorting."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidateltERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator&lt;::other", "Compare FaceVertexCandidate for sorting."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidateeqERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator==", ""], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidateeqERK19FaceVertexCandidate", "ipc::FaceVertexCandidate::operator==::other", ""], [7, 3, 1, "_CPPv4N3ipc19FaceVertexCandidate9vertex_idE", "ipc::FaceVertexCandidate::vertex_id", "ID of the vertex."], [7, 1, 1, "_CPPv4NK3ipc19FaceVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::FaceVertexCandidate::vertex_ids", "Get the vertex IDs of the collision stencil."], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::FaceVertexCandidate::vertex_ids::edges", "Collision mesh edges"], [7, 2, 2, "_CPPv4NK3ipc19FaceVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::FaceVertexCandidate::vertex_ids::faces", "Collision mesh faces"], [13, 0, 1, "_CPPv4N3ipc25FaceVertexNormalCollisionE", "ipc::FaceVertexNormalCollision", "Inheritence diagram for ipc::FaceVertexNormalCollision:"], [13, 1, 1, "_CPPv4I0EN3ipc25FaceVertexNormalCollision13AbslHashValueE1H1HRK25FaceVertexNormalCollision", "ipc::FaceVertexNormalCollision::AbslHashValue", ""], [13, 4, 2, "_CPPv4I0EN3ipc25FaceVertexNormalCollision13AbslHashValueE1H1HRK25FaceVertexNormalCollision", "ipc::FaceVertexNormalCollision::AbslHashValue::H", ""], [13, 2, 2, "_CPPv4I0EN3ipc25FaceVertexNormalCollision13AbslHashValueE1H1HRK25FaceVertexNormalCollision", "ipc::FaceVertexNormalCollision::AbslHashValue::fv", ""], [13, 2, 2, "_CPPv4I0EN3ipc25FaceVertexNormalCollision13AbslHashValueE1H1HRK25FaceVertexNormalCollision", "ipc::FaceVertexNormalCollision::AbslHashValue::h", ""], [13, 1, 1, "_CPPv4N3ipc25FaceVertexNormalCollision19FaceVertexCandidateEll", "ipc::FaceVertexNormalCollision::FaceVertexCandidate", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision19FaceVertexCandidateEll", "ipc::FaceVertexNormalCollision::FaceVertexCandidate::face_id", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision19FaceVertexCandidateEll", "ipc::FaceVertexNormalCollision::FaceVertexCandidate::vertex_id", ""], [13, 1, 1, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionERK19FaceVertexCandidate", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision::_face_id", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision::_vertex_id", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision::_weight", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision::_weight_gradient", ""], [13, 2, 2, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionERK19FaceVertexCandidate", "ipc::FaceVertexNormalCollision::FaceVertexNormalCollision::candidate", ""], [13, 1, 1, "_CPPv4NK3ipc25FaceVertexNormalCollision11known_dtypeEv", "ipc::FaceVertexNormalCollision::known_dtype", ""], [16, 0, 1, "_CPPv4N3ipc29FaceVertexTangentialCollisionE", "ipc::FaceVertexTangentialCollision", "Inheritence diagram for ipc::FaceVertexTangentialCollision:"], [16, 1, 1, "_CPPv4N3ipc29FaceVertexTangentialCollision19FaceVertexCandidateEll", "ipc::FaceVertexTangentialCollision::FaceVertexCandidate", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision19FaceVertexCandidateEll", "ipc::FaceVertexTangentialCollision::FaceVertexCandidate::face_id", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision19FaceVertexCandidateEll", "ipc::FaceVertexTangentialCollision::FaceVertexCandidate::vertex_id", ""], [16, 1, 1, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollision", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision", ""], [16, 1, 1, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollision", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::FaceVertexTangentialCollision::FaceVertexTangentialCollision::positions", ""], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_closest_pointERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::compute_closest_point", "Compute the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_closest_pointERK12VectorMax12d-p-positions", "ipc::FaceVertexTangentialCollision::compute_closest_point::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d-p-positions", "ipc::FaceVertexTangentialCollision::compute_closest_point_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::compute_tangent_basis", "Compute the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d-p-positions", "ipc::FaceVertexTangentialCollision::compute_tangent_basis::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d-p-positions", "ipc::FaceVertexTangentialCollision::compute_tangent_basis_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::relative_velocity", "Compute the relative velocity of the collision."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::FaceVertexTangentialCollision::relative_velocity::velocities", "Compute the relative velocity of the collision."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d", "ipc::FaceVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision24relative_velocity_matrixEv", "ipc::FaceVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 2, 2, "p-closest_point", "ipc::FaceVertexTangentialCollision::relative_velocity_matrix::closest_point", "Barycentric coordinates of the closest point."], [16, 1, 1, "_CPPv4NK3ipc29FaceVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d", "ipc::FaceVertexTangentialCollision::relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [16, 2, 2, "_CPPv4NK3ipc29FaceVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d-p-closest_point", "ipc::FaceVertexTangentialCollision::relative_velocity_matrix_jacobian::closest_point", "Barycentric coordinates of the closest point."], [14, 0, 1, "_CPPv4N3ipc17FrictionPotentialE", "ipc::FrictionPotential", "Inheritence diagram for ipc::FrictionPotential:"], [14, 1, 1, "_CPPv4N3ipc17FrictionPotential17FrictionPotentialEKd", "ipc::FrictionPotential::FrictionPotential", "Construct a friction potential."], [14, 2, 2, "_CPPv4N3ipc17FrictionPotential17FrictionPotentialEKd-p-eps_v", "ipc::FrictionPotential::FrictionPotential::eps_v", "The smooth friction mollifier parameter \\epsilon_v."], [14, 6, 1, "_CPPv4N3ipc17FrictionPotential5SuperE", "ipc::FrictionPotential::Super", ""], [14, 1, 1, "_CPPv4NK3ipc17FrictionPotential5eps_vEv", "ipc::FrictionPotential::eps_v", "Get the smooth friction mollifier parameter \\epsilon_v."], [14, 1, 1, "_CPPv4NK3ipc17FrictionPotential2f0EKd", "ipc::FrictionPotential::f0", ""], [14, 2, 2, "_CPPv4NK3ipc17FrictionPotential2f0EKd", "ipc::FrictionPotential::f0::x", ""], [14, 1, 1, "_CPPv4NK3ipc17FrictionPotential9f1_over_xEKd", "ipc::FrictionPotential::f1_over_x", ""], [14, 2, 2, "_CPPv4NK3ipc17FrictionPotential9f1_over_xEKd", "ipc::FrictionPotential::f1_over_x::x", ""], [14, 1, 1, "_CPPv4NK3ipc17FrictionPotential21f2_x_minus_f1_over_x3EKd", "ipc::FrictionPotential::f2_x_minus_f1_over_x3", ""], [14, 2, 2, "_CPPv4NK3ipc17FrictionPotential21f2_x_minus_f1_over_x3EKd", "ipc::FrictionPotential::f2_x_minus_f1_over_x3::x", ""], [14, 1, 1, "_CPPv4NK3ipc17FrictionPotential10is_dynamicEKd", "ipc::FrictionPotential::is_dynamic", ""], [14, 2, 2, "_CPPv4NK3ipc17FrictionPotential10is_dynamicEKd", "ipc::FrictionPotential::is_dynamic::speed", ""], [14, 3, 1, "_CPPv4N3ipc17FrictionPotential7m_eps_vE", "ipc::FrictionPotential::m_eps_v", "The smooth friction mollifier parameter \\epsilon_v."], [14, 1, 1, "_CPPv4N3ipc17FrictionPotential9set_eps_vEKd", "ipc::FrictionPotential::set_eps_v", "Set the smooth friction mollifier parameter \\epsilon_v."], [14, 2, 2, "_CPPv4N3ipc17FrictionPotential9set_eps_vEKd-p-eps_v", "ipc::FrictionPotential::set_eps_v::eps_v", "The smooth friction mollifier parameter \\epsilon_v."], [6, 0, 1, "_CPPv4N3ipc8HashGridE", "ipc::HashGrid", "Build the broad phase for static collision detection."], [6, 1, 1, "_CPPv4N3ipc8HashGrid8HashGridEv", "ipc::HashGrid::HashGrid", ""], [6, 1, 1, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::HashGrid::build", "Build the broad phase for continuous collision detection."], [6, 1, 1, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::HashGrid::build", "Build the broad phase for static collision detection."], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::HashGrid::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::HashGrid::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::HashGrid::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::HashGrid::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::HashGrid::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::HashGrid::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices", "ipc::HashGrid::build::vertices", "Vertex positions"], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t0", "ipc::HashGrid::build::vertices_t0", "Starting vertices of the vertices."], [6, 2, 2, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t1", "ipc::HashGrid::build::vertices_t1", "Ending vertices of the vertices."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid9cell_sizeEv", "ipc::HashGrid::cell_size", ""], [6, 1, 1, "_CPPv4N3ipc8HashGrid5clearEv", "ipc::HashGrid::clear", "Clear the hash grid."], [6, 1, 1, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE", "ipc::HashGrid::detect_candidates", "Find the candidate collisions among a set of items."], [6, 1, 1, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE", "ipc::HashGrid::detect_candidates", "Find the candidate collisions between two sets of items."], [6, 4, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::HashGrid::detect_candidates::Candidate", "The type of collision candidate."], [6, 4, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::HashGrid::detect_candidates::Candidate", "The type of collision candidate."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes", "ipc::HashGrid::detect_candidates::boxes", "[in] The items' boxes."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes0", "ipc::HashGrid::detect_candidates::boxes0", "[in] First set's boxes."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-boxes1", "ipc::HashGrid::detect_candidates::boxes1", "[in] Second set's boxes."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::HashGrid::detect_candidates::can_collide", "[in] Function to determine if two items can collide."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::HashGrid::detect_candidates::can_collide", "[in] Function to determine if two items can collide."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::HashGrid::detect_candidates::candidates", "[out] The candidate collisions."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::HashGrid::detect_candidates::candidates", "[out] The candidate collisions."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-items", "ipc::HashGrid::detect_candidates::items", "[in] The set of items."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-items0", "ipc::HashGrid::detect_candidates::items0", "[in] First set of items."], [6, 2, 2, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE-p-items1", "ipc::HashGrid::detect_candidates::items1", "[in] Second set of items."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::HashGrid::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE-p-candidates", "ipc::HashGrid::detect_edge_edge_candidates::candidates", "[out] The candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::HashGrid::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE-p-candidates", "ipc::HashGrid::detect_edge_face_candidates::candidates", "[out] The candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::HashGrid::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE-p-candidates", "ipc::HashGrid::detect_edge_vertex_candidates::candidates", "[out] The candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::HashGrid::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::HashGrid::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::HashGrid::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE-p-candidates", "ipc::HashGrid::detect_face_vertex_candidates::candidates", "[out] The candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::HashGrid::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::HashGrid::detect_vertex_vertex_candidates::candidates", "Find the candidate vertex-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid10domain_maxEv", "ipc::HashGrid::domain_max", ""], [6, 1, 1, "_CPPv4NK3ipc8HashGrid10domain_minEv", "ipc::HashGrid::domain_min", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid10edge_itemsE", "ipc::HashGrid::edge_items", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid10face_itemsE", "ipc::HashGrid::face_items", ""], [6, 1, 1, "_CPPv4NK3ipc8HashGrid9grid_sizeEv", "ipc::HashGrid::grid_size", ""], [6, 1, 1, "_CPPv4NK3ipc8HashGrid4hashEiii", "ipc::HashGrid::hash", "Create the hash of a cell location."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid4hashEiii", "ipc::HashGrid::hash::x", "Create the hash of a cell location."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid4hashEiii", "ipc::HashGrid::hash::y", "Create the hash of a cell location."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid4hashEiii", "ipc::HashGrid::hash::z", "Create the hash of a cell location."], [6, 1, 1, "_CPPv4NK3ipc8HashGrid10insert_boxERK4AABBKlRNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_box", "Add an AABB of the extents to the hash grid."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid10insert_boxERK4AABBKlRNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_box::aabb", "Add an AABB of the extents to the hash grid."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid10insert_boxERK4AABBKlRNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_box::id", "Add an AABB of the extents to the hash grid."], [6, 2, 2, "_CPPv4NK3ipc8HashGrid10insert_boxERK4AABBKlRNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_box::items", "Add an AABB of the extents to the hash grid."], [6, 1, 1, "_CPPv4N3ipc8HashGrid12insert_boxesEv", "ipc::HashGrid::insert_boxes", ""], [6, 1, 1, "_CPPv4NK3ipc8HashGrid12insert_boxesERKNSt6vectorI4AABBEERNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_boxes", ""], [6, 2, 2, "_CPPv4NK3ipc8HashGrid12insert_boxesERKNSt6vectorI4AABBEERNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_boxes::boxes", ""], [6, 2, 2, "_CPPv4NK3ipc8HashGrid12insert_boxesERKNSt6vectorI4AABBEERNSt6vectorI8HashItemEE", "ipc::HashGrid::insert_boxes::items", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid11m_cell_sizeE", "ipc::HashGrid::m_cell_size", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid12m_domain_maxE", "ipc::HashGrid::m_domain_max", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid12m_domain_minE", "ipc::HashGrid::m_domain_min", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid11m_grid_sizeE", "ipc::HashGrid::m_grid_size", ""], [6, 1, 1, "_CPPv4N3ipc8HashGrid6resizeERK10ArrayMax3dRK10ArrayMax3dd", "ipc::HashGrid::resize", ""], [6, 2, 2, "_CPPv4N3ipc8HashGrid6resizeERK10ArrayMax3dRK10ArrayMax3dd", "ipc::HashGrid::resize::cell_size", ""], [6, 2, 2, "_CPPv4N3ipc8HashGrid6resizeERK10ArrayMax3dRK10ArrayMax3dd", "ipc::HashGrid::resize::domain_max", ""], [6, 2, 2, "_CPPv4N3ipc8HashGrid6resizeERK10ArrayMax3dRK10ArrayMax3dd", "ipc::HashGrid::resize::domain_min", ""], [6, 3, 1, "_CPPv4N3ipc8HashGrid12vertex_itemsE", "ipc::HashGrid::vertex_items", ""], [8, 0, 1, "_CPPv4N3ipc27IntervalNonlinearTrajectoryE", "ipc::IntervalNonlinearTrajectory", "A nonlinear trajectory with an implementation of the max_distance_from_linear function using interval arithmetic."], [8, 1, 1, "_CPPv4NK3ipc27IntervalNonlinearTrajectory24max_distance_from_linearEKdKd", "ipc::IntervalNonlinearTrajectory::max_distance_from_linear", "Compute the maximum distance from the nonlinear trajectory to a linearized trajectory."], [8, 2, 2, "_CPPv4NK3ipc27IntervalNonlinearTrajectory24max_distance_from_linearEKdKd-p-t0", "ipc::IntervalNonlinearTrajectory::max_distance_from_linear::t0", "[in] Start time of the trajectory"], [8, 2, 2, "_CPPv4NK3ipc27IntervalNonlinearTrajectory24max_distance_from_linearEKdKd-p-t1", "ipc::IntervalNonlinearTrajectory::max_distance_from_linear::t1", "[in] End time of the trajectory"], [8, 1, 1, "_CPPv4NK3ipc27IntervalNonlinearTrajectoryclERKN5filib8IntervalE", "ipc::IntervalNonlinearTrajectory::operator()", "Compute the point's position over a time interval t."], [8, 2, 2, "_CPPv4NK3ipc27IntervalNonlinearTrajectoryclERKN5filib8IntervalE", "ipc::IntervalNonlinearTrajectory::operator()::t", "Compute the point's position over a time interval t."], [8, 1, 1, "_CPPv4N3ipc27IntervalNonlinearTrajectoryD0Ev", "ipc::IntervalNonlinearTrajectory::~IntervalNonlinearTrajectory", ""], [8, 0, 1, "_CPPv4N3ipc19NonlinearTrajectoryE", "ipc::NonlinearTrajectory", "A nonlinear trajectory is a function that maps time to a point in space."], [8, 1, 1, "_CPPv4NK3ipc19NonlinearTrajectory24max_distance_from_linearEKdKd", "ipc::NonlinearTrajectory::max_distance_from_linear", "Compute the maximum distance from the nonlinear trajectory to a linearized trajectory."], [8, 2, 2, "_CPPv4NK3ipc19NonlinearTrajectory24max_distance_from_linearEKdKd-p-t0", "ipc::NonlinearTrajectory::max_distance_from_linear::t0", "[in] Start time of the trajectory"], [8, 2, 2, "_CPPv4NK3ipc19NonlinearTrajectory24max_distance_from_linearEKdKd-p-t1", "ipc::NonlinearTrajectory::max_distance_from_linear::t1", "[in] End time of the trajectory"], [8, 1, 1, "_CPPv4NK3ipc19NonlinearTrajectoryclEKd", "ipc::NonlinearTrajectory::operator()", "Compute the point's position at time t."], [8, 2, 2, "_CPPv4NK3ipc19NonlinearTrajectoryclEKd", "ipc::NonlinearTrajectory::operator()::t", "Compute the point's position at time t."], [8, 1, 1, "_CPPv4N3ipc19NonlinearTrajectoryD0Ev", "ipc::NonlinearTrajectory::~NonlinearTrajectory", ""], [14, 0, 1, "_CPPv4N3ipc23NormalAdhesionPotentialE", "ipc::NormalAdhesionPotential", "Inheritence diagram for ipc::NormalAdhesionPotential:"], [14, 1, 1, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd", "ipc::NormalAdhesionPotential::NormalAdhesionPotential", ""], [14, 2, 2, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd", "ipc::NormalAdhesionPotential::NormalAdhesionPotential::_Y", ""], [14, 2, 2, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd", "ipc::NormalAdhesionPotential::NormalAdhesionPotential::_dhat_a", ""], [14, 2, 2, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd", "ipc::NormalAdhesionPotential::NormalAdhesionPotential::_dhat_p", ""], [14, 2, 2, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd", "ipc::NormalAdhesionPotential::NormalAdhesionPotential::_eps_c", ""], [14, 6, 1, "_CPPv4N3ipc23NormalAdhesionPotential5SuperE", "ipc::NormalAdhesionPotential::Super", ""], [14, 3, 1, "_CPPv4N3ipc23NormalAdhesionPotential1YE", "ipc::NormalAdhesionPotential::Y", "The Young's modulus ( Y)."], [14, 3, 1, "_CPPv4N3ipc23NormalAdhesionPotential6dhat_aE", "ipc::NormalAdhesionPotential::dhat_a", "The adhesion activation distance ( \\hat{d}_a)."], [14, 3, 1, "_CPPv4N3ipc23NormalAdhesionPotential6dhat_pE", "ipc::NormalAdhesionPotential::dhat_p", "The distance of largest adhesion force ( \\hat{d}_p) ( 0 < \\hat{d}_p < \\hat{d}_a)."], [14, 3, 1, "_CPPv4N3ipc23NormalAdhesionPotential5eps_cE", "ipc::NormalAdhesionPotential::eps_c", "The critical strain ( \\varepsilon_c)."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential15force_magnitudeEKdKdKd", "ipc::NormalAdhesionPotential::force_magnitude", "Compute the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential15force_magnitudeEKdKdKd-p-barrier_stiffness", "ipc::NormalAdhesionPotential::force_magnitude::barrier_stiffness", "The barrier stiffness."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential15force_magnitudeEKdKdKd-p-distance_squared", "ipc::NormalAdhesionPotential::force_magnitude::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential15force_magnitudeEKdKdKd-p-dmin", "ipc::NormalAdhesionPotential::force_magnitude::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd", "ipc::NormalAdhesionPotential::force_magnitude_gradient", "Compute the gradient of the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-barrier_stiffness", "ipc::NormalAdhesionPotential::force_magnitude_gradient::barrier_stiffness", "The stiffness of the barrier."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared", "ipc::NormalAdhesionPotential::force_magnitude_gradient::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared_gradient", "ipc::NormalAdhesionPotential::force_magnitude_gradient::distance_squared_gradient", "The gradient of the squared distance."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-dmin", "ipc::NormalAdhesionPotential::force_magnitude_gradient::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientEKdKd", "ipc::NormalAdhesionPotential::gradient", "Compute the gradient of the barrier potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientERK15NormalCollisionRK12VectorMax12d", "ipc::NormalAdhesionPotential::gradient", "Compute the gradient of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-collision", "ipc::NormalAdhesionPotential::gradient::collision", "The collision."], [14, 2, 2, "p-distance_squared", "ipc::NormalAdhesionPotential::gradient::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "p-dmin", "ipc::NormalAdhesionPotential::gradient::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-positions", "ipc::NormalAdhesionPotential::gradient::positions", "The collision stencil's positions."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianEKdKd", "ipc::NormalAdhesionPotential::hessian", "Compute the hessian of the barrier potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::NormalAdhesionPotential::hessian", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::NormalAdhesionPotential::hessian::collision", "The collision."], [14, 2, 2, "p-distance_squared", "ipc::NormalAdhesionPotential::hessian::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "p-dmin", "ipc::NormalAdhesionPotential::hessian::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-positions", "ipc::NormalAdhesionPotential::hessian::positions", "The collision stencil's positions."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::NormalAdhesionPotential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotential30normal_adhesion_potential_argsEKd", "ipc::NormalAdhesionPotential::normal_adhesion_potential_args", ""], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotential30normal_adhesion_potential_argsEKd", "ipc::NormalAdhesionPotential::normal_adhesion_potential_args::dmin", ""], [14, 1, 1, "_CPPv4NK3ipc23NormalAdhesionPotentialclEKdKd", "ipc::NormalAdhesionPotential::operator()", "Compute the barrier potential for a collision."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotentialclEKdKd-p-distance_squared", "ipc::NormalAdhesionPotential::operator()::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc23NormalAdhesionPotentialclEKdKd-p-dmin", "ipc::NormalAdhesionPotential::operator()::dmin", "The minimum distance (unsquared) between the two objects."], [13, 0, 1, "_CPPv4N3ipc15NormalCollisionE", "ipc::NormalCollision", "Inheritence diagram for ipc::NormalCollision:"], [13, 1, 1, "_CPPv4N3ipc15NormalCollision15NormalCollisionEKdRKN5Eigen12SparseVectorIdEE", "ipc::NormalCollision::NormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc15NormalCollision15NormalCollisionEv", "ipc::NormalCollision::NormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc15NormalCollision15NormalCollisionEKdRKN5Eigen12SparseVectorIdEE", "ipc::NormalCollision::NormalCollision::weight", ""], [13, 2, 2, "_CPPv4N3ipc15NormalCollision15NormalCollisionEKdRKN5Eigen12SparseVectorIdEE", "ipc::NormalCollision::NormalCollision::weight_gradient", ""], [13, 3, 1, "_CPPv4N3ipc15NormalCollision4dminE", "ipc::NormalCollision::dmin", "The minimum separation distance."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision12is_mollifiedEv", "ipc::NormalCollision::is_mollified", "Does the distance potentially have to be mollified?"], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12d", "ipc::NormalCollision::mollifier", "Compute the mollifier for the distance."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12dd", "ipc::NormalCollision::mollifier", "Compute the mollifier for the distance."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12dd-p-eps_x", "ipc::NormalCollision::mollifier::eps_x", "The mollifier's threshold."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12d-p-positions", "ipc::NormalCollision::mollifier::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12dd-p-positions", "ipc::NormalCollision::mollifier::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12d", "ipc::NormalCollision::mollifier_gradient", "Compute the gradient of the mollifier for the distance wrt the positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12dd", "ipc::NormalCollision::mollifier_gradient", "Compute the gradient of the mollifier for the distance wrt the positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12dd-p-eps_x", "ipc::NormalCollision::mollifier_gradient::eps_x", "The mollifier's threshold."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12d-p-positions", "ipc::NormalCollision::mollifier_gradient::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12dd-p-positions", "ipc::NormalCollision::mollifier_gradient::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d", "ipc::NormalCollision::mollifier_gradient_jacobian_wrt_x", "Compute the jacobian of the distance mollifier's gradient w.r.t."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d-p-positions", "ipc::NormalCollision::mollifier_gradient_jacobian_wrt_x::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d-p-rest_positions", "ipc::NormalCollision::mollifier_gradient_jacobian_wrt_x::rest_positions", "The stencil's rest vertex positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d", "ipc::NormalCollision::mollifier_gradient_wrt_x", "Compute the gradient of the mollifier for the distance w.r.t."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d-p-positions", "ipc::NormalCollision::mollifier_gradient_wrt_x::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d-p-rest_positions", "ipc::NormalCollision::mollifier_gradient_wrt_x::rest_positions", "The stencil's rest vertex positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12d", "ipc::NormalCollision::mollifier_hessian", "Compute the Hessian of the mollifier for the distance wrt the positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12dd", "ipc::NormalCollision::mollifier_hessian", "Compute the Hessian of the mollifier for the distance wrt the positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12dd-p-eps_x", "ipc::NormalCollision::mollifier_hessian::eps_x", "The mollifier's threshold."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12d-p-positions", "ipc::NormalCollision::mollifier_hessian::positions", "The stencil's vertex positions."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12dd-p-positions", "ipc::NormalCollision::mollifier_hessian::positions", "The stencil's vertex positions."], [13, 1, 1, "_CPPv4NK3ipc15NormalCollision19mollifier_thresholdERK12VectorMax12d", "ipc::NormalCollision::mollifier_threshold", "Compute the mollifier threshold for the distance."], [13, 2, 2, "_CPPv4NK3ipc15NormalCollision19mollifier_thresholdERK12VectorMax12d-p-rest_positions", "ipc::NormalCollision::mollifier_threshold::rest_positions", "The stencil's rest vertex positions."], [13, 3, 1, "_CPPv4N3ipc15NormalCollision6weightE", "ipc::NormalCollision::weight", "The term's weight (e.g., collision area)"], [13, 3, 1, "_CPPv4N3ipc15NormalCollision15weight_gradientE", "ipc::NormalCollision::weight_gradient", "The gradient of the term's weight wrt the rest positions."], [13, 1, 1, "_CPPv4N3ipc15NormalCollisionD0Ev", "ipc::NormalCollision::~NormalCollision", ""], [13, 0, 1, "_CPPv4N3ipc16NormalCollisionsE", "ipc::NormalCollisions", "The type of the collisions."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions16NormalCollisionsEv", "ipc::NormalCollisions::NormalCollisions", ""], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd", "ipc::NormalCollisions::build", "Initialize the set of collisions used to compute the barrier potential."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod", "ipc::NormalCollisions::build", "Initialize the set of collisions used to compute the barrier potential."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod-p-broad_phase_method", "ipc::NormalCollisions::build::broad_phase_method", "Broad-phase method to use."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd-p-candidates", "ipc::NormalCollisions::build::candidates", "Distance candidates from which the collision set is built."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd-p-dhat", "ipc::NormalCollisions::build::dhat", "The activation distance of the barrier."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod-p-dhat", "ipc::NormalCollisions::build::dhat", "The activation distance of the barrier."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd-p-dmin", "ipc::NormalCollisions::build::dmin", "Minimum distance."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod-p-dmin", "ipc::NormalCollisions::build::dmin", "Minimum distance."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd-p-mesh", "ipc::NormalCollisions::build::mesh", "The collision mesh."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod-p-mesh", "ipc::NormalCollisions::build::mesh", "The collision mesh."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd-p-vertices", "ipc::NormalCollisions::build::vertices", "Vertices of the collision mesh."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod-p-vertices", "ipc::NormalCollisions::build::vertices", "Vertices of the collision mesh."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions5clearEv", "ipc::NormalCollisions::clear", "Clear the collision set."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions24compute_minimum_distanceERK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::NormalCollisions::compute_minimum_distance", "Computes the minimum distance between any non-adjacent elements."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions24compute_minimum_distanceERK13CollisionMeshRKN5Eigen8MatrixXdE-p-mesh", "ipc::NormalCollisions::compute_minimum_distance::mesh", "The collision mesh."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions24compute_minimum_distanceERK13CollisionMeshRKN5Eigen8MatrixXdE-p-vertices", "ipc::NormalCollisions::compute_minimum_distance::vertices", "Vertices of the collision mesh."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions13ee_collisionsE", "ipc::NormalCollisions::ee_collisions", "Edge-edge normal collisions."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions5emptyEv", "ipc::NormalCollisions::empty", "Get if the collision set are empty."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions24enable_shape_derivativesEv", "ipc::NormalCollisions::enable_shape_derivatives", "Get if the collision set are using the convergent formulation."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions13ev_collisionsE", "ipc::NormalCollisions::ev_collisions", "Edge-vertex normal collisions."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions13fv_collisionsE", "ipc::NormalCollisions::fv_collisions", "Face-vertex normal collisions."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions12is_edge_edgeE6size_t", "ipc::NormalCollisions::is_edge_edge", "Get if the collision at i is an edge-edge collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions12is_edge_edgeE6size_t-p-i", "ipc::NormalCollisions::is_edge_edge::i", "The index of the collision."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions14is_edge_vertexE6size_t", "ipc::NormalCollisions::is_edge_vertex", "Get if the collision at i is an edge-vertex collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions14is_edge_vertexE6size_t-p-i", "ipc::NormalCollisions::is_edge_vertex::i", "The index of the collision."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions14is_face_vertexE6size_t", "ipc::NormalCollisions::is_face_vertex", "Get if the collision at i is an face-vertex collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions14is_face_vertexE6size_t-p-i", "ipc::NormalCollisions::is_face_vertex::i", "The index of the collision."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions15is_plane_vertexE6size_t", "ipc::NormalCollisions::is_plane_vertex", "Get if the collision at i is an plane-vertex collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions15is_plane_vertexE6size_t-p-i", "ipc::NormalCollisions::is_plane_vertex::i", "The index of the collision."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions16is_vertex_vertexE6size_t", "ipc::NormalCollisions::is_vertex_vertex", "Get if the collision at i is a vertex-vertex collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions16is_vertex_vertexE6size_t-p-i", "ipc::NormalCollisions::is_vertex_vertex::i", "The index of the collision."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions26m_enable_shape_derivativesE", "ipc::NormalCollisions::m_enable_shape_derivatives", ""], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions20m_use_area_weightingE", "ipc::NormalCollisions::m_use_area_weighting", ""], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions31m_use_improved_max_approximatorE", "ipc::NormalCollisions::m_use_improved_max_approximator", ""], [13, 1, 1, "_CPPv4N3ipc16NormalCollisionsixE6size_t", "ipc::NormalCollisions::operator[]", "Get a reference to collision at index i."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisionsixE6size_t", "ipc::NormalCollisions::operator[]", "Get a const reference to collision at index i."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisionsixE6size_t-p-i", "ipc::NormalCollisions::operator[]::i", "The index of the collision."], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisionsixE6size_t-p-i", "ipc::NormalCollisions::operator[]::i", "The index of the collision."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions13pv_collisionsE", "ipc::NormalCollisions::pv_collisions", "Plane-vertex normal collisions."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions28set_enable_shape_derivativesEKb", "ipc::NormalCollisions::set_enable_shape_derivatives", "Set if the collision set should enable shape derivative computation."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions28set_enable_shape_derivativesEKb-p-enable_shape_derivatives", "ipc::NormalCollisions::set_enable_shape_derivatives::enable_shape_derivatives", "If the collision set should enable shape derivative computation."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions22set_use_area_weightingEKb", "ipc::NormalCollisions::set_use_area_weighting", "Set if the collision set should use area weighting."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions22set_use_area_weightingEKb-p-use_area_weighting", "ipc::NormalCollisions::set_use_area_weighting::use_area_weighting", "If the collision set should use area weighting."], [13, 1, 1, "_CPPv4N3ipc16NormalCollisions33set_use_improved_max_approximatorEKb", "ipc::NormalCollisions::set_use_improved_max_approximator", "Set if the collision set should use the improved max approximator."], [13, 2, 2, "_CPPv4N3ipc16NormalCollisions33set_use_improved_max_approximatorEKb-p-use_improved_max_approximator", "ipc::NormalCollisions::set_use_improved_max_approximator::use_improved_max_approximator", "If the collision set should use the improved max approximator."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions4sizeEv", "ipc::NormalCollisions::size", "Get the number of collisions."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions9to_stringERK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::NormalCollisions::to_string", ""], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions9to_stringERK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::NormalCollisions::to_string::mesh", ""], [13, 2, 2, "_CPPv4NK3ipc16NormalCollisions9to_stringERK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::NormalCollisions::to_string::vertices", ""], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions18use_area_weightingEv", "ipc::NormalCollisions::use_area_weighting", "Get if the collision set should use area weighting."], [13, 1, 1, "_CPPv4NK3ipc16NormalCollisions29use_improved_max_approximatorEv", "ipc::NormalCollisions::use_improved_max_approximator", "Get if the collision set should use the improved max approximator."], [13, 6, 1, "_CPPv4N3ipc16NormalCollisions10value_typeE", "ipc::NormalCollisions::value_type", "The type of the collisions."], [13, 3, 1, "_CPPv4N3ipc16NormalCollisions13vv_collisionsE", "ipc::NormalCollisions::vv_collisions", "Vertex-vertex normal collisions."], [14, 0, 1, "_CPPv4N3ipc15NormalPotentialE", "ipc::NormalPotential", "Inheritence diagram for ipc::NormalPotential:"], [14, 1, 1, "_CPPv4N3ipc15NormalPotential15NormalPotentialEv", "ipc::NormalPotential::NormalPotential", ""], [14, 6, 1, "_CPPv4N3ipc15NormalPotential5SuperE", "ipc::NormalPotential::Super", ""], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential15force_magnitudeEKdKdKd", "ipc::NormalPotential::force_magnitude", "Compute the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential15force_magnitudeEKdKdKd-p-barrier_stiffness", "ipc::NormalPotential::force_magnitude::barrier_stiffness", "The barrier stiffness."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential15force_magnitudeEKdKdKd-p-distance_squared", "ipc::NormalPotential::force_magnitude::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential15force_magnitudeEKdKdKd-p-dmin", "ipc::NormalPotential::force_magnitude::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd", "ipc::NormalPotential::force_magnitude_gradient", "Compute the gradient of the force magnitude for a collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-barrier_stiffness", "ipc::NormalPotential::force_magnitude_gradient::barrier_stiffness", "The stiffness of the barrier."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared", "ipc::NormalPotential::force_magnitude_gradient::distance_squared", "The squared distance between elements."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-distance_squared_gradient", "ipc::NormalPotential::force_magnitude_gradient::distance_squared_gradient", "The gradient of the squared distance."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd-p-dmin", "ipc::NormalPotential::force_magnitude_gradient::dmin", "The minimum distance offset to the barrier."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential8gradientEKdKd", "ipc::NormalPotential::gradient", "Compute the gradient of the unmollified distance-based potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential8gradientERK15NormalCollisionRK12VectorMax12d", "ipc::NormalPotential::gradient", "Compute the gradient of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-collision", "ipc::NormalPotential::gradient::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential8gradientEKdKd-p-distance_squared", "ipc::NormalPotential::gradient::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential8gradientEKdKd-p-dmin", "ipc::NormalPotential::gradient::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential8gradientERK15NormalCollisionRK12VectorMax12d-p-positions", "ipc::NormalPotential::gradient::positions", "The collision stencil's positions."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential7hessianEKdKd", "ipc::NormalPotential::hessian", "Compute the hessian of the unmollified distance-based potential for a collision."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::NormalPotential::hessian", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::NormalPotential::hessian::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential7hessianEKdKd-p-distance_squared", "ipc::NormalPotential::hessian::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential7hessianEKdKd-p-dmin", "ipc::NormalPotential::hessian::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod-p-positions", "ipc::NormalPotential::hessian::positions", "The collision stencil's positions."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::NormalPotential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotentialclEKdKd", "ipc::NormalPotential::operator()", "Compute the unmollified distance-based potential for a collisions."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotentialclERK15NormalCollisionRK12VectorMax12d", "ipc::NormalPotential::operator()", "Compute the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotentialclERK15NormalCollisionRK12VectorMax12d-p-collision", "ipc::NormalPotential::operator()::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotentialclEKdKd-p-distance_squared", "ipc::NormalPotential::operator()::distance_squared", "The distance (squared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotentialclEKdKd-p-dmin", "ipc::NormalPotential::operator()::dmin", "The minimum distance (unsquared) between the two objects."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotentialclERK15NormalCollisionRK12VectorMax12d-p-positions", "ipc::NormalPotential::operator()::positions", "The collision stencil's positions."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE", "ipc::NormalPotential::shape_derivative", "Compute the shape derivative of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK16NormalCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::NormalPotential::shape_derivative", "Compute the shape derivative of the potential."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE-p-collision", "ipc::NormalPotential::shape_derivative::collision", "[in] The collision."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK16NormalCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-collisions", "ipc::NormalPotential::shape_derivative::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK16NormalCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-mesh", "ipc::NormalPotential::shape_derivative::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE-p-out", "ipc::NormalPotential::shape_derivative::out", "[inout] Store the triplets of the shape derivative here."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE-p-positions", "ipc::NormalPotential::shape_derivative::positions", "[in] The collision stencil's positions."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE-p-rest_positions", "ipc::NormalPotential::shape_derivative::rest_positions", "[in] The collision stencil's rest positions."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE-p-vertex_ids", "ipc::NormalPotential::shape_derivative::vertex_ids", "[in] The collision stencil's vertex ids."], [14, 2, 2, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK16NormalCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-vertices", "ipc::NormalPotential::shape_derivative::vertices", "Vertices of the collision mesh."], [14, 1, 1, "_CPPv4N3ipc15NormalPotentialD0Ev", "ipc::NormalPotential::~NormalPotential", ""], [17, 7, 1, "_CPPv4N3ipc19PSDProjectionMethodE", "ipc::PSDProjectionMethod", "Enumeration of implemented PSD projection methods."], [17, 8, 1, "_CPPv4N3ipc19PSDProjectionMethod3ABSE", "ipc::PSDProjectionMethod::ABS", "Flip negative eigenvalues to positive."], [17, 8, 1, "_CPPv4N3ipc19PSDProjectionMethod5CLAMPE", "ipc::PSDProjectionMethod::CLAMP", "Clamp negative eigenvalues to zero."], [17, 8, 1, "_CPPv4N3ipc19PSDProjectionMethod4NONEE", "ipc::PSDProjectionMethod::NONE", "No PSD projection."], [13, 0, 1, "_CPPv4N3ipc26PlaneVertexNormalCollisionE", "ipc::PlaneVertexNormalCollision", "Inheritence diagram for ipc::PlaneVertexNormalCollision:"], [13, 1, 1, "_CPPv4N3ipc26PlaneVertexNormalCollision26PlaneVertexNormalCollisionERK11VectorMax3dRK11VectorMax3dKl", "ipc::PlaneVertexNormalCollision::PlaneVertexNormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc26PlaneVertexNormalCollision26PlaneVertexNormalCollisionERK11VectorMax3dRK11VectorMax3dKl", "ipc::PlaneVertexNormalCollision::PlaneVertexNormalCollision::plane_normal", ""], [13, 2, 2, "_CPPv4N3ipc26PlaneVertexNormalCollision26PlaneVertexNormalCollisionERK11VectorMax3dRK11VectorMax3dKl", "ipc::PlaneVertexNormalCollision::PlaneVertexNormalCollision::plane_origin", ""], [13, 2, 2, "_CPPv4N3ipc26PlaneVertexNormalCollision26PlaneVertexNormalCollisionERK11VectorMax3dRK11VectorMax3dKl", "ipc::PlaneVertexNormalCollision::PlaneVertexNormalCollision::vertex_id", ""], [13, 1, 1, "_CPPv4NK3ipc26PlaneVertexNormalCollision16compute_distanceERK12VectorMax12d", "ipc::PlaneVertexNormalCollision::compute_distance", "Compute the distance between the point and plane."], [13, 2, 2, "_CPPv4NK3ipc26PlaneVertexNormalCollision16compute_distanceERK12VectorMax12d-p-point", "ipc::PlaneVertexNormalCollision::compute_distance::point", "Point's position."], [13, 1, 1, "_CPPv4NK3ipc26PlaneVertexNormalCollision25compute_distance_gradientERK12VectorMax12d", "ipc::PlaneVertexNormalCollision::compute_distance_gradient", "Compute the gradient of the distance w.r.t."], [13, 2, 2, "_CPPv4NK3ipc26PlaneVertexNormalCollision25compute_distance_gradientERK12VectorMax12d-p-point", "ipc::PlaneVertexNormalCollision::compute_distance_gradient::point", "Point's position."], [13, 1, 1, "_CPPv4NK3ipc26PlaneVertexNormalCollision24compute_distance_hessianERK12VectorMax12d", "ipc::PlaneVertexNormalCollision::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [13, 2, 2, "_CPPv4NK3ipc26PlaneVertexNormalCollision24compute_distance_hessianERK12VectorMax12d-p-point", "ipc::PlaneVertexNormalCollision::compute_distance_hessian::point", "Point's position."], [13, 1, 1, "_CPPv4NK3ipc26PlaneVertexNormalCollision12num_verticesEv", "ipc::PlaneVertexNormalCollision::num_vertices", "Get the number of vertices in the collision stencil."], [13, 3, 1, "_CPPv4N3ipc26PlaneVertexNormalCollision12plane_normalE", "ipc::PlaneVertexNormalCollision::plane_normal", "The plane's normal."], [13, 3, 1, "_CPPv4N3ipc26PlaneVertexNormalCollision12plane_originE", "ipc::PlaneVertexNormalCollision::plane_origin", "The plane's origin."], [13, 3, 1, "_CPPv4N3ipc26PlaneVertexNormalCollision9vertex_idE", "ipc::PlaneVertexNormalCollision::vertex_id", "The vertex's id."], [13, 1, 1, "_CPPv4NK3ipc26PlaneVertexNormalCollision10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::PlaneVertexNormalCollision::vertex_ids", "Get the vertex IDs of the collision stencil."], [13, 2, 2, "_CPPv4NK3ipc26PlaneVertexNormalCollision10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::PlaneVertexNormalCollision::vertex_ids::edges", "Collision mesh edges"], [13, 2, 2, "_CPPv4NK3ipc26PlaneVertexNormalCollision10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::PlaneVertexNormalCollision::vertex_ids::faces", "Collision mesh faces"], [10, 7, 1, "_CPPv4N3ipc21PointEdgeDistanceTypeE", "ipc::PointEdgeDistanceType", "Closest pair between a point and edge."], [10, 8, 1, "_CPPv4N3ipc21PointEdgeDistanceType4AUTOE", "ipc::PointEdgeDistanceType::AUTO", "Automatically determine the closest pair."], [10, 8, 1, "_CPPv4N3ipc21PointEdgeDistanceType3P_EE", "ipc::PointEdgeDistanceType::P_E", "The point is closest to the interior of the edge."], [10, 8, 1, "_CPPv4N3ipc21PointEdgeDistanceType4P_E0E", "ipc::PointEdgeDistanceType::P_E0", "The point is closest to edge vertex zero."], [10, 8, 1, "_CPPv4N3ipc21PointEdgeDistanceType4P_E1E", "ipc::PointEdgeDistanceType::P_E1", "The point is closest to edge vertex one."], [10, 7, 1, "_CPPv4N3ipc25PointTriangleDistanceTypeE", "ipc::PointTriangleDistanceType", "Closest pair between a point and triangle."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4AUTOE", "ipc::PointTriangleDistanceType::AUTO", "Automatically determine the closest pair."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_E0E", "ipc::PointTriangleDistanceType::P_E0", "The point is closest to triangle edge zero (vertex zero to one)."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_E1E", "ipc::PointTriangleDistanceType::P_E1", "The point is closest to triangle edge one (vertex one to two)."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_E2E", "ipc::PointTriangleDistanceType::P_E2", "The point is closest to triangle edge two (vertex two to zero)."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType3P_TE", "ipc::PointTriangleDistanceType::P_T", "The point is closest to the interior of the triangle."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_T0E", "ipc::PointTriangleDistanceType::P_T0", "The point is closest to triangle vertex zero."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_T1E", "ipc::PointTriangleDistanceType::P_T1", "The point is closest to triangle vertex one."], [10, 8, 1, "_CPPv4N3ipc25PointTriangleDistanceType4P_T2E", "ipc::PointTriangleDistanceType::P_T2", "The point is closest to triangle vertex two."], [14, 0, 1, "_CPPv4I0EN3ipc9PotentialE", "ipc::Potential", "Base class for potentials."], [14, 1, 1, "_CPPv4N3ipc9Potential9PotentialEv", "ipc::Potential::Potential", ""], [14, 6, 1, "_CPPv4N3ipc9Potential10TCollisionE", "ipc::Potential::TCollision", ""], [14, 4, 2, "_CPPv4I0EN3ipc9PotentialE-p-TCollisions", "ipc::Potential::TCollisions", "The type of the collisions."], [14, 1, 1, "_CPPv4NK3ipc9Potential8gradientERK10TCollisionRK12VectorMax12d", "ipc::Potential::gradient", "Compute the gradient of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc9Potential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::Potential::gradient", "Compute the gradient of the potential."], [14, 2, 2, "_CPPv4NK3ipc9Potential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-X", "ipc::Potential::gradient::X", "Degrees of freedom of the collision mesh (e.g., vertices or velocities)."], [14, 2, 2, "_CPPv4NK3ipc9Potential8gradientERK10TCollisionRK12VectorMax12d-p-collision", "ipc::Potential::gradient::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc9Potential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-collisions", "ipc::Potential::gradient::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc9Potential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-mesh", "ipc::Potential::gradient::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc9Potential8gradientERK10TCollisionRK12VectorMax12d-p-x", "ipc::Potential::gradient::x", "The collision stencil's degrees of freedom."], [14, 1, 1, "_CPPv4NK3ipc9Potential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::Potential::hessian", "Compute the hessian of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod", "ipc::Potential::hessian", "Compute the hessian of the potential."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-X", "ipc::Potential::hessian::X", "Degrees of freedom of the collision mesh (e.g., vertices or velocities)."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::Potential::hessian::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-collisions", "ipc::Potential::hessian::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-mesh", "ipc::Potential::hessian::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::Potential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-project_hessian_to_psd", "ipc::Potential::hessian::project_hessian_to_psd", "Make sure the hessian is positive semi-definite."], [14, 2, 2, "_CPPv4NK3ipc9Potential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod-p-x", "ipc::Potential::hessian::x", "The collision stencil's degrees of freedom."], [14, 1, 1, "_CPPv4NK3ipc9PotentialclERK10TCollisionRK12VectorMax12d", "ipc::Potential::operator()", "Compute the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc9PotentialclERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::Potential::operator()", "Compute the potential for a set of collisions."], [14, 2, 2, "_CPPv4NK3ipc9PotentialclERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-X", "ipc::Potential::operator()::X", "Degrees of freedom of the collision mesh (e.g., vertices or velocities)."], [14, 2, 2, "_CPPv4NK3ipc9PotentialclERK10TCollisionRK12VectorMax12d-p-collision", "ipc::Potential::operator()::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc9PotentialclERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-collisions", "ipc::Potential::operator()::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc9PotentialclERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-mesh", "ipc::Potential::operator()::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc9PotentialclERK10TCollisionRK12VectorMax12d-p-x", "ipc::Potential::operator()::x", "The collision stencil's degrees of freedom."], [14, 1, 1, "_CPPv4N3ipc9PotentialD0Ev", "ipc::Potential::~Potential", ""], [6, 0, 1, "_CPPv4N3ipc11SpatialHashE", "ipc::SpatialHash", "Build the broad phase for static collision detection."], [6, 1, 1, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash", ""], [6, 1, 1, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash", ""], [6, 1, 1, "_CPPv4N3ipc11SpatialHash11SpatialHashEv", "ipc::SpatialHash::SpatialHash", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::edges", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::edges", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::faces", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::faces", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::inflation_radius", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::inflation_radius", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::vertices", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::vertices_t0", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::vertices_t1", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::voxel_size", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::SpatialHash::voxel_size", ""], [6, 1, 1, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::SpatialHash::build", "Build the broad phase for continuous collision detection."], [6, 1, 1, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build", ""], [6, 1, 1, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::SpatialHash::build", "Build the broad phase for static collision detection."], [6, 1, 1, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::SpatialHash::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::edges", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::SpatialHash::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::edges", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::SpatialHash::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::faces", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::SpatialHash::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::faces", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::SpatialHash::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::inflation_radius", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::SpatialHash::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::inflation_radius", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices", "ipc::SpatialHash::build::vertices", "Vertex positions"], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::vertices", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t0", "ipc::SpatialHash::build::vertices_t0", "Starting vertices of the vertices."], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::vertices_t0", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t1", "ipc::SpatialHash::build::vertices_t1", "Ending vertices of the vertices."], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::vertices_t1", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::voxel_size", ""], [6, 2, 2, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd", "ipc::SpatialHash::build::voxel_size", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash15built_in_radiusE", "ipc::SpatialHash::built_in_radius", ""], [6, 1, 1, "_CPPv4N3ipc11SpatialHash5clearEv", "ipc::SpatialHash::clear", "Clear any built data."], [6, 1, 1, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE", "ipc::SpatialHash::detect_candidates", "Detect candidate collisions between type A and type A."], [6, 1, 1, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE", "ipc::SpatialHash::detect_candidates", "Detect candidate collisions between type A and type B."], [6, 4, 2, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::SpatialHash::detect_candidates::Candidate", "Type of candidate collision."], [6, 4, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-Candidate", "ipc::SpatialHash::detect_candidates::Candidate", "Type of candidate collision."], [6, 2, 2, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-boxesA", "ipc::SpatialHash::detect_candidates::boxesA", "[in] The boxes of type A to detect collisions with."], [6, 2, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-boxesA", "ipc::SpatialHash::detect_candidates::boxesA", "[in] The boxes of type A to detect collisions with."], [6, 2, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-boxesB", "ipc::SpatialHash::detect_candidates::boxesB", "[in] The boxes of type B to detect collisions with."], [6, 2, 2, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::SpatialHash::detect_candidates::can_collide", "[in] Function to determine if two primitives can collide given their ids."], [6, 2, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-can_collide", "ipc::SpatialHash::detect_candidates::can_collide", "[in] Function to determine if two primitives can collide given their ids."], [6, 2, 2, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::SpatialHash::detect_candidates::candidates", "[out] The candidate collisions."], [6, 2, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-candidates", "ipc::SpatialHash::detect_candidates::candidates", "[out] The candidate collisions."], [6, 2, 2, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-query_A_for_As", "ipc::SpatialHash::detect_candidates::query_A_for_As", "[in] Function to query boxes of type A for boxes of type A."], [6, 2, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-query_A_for_Bs", "ipc::SpatialHash::detect_candidates::query_A_for_Bs", "[in] Function to query boxes of type B for boxes of type A."], [6, 5, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-swap_order", "ipc::SpatialHash::detect_candidates::swap_order", "Whether to swap the order of A and B when adding to the candidates."], [6, 5, 2, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE-p-triangular", "ipc::SpatialHash::detect_candidates::triangular", "Whether to consider (i, j) and (j, i) as the same."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::SpatialHash::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::SpatialHash::detect_edge_edge_candidates::candidates", "Find the candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::SpatialHash::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::SpatialHash::detect_edge_face_candidates::candidates", "Find the candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::SpatialHash::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::SpatialHash::detect_edge_vertex_candidates::candidates", "Find the candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::SpatialHash::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::SpatialHash::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::SpatialHash::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::SpatialHash::detect_face_vertex_candidates::candidates", "Find the candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::SpatialHash::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::SpatialHash::detect_vertex_vertex_candidates::candidates", "Find the candidate vertex-vertex collisions."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash3dimE", "ipc::SpatialHash::dim", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash14edge_start_indE", "ipc::SpatialHash::edge_start_ind", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash14edge_to_voxelsE", "ipc::SpatialHash::edge_to_voxels", "Map from edge index to the voxel indices it occupies."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash14face_to_voxelsE", "ipc::SpatialHash::face_to_voxels", "Map from face index to the voxel indices it occupies."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash13is_edge_indexEi", "ipc::SpatialHash::is_edge_index", "Check if primitive index refers to an edge."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash13is_edge_indexEi", "ipc::SpatialHash::is_edge_index::idx", "Check if primitive index refers to an edge."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash17is_triangle_indexEi", "ipc::SpatialHash::is_triangle_index", "Check if primitive index refers to a triangle."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash17is_triangle_indexEi", "ipc::SpatialHash::is_triangle_index::idx", "Check if primitive index refers to a triangle."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash15is_vertex_indexEi", "ipc::SpatialHash::is_vertex_index", "Check if primitive index refers to a vertex."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash15is_vertex_indexEi", "ipc::SpatialHash::is_vertex_index::idx", "Check if primitive index refers to a vertex."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash18left_bottom_cornerE", "ipc::SpatialHash::left_bottom_corner", "The left bottom corner of the world bounding box."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index::inflation_radius", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index::max_corner", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index::max_index", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index::min_corner", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd", "ipc::SpatialHash::locate_box_voxel_axis_index::min_index", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash23locate_voxel_axis_indexERK11VectorMax3d", "ipc::SpatialHash::locate_voxel_axis_index", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash23locate_voxel_axis_indexERK11VectorMax3d", "ipc::SpatialHash::locate_voxel_axis_index::p", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash18locate_voxel_indexERK11VectorMax3d", "ipc::SpatialHash::locate_voxel_index", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash18locate_voxel_indexERK11VectorMax3d", "ipc::SpatialHash::locate_voxel_index::p", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash17one_div_voxelSizeE", "ipc::SpatialHash::one_div_voxelSize", "1.0 / voxel_size"], [6, 3, 1, "_CPPv4N3ipc11SpatialHash15point_to_voxelsE", "ipc::SpatialHash::point_to_voxels", "Map from point index to the voxel indices it occupies."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash20query_edge_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_edges", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash20query_edge_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_edges::eai", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash20query_edge_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_edges::edge_inds", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash24query_edge_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_triangles", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash24query_edge_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_triangles::ei", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash24query_edge_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_edge_for_triangles::tri_inds", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash21query_point_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_edges", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash21query_point_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_edges::edge_inds", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash21query_point_for_edgesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_edges::vi", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash22query_point_for_pointsEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_points", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash22query_point_for_pointsEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_points::vert_inds", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash22query_point_for_pointsEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_points::vi", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash25query_point_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_triangles", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash25query_point_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_triangles::tri_inds", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash25query_point_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_point_for_triangles::vi", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash28query_triangle_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_triangle_for_triangles", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash28query_triangle_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_triangle_for_triangles::ti", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash28query_triangle_for_trianglesEiR13unordered_setIiE", "ipc::SpatialHash::query_triangle_for_triangles::tri_inds", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash16right_top_cornerE", "ipc::SpatialHash::right_top_corner", "The right top corner of the world bounding box."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash13to_edge_indexEi", "ipc::SpatialHash::to_edge_index", "Convert a primitive index to an edge index."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash13to_edge_indexEi", "ipc::SpatialHash::to_edge_index::idx", "Convert a primitive index to an edge index."], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash17to_triangle_indexEi", "ipc::SpatialHash::to_triangle_index", "Convert a primitive index to a triangle index."], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash17to_triangle_indexEi", "ipc::SpatialHash::to_triangle_index::idx", "Convert a primitive index to a triangle index."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash13tri_start_indE", "ipc::SpatialHash::tri_start_ind", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexERK10ArrayMax3i", "ipc::SpatialHash::voxel_axis_index_to_voxel_index", ""], [6, 1, 1, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexEiii", "ipc::SpatialHash::voxel_axis_index_to_voxel_index", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexEiii", "ipc::SpatialHash::voxel_axis_index_to_voxel_index::ix", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexEiii", "ipc::SpatialHash::voxel_axis_index_to_voxel_index::iy", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexEiii", "ipc::SpatialHash::voxel_axis_index_to_voxel_index::iz", ""], [6, 2, 2, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexERK10ArrayMax3i", "ipc::SpatialHash::voxel_axis_index_to_voxel_index::voxel_axis_index", ""], [6, 3, 1, "_CPPv4N3ipc11SpatialHash11voxel_countE", "ipc::SpatialHash::voxel_count", "The number of voxels in each dimension."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash15voxel_count_0x1E", "ipc::SpatialHash::voxel_count_0x1", "The number of voxels in the first two dimensions."], [6, 3, 1, "_CPPv4N3ipc11SpatialHash19voxel_to_primitivesE", "ipc::SpatialHash::voxel_to_primitives", "Map from voxel index to the primitive indices it contains."], [6, 0, 1, "_CPPv4N3ipc13SweepAndPruneE", "ipc::SweepAndPrune", "Build the broad phase for static collision detection."], [6, 1, 1, "_CPPv4N3ipc13SweepAndPrune13SweepAndPruneEv", "ipc::SweepAndPrune::SweepAndPrune", ""], [6, 1, 1, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::SweepAndPrune::build", "Build the broad phase for continuous collision detection."], [6, 1, 1, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd", "ipc::SweepAndPrune::build", "Build the broad phase for static collision detection."], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::SweepAndPrune::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-edges", "ipc::SweepAndPrune::build::edges", "Collision mesh edges"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::SweepAndPrune::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-faces", "ipc::SweepAndPrune::build::faces", "Collision mesh faces"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::SweepAndPrune::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-inflation_radius", "ipc::SweepAndPrune::build::inflation_radius", "Radius of inflation around all elements."], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices", "ipc::SweepAndPrune::build::vertices", "Vertex positions"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t0", "ipc::SweepAndPrune::build::vertices_t0", "Starting vertex positions"], [6, 2, 2, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd-p-vertices_t1", "ipc::SweepAndPrune::build::vertices_t1", "Ending vertex positions"], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune21can_edge_face_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_face_collide", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune21can_edge_face_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_face_collide::ei", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune21can_edge_face_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_face_collide::fi", ""], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune23can_edge_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_vertex_collide", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune23can_edge_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_vertex_collide::ei", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune23can_edge_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edge_vertex_collide::vi", ""], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune17can_edges_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edges_collide", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune17can_edges_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edges_collide::eai", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune17can_edges_collideE6size_t6size_t", "ipc::SweepAndPrune::can_edges_collide::ebi", ""], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune23can_face_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_face_vertex_collide", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune23can_face_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_face_vertex_collide::fi", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune23can_face_vertex_collideE6size_t6size_t", "ipc::SweepAndPrune::can_face_vertex_collide::vi", ""], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune17can_faces_collideE6size_t6size_t", "ipc::SweepAndPrune::can_faces_collide", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune17can_faces_collideE6size_t6size_t", "ipc::SweepAndPrune::can_faces_collide::fai", ""], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune17can_faces_collideE6size_t6size_t", "ipc::SweepAndPrune::can_faces_collide::fbi", ""], [6, 1, 1, "_CPPv4N3ipc13SweepAndPrune5clearEv", "ipc::SweepAndPrune::clear", "Clear any built data."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE", "ipc::SweepAndPrune::detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_edge_edge_candidates::candidates", "[out] The candidate edge-edge collisions."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE", "ipc::SweepAndPrune::detect_edge_face_candidates", "Find the candidate edge-face intersections."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_edge_face_candidates::candidates", "[out] The candidate edge-face intersections."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE", "ipc::SweepAndPrune::detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_edge_vertex_candidates::candidates", "[out] The candidate edge-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE", "ipc::SweepAndPrune::detect_face_face_candidates", "Find the candidate face-face collisions."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_face_face_candidates::candidates", "[out] The candidate face-face collisions."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE", "ipc::SweepAndPrune::detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_face_vertex_candidates::candidates", "[out] The candidate face-vertex collisions."], [6, 1, 1, "_CPPv4NK3ipc13SweepAndPrune31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE", "ipc::SweepAndPrune::detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [6, 2, 2, "_CPPv4NK3ipc13SweepAndPrune31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE-p-candidates", "ipc::SweepAndPrune::detect_vertex_vertex_candidates::candidates", "[out] The candidate vertex-vertex collisions."], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune10edge_boxesE", "ipc::SweepAndPrune::edge_boxes", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12ee_sort_axisE", "ipc::SweepAndPrune::ee_sort_axis", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12ef_sort_axisE", "ipc::SweepAndPrune::ef_sort_axis", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12ev_sort_axisE", "ipc::SweepAndPrune::ev_sort_axis", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune10face_boxesE", "ipc::SweepAndPrune::face_boxes", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12ff_sort_axisE", "ipc::SweepAndPrune::ff_sort_axis", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12fv_sort_axisE", "ipc::SweepAndPrune::fv_sort_axis", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12vertex_boxesE", "ipc::SweepAndPrune::vertex_boxes", ""], [6, 3, 1, "_CPPv4N3ipc13SweepAndPrune12vv_sort_axisE", "ipc::SweepAndPrune::vv_sort_axis", ""], [14, 0, 1, "_CPPv4N3ipc27TangentialAdhesionPotentialE", "ipc::TangentialAdhesionPotential", "Inheritence diagram for ipc::TangentialAdhesionPotential:"], [14, 6, 1, "_CPPv4N3ipc27TangentialAdhesionPotential5SuperE", "ipc::TangentialAdhesionPotential::Super", ""], [14, 1, 1, "_CPPv4N3ipc27TangentialAdhesionPotential27TangentialAdhesionPotentialEKd", "ipc::TangentialAdhesionPotential::TangentialAdhesionPotential", "Construct a tangential adhesion potential."], [14, 2, 2, "_CPPv4N3ipc27TangentialAdhesionPotential27TangentialAdhesionPotentialEKd-p-eps_a", "ipc::TangentialAdhesionPotential::TangentialAdhesionPotential::eps_a", "The tangential adhesion mollifier parameter \\epsilon_a."], [14, 1, 1, "_CPPv4NK3ipc27TangentialAdhesionPotential5eps_aEv", "ipc::TangentialAdhesionPotential::eps_a", "Get the tangential adhesion mollifier parameter \\epsilon_a."], [14, 1, 1, "_CPPv4NK3ipc27TangentialAdhesionPotential2f0EKd", "ipc::TangentialAdhesionPotential::f0", ""], [14, 2, 2, "_CPPv4NK3ipc27TangentialAdhesionPotential2f0EKd", "ipc::TangentialAdhesionPotential::f0::x", ""], [14, 1, 1, "_CPPv4NK3ipc27TangentialAdhesionPotential9f1_over_xEKd", "ipc::TangentialAdhesionPotential::f1_over_x", ""], [14, 2, 2, "_CPPv4NK3ipc27TangentialAdhesionPotential9f1_over_xEKd", "ipc::TangentialAdhesionPotential::f1_over_x::x", ""], [14, 1, 1, "_CPPv4NK3ipc27TangentialAdhesionPotential21f2_x_minus_f1_over_x3EKd", "ipc::TangentialAdhesionPotential::f2_x_minus_f1_over_x3", ""], [14, 2, 2, "_CPPv4NK3ipc27TangentialAdhesionPotential21f2_x_minus_f1_over_x3EKd", "ipc::TangentialAdhesionPotential::f2_x_minus_f1_over_x3::x", ""], [14, 1, 1, "_CPPv4NK3ipc27TangentialAdhesionPotential10is_dynamicEKd", "ipc::TangentialAdhesionPotential::is_dynamic", ""], [14, 2, 2, "_CPPv4NK3ipc27TangentialAdhesionPotential10is_dynamicEKd", "ipc::TangentialAdhesionPotential::is_dynamic::speed", ""], [14, 3, 1, "_CPPv4N3ipc27TangentialAdhesionPotential7m_eps_aE", "ipc::TangentialAdhesionPotential::m_eps_a", "The tangential adhesion mollifier parameter \\epsilon_a."], [14, 1, 1, "_CPPv4N3ipc27TangentialAdhesionPotential9set_eps_aEKd", "ipc::TangentialAdhesionPotential::set_eps_a", "Set the tangential adhesion mollifier parameter \\epsilon_v."], [14, 2, 2, "_CPPv4N3ipc27TangentialAdhesionPotential9set_eps_aEKd-p-eps_a", "ipc::TangentialAdhesionPotential::set_eps_a::eps_a", "The tangential adhesion mollifier parameter \\epsilon_v."], [16, 0, 1, "_CPPv4N3ipc19TangentialCollisionE", "ipc::TangentialCollision", "Inheritence diagram for ipc::TangentialCollision:"], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision13closest_pointE", "ipc::TangentialCollision::closest_point", "Barycentric coordinates of the closest point(s)"], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision21compute_closest_pointERK12VectorMax12d", "ipc::TangentialCollision::compute_closest_point", "Compute the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision21compute_closest_pointERK12VectorMax12d-p-positions", "ipc::TangentialCollision::compute_closest_point::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision30compute_closest_point_jacobianERK12VectorMax12d", "ipc::TangentialCollision::compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision30compute_closest_point_jacobianERK12VectorMax12d-p-positions", "ipc::TangentialCollision::compute_closest_point_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision21compute_tangent_basisERK12VectorMax12d", "ipc::TangentialCollision::compute_tangent_basis", "Compute the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision21compute_tangent_basisERK12VectorMax12d-p-positions", "ipc::TangentialCollision::compute_tangent_basis::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d", "ipc::TangentialCollision::compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d-p-positions", "ipc::TangentialCollision::compute_tangent_basis_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision3dimEv", "ipc::TangentialCollision::dim", "Get the dimension of the collision."], [16, 1, 1, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd", "ipc::TangentialCollision::init", "Initialize the collision."], [16, 2, 2, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd-p-barrier_stiffness", "ipc::TangentialCollision::init::barrier_stiffness", "Barrier potential stiffness."], [16, 2, 2, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd-p-collision", "ipc::TangentialCollision::init::collision", "NormalCollision stencil."], [16, 2, 2, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd-p-normal_potential", "ipc::TangentialCollision::init::normal_potential", "Barrier potential used for normal force."], [16, 2, 2, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd-p-positions", "ipc::TangentialCollision::init::positions", "Collision stencil's vertex positions."], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision2muE", "ipc::TangentialCollision::mu", "Ratio between normal and tangential forces (e.g., friction coefficient)"], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision4ndofEv", "ipc::TangentialCollision::ndof", "Get the number of degrees of freedom for the collision."], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision22normal_force_magnitudeE", "ipc::TangentialCollision::normal_force_magnitude", "Normal force magnitude."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision17relative_velocityERK12VectorMax12d", "ipc::TangentialCollision::relative_velocity", "Compute the relative velocity of the collision."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision17relative_velocityERK12VectorMax12d", "ipc::TangentialCollision::relative_velocity::velocities", "Compute the relative velocity of the collision."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision24relative_velocity_matrixERK11VectorMax2d", "ipc::TangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision24relative_velocity_matrixEv", "ipc::TangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision24relative_velocity_matrixERK11VectorMax2d-p-closest_point", "ipc::TangentialCollision::relative_velocity_matrix::closest_point", "Barycentric coordinates of the closest point."], [16, 1, 1, "_CPPv4NK3ipc19TangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d", "ipc::TangentialCollision::relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [16, 2, 2, "_CPPv4NK3ipc19TangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d-p-closest_point", "ipc::TangentialCollision::relative_velocity_matrix_jacobian::closest_point", "Barycentric coordinates of the closest point."], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision13tangent_basisE", "ipc::TangentialCollision::tangent_basis", "Tangent basis of the collision (max size 3\u00d72)"], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision6weightE", "ipc::TangentialCollision::weight", "Weight."], [16, 3, 1, "_CPPv4N3ipc19TangentialCollision15weight_gradientE", "ipc::TangentialCollision::weight_gradient", "Gradient of weight with respect to all DOF."], [16, 1, 1, "_CPPv4N3ipc19TangentialCollisionD0Ev", "ipc::TangentialCollision::~TangentialCollision", ""], [16, 0, 1, "_CPPv4N3ipc20TangentialCollisionsE", "ipc::TangentialCollisions", "The type of the collisions."], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisions20TangentialCollisionsEv", "ipc::TangentialCollisions::TangentialCollisions", ""], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build", ""], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::blend_mu", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::collisions", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::collisions", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::mesh", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::mesh", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::mu", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::mus", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE", "ipc::TangentialCollisions::build::vertices", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd", "ipc::TangentialCollisions::build::vertices", ""], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisions5clearEv", "ipc::TangentialCollisions::clear", "Clear the friction collisions."], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisions16default_blend_muEdd", "ipc::TangentialCollisions::default_blend_mu", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions16default_blend_muEdd", "ipc::TangentialCollisions::default_blend_mu::mu0", ""], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisions16default_blend_muEdd", "ipc::TangentialCollisions::default_blend_mu::mu1", ""], [16, 3, 1, "_CPPv4N3ipc20TangentialCollisions13ee_collisionsE", "ipc::TangentialCollisions::ee_collisions", "Edge-edge tangential collisions."], [16, 1, 1, "_CPPv4NK3ipc20TangentialCollisions5emptyEv", "ipc::TangentialCollisions::empty", "Get if the friction collisions are empty."], [16, 3, 1, "_CPPv4N3ipc20TangentialCollisions13ev_collisionsE", "ipc::TangentialCollisions::ev_collisions", "Edge-vertex tangential collisions."], [16, 3, 1, "_CPPv4N3ipc20TangentialCollisions13fv_collisionsE", "ipc::TangentialCollisions::fv_collisions", "Face-vertex tangential collisions."], [16, 1, 1, "_CPPv4N3ipc20TangentialCollisionsixEK6size_t", "ipc::TangentialCollisions::operator[]", "Get a reference to collision at index i."], [16, 1, 1, "_CPPv4NK3ipc20TangentialCollisionsixEK6size_t", "ipc::TangentialCollisions::operator[]", "Get a const reference to collision at index i."], [16, 2, 2, "_CPPv4N3ipc20TangentialCollisionsixEK6size_t-p-i", "ipc::TangentialCollisions::operator[]::i", "The index of the collision."], [16, 2, 2, "_CPPv4NK3ipc20TangentialCollisionsixEK6size_t-p-i", "ipc::TangentialCollisions::operator[]::i", "The index of the collision."], [16, 1, 1, "_CPPv4NK3ipc20TangentialCollisions4sizeEv", "ipc::TangentialCollisions::size", "Get the number of friction collisions."], [16, 6, 1, "_CPPv4N3ipc20TangentialCollisions10value_typeE", "ipc::TangentialCollisions::value_type", "The type of the collisions."], [16, 3, 1, "_CPPv4N3ipc20TangentialCollisions13vv_collisionsE", "ipc::TangentialCollisions::vv_collisions", "Vertex-vertex tangential collisions."], [14, 0, 1, "_CPPv4N3ipc19TangentialPotentialE", "ipc::TangentialPotential", "Inheritence diagram for ipc::TangentialPotential:"], [14, 7, 1, "_CPPv4N3ipc19TangentialPotential7DiffWRTE", "ipc::TangentialPotential::DiffWRT", "Variable to differentiate the friction force with respect to."], [14, 8, 1, "_CPPv4N3ipc19TangentialPotential7DiffWRT20LAGGED_DISPLACEMENTSE", "ipc::TangentialPotential::DiffWRT::LAGGED_DISPLACEMENTS", "Differentiate w.r.t. lagged displacements."], [14, 8, 1, "_CPPv4N3ipc19TangentialPotential7DiffWRT14REST_POSITIONSE", "ipc::TangentialPotential::DiffWRT::REST_POSITIONS", "Differentiate w.r.t. rest positions."], [14, 8, 1, "_CPPv4N3ipc19TangentialPotential7DiffWRT10VELOCITIESE", "ipc::TangentialPotential::DiffWRT::VELOCITIES", "Differentiate w.r.t. current velocities."], [14, 6, 1, "_CPPv4N3ipc19TangentialPotential5SuperE", "ipc::TangentialPotential::Super", ""], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential2f0EKd", "ipc::TangentialPotential::f0", ""], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential2f0EKd", "ipc::TangentialPotential::f0::x", ""], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential9f1_over_xEKd", "ipc::TangentialPotential::f1_over_x", ""], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential9f1_over_xEKd", "ipc::TangentialPotential::f1_over_x::x", ""], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential21f2_x_minus_f1_over_x3EKd", "ipc::TangentialPotential::f2_x_minus_f1_over_x3", ""], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential21f2_x_minus_f1_over_x3EKd", "ipc::TangentialPotential::f2_x_minus_f1_over_x3::x", ""], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb", "ipc::TangentialPotential::force", "Compute the friction force."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb", "ipc::TangentialPotential::force", "Compute the friction force from the given velocities."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-barrier_potential", "ipc::TangentialPotential::force::barrier_potential", "Barrier potential (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-barrier_potential", "ipc::TangentialPotential::force::barrier_potential", "Barrier potential (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-barrier_stiffness", "ipc::TangentialPotential::force::barrier_stiffness", "Barrier stiffness (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-barrier_stiffness", "ipc::TangentialPotential::force::barrier_stiffness", "Barrier stiffness (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-collision", "ipc::TangentialPotential::force::collision", "The collision"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-collisions", "ipc::TangentialPotential::force::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-dmin", "ipc::TangentialPotential::force::dmin", "Minimum distance (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-dmin", "ipc::TangentialPotential::force::dmin", "Minimum distance (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-lagged_displacements", "ipc::TangentialPotential::force::lagged_displacements", "Previous displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-lagged_displacements", "ipc::TangentialPotential::force::lagged_displacements", "Previous displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-mesh", "ipc::TangentialPotential::force::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-no_mu", "ipc::TangentialPotential::force::no_mu", "Whether to not multiply by mu"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-no_mu", "ipc::TangentialPotential::force::no_mu", "whether to not multiply by mu"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-rest_positions", "ipc::TangentialPotential::force::rest_positions", "Rest positions of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-rest_positions", "ipc::TangentialPotential::force::rest_positions", "Rest positions of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb-p-velocities", "ipc::TangentialPotential::force::velocities", "Current displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb-p-velocities", "ipc::TangentialPotential::force::velocities", "Current displacements of the vertices (rowwise)."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd", "ipc::TangentialPotential::force_jacobian", "Compute the friction force Jacobian."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd", "ipc::TangentialPotential::force_jacobian", "Compute the Jacobian of the friction force wrt the velocities."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-barrier_potential", "ipc::TangentialPotential::force_jacobian::barrier_potential", "Barrier potential (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-barrier_potential", "ipc::TangentialPotential::force_jacobian::barrier_potential", "Barrier potential (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-barrier_stiffness", "ipc::TangentialPotential::force_jacobian::barrier_stiffness", "Barrier stiffness (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-barrier_stiffness", "ipc::TangentialPotential::force_jacobian::barrier_stiffness", "Barrier stiffness (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-collision", "ipc::TangentialPotential::force_jacobian::collision", "The collision"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-collisions", "ipc::TangentialPotential::force_jacobian::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-dmin", "ipc::TangentialPotential::force_jacobian::dmin", "Minimum distance (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-dmin", "ipc::TangentialPotential::force_jacobian::dmin", "Minimum distance (used for normal force magnitude)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-lagged_displacements", "ipc::TangentialPotential::force_jacobian::lagged_displacements", "Previous displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-lagged_displacements", "ipc::TangentialPotential::force_jacobian::lagged_displacements", "Previous displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-mesh", "ipc::TangentialPotential::force_jacobian::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-rest_positions", "ipc::TangentialPotential::force_jacobian::rest_positions", "Rest positions of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-rest_positions", "ipc::TangentialPotential::force_jacobian::rest_positions", "Rest positions of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-velocities", "ipc::TangentialPotential::force_jacobian::velocities", "Current displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-velocities", "ipc::TangentialPotential::force_jacobian::velocities", "Current displacements of the vertices (rowwise)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd-p-wrt", "ipc::TangentialPotential::force_jacobian::wrt", "Variable to differentiate the friction force with respect to."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd-p-wrt", "ipc::TangentialPotential::force_jacobian::wrt", "The variable to take the derivative with respect to."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential8gradientERK10TCollisionRK12VectorMax12d", "ipc::TangentialPotential::gradient", "Compute the gradient of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE", "ipc::TangentialPotential::gradient", "Compute the gradient of the potential."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential8gradientERK19TangentialCollisionRK12VectorMax12d", "ipc::TangentialPotential::gradient", "Compute the gradient of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-X", "ipc::TangentialPotential::gradient::X", "Degrees of freedom of the collision mesh (e.g., vertices or velocities)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK10TCollisionRK12VectorMax12d-p-collision", "ipc::TangentialPotential::gradient::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK19TangentialCollisionRK12VectorMax12d-p-collision", "ipc::TangentialPotential::gradient::collision", "The collision"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-collisions", "ipc::TangentialPotential::gradient::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE-p-mesh", "ipc::TangentialPotential::gradient::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK19TangentialCollisionRK12VectorMax12d-p-velocities", "ipc::TangentialPotential::gradient::velocities", "The collision stencil's velocities."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential8gradientERK10TCollisionRK12VectorMax12d-p-x", "ipc::TangentialPotential::gradient::x", "The collision stencil's degrees of freedom."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::TangentialPotential::hessian", "Compute the hessian of the potential for a single collision."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod", "ipc::TangentialPotential::hessian", "Compute the hessian of the potential."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential7hessianERK19TangentialCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::TangentialPotential::hessian", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-X", "ipc::TangentialPotential::hessian::X", "Degrees of freedom of the collision mesh (e.g., vertices or velocities)."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::TangentialPotential::hessian::collision", "The collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK19TangentialCollisionRK12VectorMax12dK19PSDProjectionMethod-p-collision", "ipc::TangentialPotential::hessian::collision", "The collision"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-collisions", "ipc::TangentialPotential::hessian::collisions", "The set of collisions."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-mesh", "ipc::TangentialPotential::hessian::mesh", "The collision mesh."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::TangentialPotential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod-p-project_hessian_to_psd", "ipc::TangentialPotential::hessian::project_hessian_to_psd", "Make sure the hessian is positive semi-definite."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK19TangentialCollisionRK12VectorMax12dK19PSDProjectionMethod", "ipc::TangentialPotential::hessian::project_hessian_to_psd", "Compute the hessian of the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK19TangentialCollisionRK12VectorMax12dK19PSDProjectionMethod-p-velocities", "ipc::TangentialPotential::hessian::velocities", "The collision stencil's velocities."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod-p-x", "ipc::TangentialPotential::hessian::x", "The collision stencil's degrees of freedom."], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotential10is_dynamicEKd", "ipc::TangentialPotential::is_dynamic", ""], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotential10is_dynamicEKd", "ipc::TangentialPotential::is_dynamic::speed", ""], [14, 1, 1, "_CPPv4NK3ipc19TangentialPotentialclERK19TangentialCollisionRK12VectorMax12d", "ipc::TangentialPotential::operator()", "Compute the potential for a single collision."], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotentialclERK19TangentialCollisionRK12VectorMax12d-p-collision", "ipc::TangentialPotential::operator()::collision", "The collision"], [14, 2, 2, "_CPPv4NK3ipc19TangentialPotentialclERK19TangentialCollisionRK12VectorMax12d-p-velocities", "ipc::TangentialPotential::operator()::velocities", "The collision stencil's velocities."], [14, 1, 1, "_CPPv4N3ipc19TangentialPotentialD0Ev", "ipc::TangentialPotential::~TangentialPotential", ""], [7, 0, 1, "_CPPv4N3ipc21VertexVertexCandidateE", "ipc::VertexVertexCandidate", "Subclassed by ipc::VertexVertexNormalCollision, ipc::VertexVertexTangentialCollision"], [7, 1, 1, "_CPPv4I0EN3ipc21VertexVertexCandidate13AbslHashValueE1H1HRK21VertexVertexCandidate", "ipc::VertexVertexCandidate::AbslHashValue", ""], [7, 4, 2, "_CPPv4I0EN3ipc21VertexVertexCandidate13AbslHashValueE1H1HRK21VertexVertexCandidate", "ipc::VertexVertexCandidate::AbslHashValue::H", ""], [7, 2, 2, "_CPPv4I0EN3ipc21VertexVertexCandidate13AbslHashValueE1H1HRK21VertexVertexCandidate", "ipc::VertexVertexCandidate::AbslHashValue::h", ""], [7, 2, 2, "_CPPv4I0EN3ipc21VertexVertexCandidate13AbslHashValueE1H1HRK21VertexVertexCandidate", "ipc::VertexVertexCandidate::AbslHashValue::vv", ""], [7, 1, 1, "_CPPv4N3ipc21VertexVertexCandidate21VertexVertexCandidateEll", "ipc::VertexVertexCandidate::VertexVertexCandidate", ""], [7, 2, 2, "_CPPv4N3ipc21VertexVertexCandidate21VertexVertexCandidateEll", "ipc::VertexVertexCandidate::VertexVertexCandidate::vertex0_id", ""], [7, 2, 2, "_CPPv4N3ipc21VertexVertexCandidate21VertexVertexCandidateEll", "ipc::VertexVertexCandidate::VertexVertexCandidate::vertex1_id", ""], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD", "ipc::VertexVertexCandidate::ccd", "Perform narrow-phase CCD on the candidate."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-min_distance", "ipc::VertexVertexCandidate::ccd::min_distance", "[in] Minimum separation distance between primitives."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::VertexVertexCandidate::ccd::narrow_phase_ccd", "[in] The narrow phase CCD algorithm to use."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-tmax", "ipc::VertexVertexCandidate::ccd::tmax", "[in] Maximum time (normalized) to look for collisions."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-toi", "ipc::VertexVertexCandidate::ccd::toi", "[out] Computed time of impact (normalized)."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t0", "ipc::VertexVertexCandidate::ccd::vertices_t0", "[in] Stencil vertices at the start of the time step."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD-p-vertices_t1", "ipc::VertexVertexCandidate::ccd::vertices_t1", "[in] Stencil vertices at the end of the time step."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate16compute_distanceERK12VectorMax12d", "ipc::VertexVertexCandidate::compute_distance", "Compute the distance of the stencil."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate16compute_distanceERK12VectorMax12d-p-positions", "ipc::VertexVertexCandidate::compute_distance::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate25compute_distance_gradientERK12VectorMax12d", "ipc::VertexVertexCandidate::compute_distance_gradient", "Compute the distance gradient of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate25compute_distance_gradientERK12VectorMax12d-p-positions", "ipc::VertexVertexCandidate::compute_distance_gradient::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate24compute_distance_hessianERK12VectorMax12d", "ipc::VertexVertexCandidate::compute_distance_hessian", "Compute the distance Hessian of the stencil w.r.t."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate24compute_distance_hessianERK12VectorMax12d-p-positions", "ipc::VertexVertexCandidate::compute_distance_hessian::positions", "Stencil's vertex positions."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate12num_verticesEv", "ipc::VertexVertexCandidate::num_vertices", "Get the number of vertices in the collision stencil."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidateneERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator!=", ""], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidateneERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator!=::other", ""], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidateltERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator&lt;", "Compare EdgeVertexCandidates for sorting."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidateltERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator&lt;::other", "Compare EdgeVertexCandidates for sorting."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidateeqERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator==", ""], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidateeqERK21VertexVertexCandidate", "ipc::VertexVertexCandidate::operator==::other", ""], [7, 3, 1, "_CPPv4N3ipc21VertexVertexCandidate10vertex0_idE", "ipc::VertexVertexCandidate::vertex0_id", "ID of the first vertex."], [7, 3, 1, "_CPPv4N3ipc21VertexVertexCandidate10vertex1_idE", "ipc::VertexVertexCandidate::vertex1_id", "ID of the second vertex."], [7, 1, 1, "_CPPv4NK3ipc21VertexVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE", "ipc::VertexVertexCandidate::vertex_ids", "Get the indices of the vertices."], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-edges", "ipc::VertexVertexCandidate::vertex_ids::edges", "edge matrix of mesh"], [7, 2, 2, "_CPPv4NK3ipc21VertexVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE-p-faces", "ipc::VertexVertexCandidate::vertex_ids::faces", "face matrix of mesh"], [13, 0, 1, "_CPPv4N3ipc27VertexVertexNormalCollisionE", "ipc::VertexVertexNormalCollision", "Inheritence diagram for ipc::VertexVertexNormalCollision:"], [13, 1, 1, "_CPPv4I0EN3ipc27VertexVertexNormalCollision13AbslHashValueE1H1HRK27VertexVertexNormalCollision", "ipc::VertexVertexNormalCollision::AbslHashValue", ""], [13, 4, 2, "_CPPv4I0EN3ipc27VertexVertexNormalCollision13AbslHashValueE1H1HRK27VertexVertexNormalCollision", "ipc::VertexVertexNormalCollision::AbslHashValue::H", ""], [13, 2, 2, "_CPPv4I0EN3ipc27VertexVertexNormalCollision13AbslHashValueE1H1HRK27VertexVertexNormalCollision", "ipc::VertexVertexNormalCollision::AbslHashValue::h", ""], [13, 2, 2, "_CPPv4I0EN3ipc27VertexVertexNormalCollision13AbslHashValueE1H1HRK27VertexVertexNormalCollision", "ipc::VertexVertexNormalCollision::AbslHashValue::vv", ""], [13, 1, 1, "_CPPv4N3ipc27VertexVertexNormalCollision21VertexVertexCandidateEll", "ipc::VertexVertexNormalCollision::VertexVertexCandidate", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision21VertexVertexCandidateEll", "ipc::VertexVertexNormalCollision::VertexVertexCandidate::vertex0_id", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision21VertexVertexCandidateEll", "ipc::VertexVertexNormalCollision::VertexVertexCandidate::vertex1_id", ""], [13, 1, 1, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision", ""], [13, 1, 1, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionERK21VertexVertexCandidate", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision::_vertex0_id", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision::_vertex1_id", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision::_weight", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision::_weight_gradient", ""], [13, 2, 2, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionERK21VertexVertexCandidate", "ipc::VertexVertexNormalCollision::VertexVertexNormalCollision::candidate", ""], [16, 0, 1, "_CPPv4N3ipc31VertexVertexTangentialCollisionE", "ipc::VertexVertexTangentialCollision", "Inheritence diagram for ipc::VertexVertexTangentialCollision:"], [16, 1, 1, "_CPPv4N3ipc31VertexVertexTangentialCollision21VertexVertexCandidateEll", "ipc::VertexVertexTangentialCollision::VertexVertexCandidate", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision21VertexVertexCandidateEll", "ipc::VertexVertexTangentialCollision::VertexVertexCandidate::vertex0_id", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision21VertexVertexCandidateEll", "ipc::VertexVertexTangentialCollision::VertexVertexCandidate::vertex1_id", ""], [16, 1, 1, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollision", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision", ""], [16, 1, 1, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision::barrier_potential", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision::barrier_stiffness", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollision", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision::collision", ""], [16, 2, 2, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd", "ipc::VertexVertexTangentialCollision::VertexVertexTangentialCollision::positions", ""], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_closest_pointERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::compute_closest_point", "Compute the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_closest_pointERK12VectorMax12d-p-positions", "ipc::VertexVertexTangentialCollision::compute_closest_point::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d-p-positions", "ipc::VertexVertexTangentialCollision::compute_closest_point_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::compute_tangent_basis", "Compute the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d-p-positions", "ipc::VertexVertexTangentialCollision::compute_tangent_basis::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d-p-positions", "ipc::VertexVertexTangentialCollision::compute_tangent_basis_jacobian::positions", "Collision stencil's vertex positions."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::relative_velocity", "Compute the relative velocity of the collision."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision17relative_velocityERK12VectorMax12d", "ipc::VertexVertexTangentialCollision::relative_velocity::velocities", "Compute the relative velocity of the collision."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d", "ipc::VertexVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision24relative_velocity_matrixEv", "ipc::VertexVertexTangentialCollision::relative_velocity_matrix", "Construct the premultiplier matrix for the relative velocity."], [16, 2, 2, "p-closest_point", "ipc::VertexVertexTangentialCollision::relative_velocity_matrix::closest_point", "Barycentric coordinates of the closest point."], [16, 1, 1, "_CPPv4NK3ipc31VertexVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d", "ipc::VertexVertexTangentialCollision::relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [16, 2, 2, "_CPPv4NK3ipc31VertexVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d-p-closest_point", "ipc::VertexVertexTangentialCollision::relative_velocity_matrix_jacobian::closest_point", "Barycentric coordinates of the closest point."], [5, 1, 1, "_CPPv4N3ipc7barrierEKdKd", "ipc::barrier", "Function that grows to infinity as d approaches 0 from the right."], [5, 2, 2, "_CPPv4N3ipc7barrierEKdKd-p-d", "ipc::barrier::d", "The distance."], [5, 2, 2, "_CPPv4N3ipc7barrierEKdKd-p-dhat", "ipc::barrier::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4N3ipc24barrier_first_derivativeEKdKd", "ipc::barrier_first_derivative", "Derivative of the barrier function."], [5, 2, 2, "_CPPv4N3ipc24barrier_first_derivativeEKdKd-p-d", "ipc::barrier_first_derivative::d", "The distance."], [5, 2, 2, "_CPPv4N3ipc24barrier_first_derivativeEKdKd-p-dhat", "ipc::barrier_first_derivative::dhat", "Activation distance of the barrier."], [5, 1, 1, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd", "ipc::barrier_force_magnitude", "Compute the magnitude of the force due to a barrier."], [5, 2, 2, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd-p-barrier", "ipc::barrier_force_magnitude::barrier", "The barrier function."], [5, 2, 2, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd-p-barrier_stiffness", "ipc::barrier_force_magnitude::barrier_stiffness", "The stiffness of the barrier."], [5, 2, 2, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd-p-dhat", "ipc::barrier_force_magnitude::dhat", "The activation distance of the barrier."], [5, 2, 2, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd-p-distance_squared", "ipc::barrier_force_magnitude::distance_squared", "The squared distance between elements."], [5, 2, 2, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd-p-dmin", "ipc::barrier_force_magnitude::dmin", "The minimum distance offset to the barrier."], [5, 1, 1, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd", "ipc::barrier_force_magnitude_gradient", "Compute the gradient of the magnitude of the force due to a barrier."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-barrier", "ipc::barrier_force_magnitude_gradient::barrier", "The barrier function."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-barrier_stiffness", "ipc::barrier_force_magnitude_gradient::barrier_stiffness", "The stiffness of the barrier."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-dhat", "ipc::barrier_force_magnitude_gradient::dhat", "The activation distance of the barrier."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-distance_squared", "ipc::barrier_force_magnitude_gradient::distance_squared", "The squared distance between elements."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-distance_squared_gradient", "ipc::barrier_force_magnitude_gradient::distance_squared_gradient", "The gradient of the squared distance."], [5, 2, 2, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd-p-dmin", "ipc::barrier_force_magnitude_gradient::dmin", "The minimum distance offset to the barrier."], [5, 1, 1, "_CPPv4N3ipc25barrier_second_derivativeEKdKd", "ipc::barrier_second_derivative", "Second derivative of the barrier function."], [5, 2, 2, "_CPPv4N3ipc25barrier_second_derivativeEKdKd-p-d", "ipc::barrier_second_derivative::d", "The distance."], [5, 2, 2, "_CPPv4N3ipc25barrier_second_derivativeEKdKd-p-dhat", "ipc::barrier_second_derivative::dhat", "Activation distance of the barrier."], [8, 1, 1, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD", "ipc::compute_collision_free_stepsize", "Computes a maximal step size that is collision free."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-broad_phase_method", "ipc::compute_collision_free_stepsize::broad_phase_method", "The broad phase method to use."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-mesh", "ipc::compute_collision_free_stepsize::mesh", "The collision mesh."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-min_distance", "ipc::compute_collision_free_stepsize::min_distance", "The minimum distance allowable between any two elements."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::compute_collision_free_stepsize::narrow_phase_ccd", "The narrow phase CCD algorithm to use."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-vertices_t0", "ipc::compute_collision_free_stepsize::vertices_t0", "Vertex vertices at start as rows of a matrix."], [8, 2, 2, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-vertices_t1", "ipc::compute_collision_free_stepsize::vertices_t1", "Surface vertex vertices at end as rows of a matrix."], [8, 1, 1, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd", "ipc::conservative_piecewise_linear_ccd", "Perform conservative piecewise linear CCD of a nonlinear trajectories."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-conservative_rescaling", "ipc::conservative_piecewise_linear_ccd::conservative_rescaling", "[in] Conservative rescaling of the time of impact."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-distance", "ipc::conservative_piecewise_linear_ccd::distance", "[in] Return the distance for a given time in [0, 1]."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-linear_ccd", "ipc::conservative_piecewise_linear_ccd::linear_ccd", "[in] Perform linear CCD on a given time interval."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-max_distance_from_linear", "ipc::conservative_piecewise_linear_ccd::max_distance_from_linear", "[in] Return the maximum distance from the linearized trajectory for a given time interval."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-min_distance", "ipc::conservative_piecewise_linear_ccd::min_distance", "[in] Minimum separation distance between the objects."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-tmax", "ipc::conservative_piecewise_linear_ccd::tmax", "[in] Maximum time to check for collision."], [8, 2, 2, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd-p-toi", "ipc::conservative_piecewise_linear_ccd::toi", "[out] Output time of impact."], [15, 1, 1, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_closest_point", "Compute the barycentric coordinates of the closest points between two edges."], [15, 2, 2, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_closest_point::ea0", "First point of the first edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_closest_point::ea1", "Second point of the first edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_closest_point::eb0", "First point of the second edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_closest_point::eb1", "Second point of the second edge"], [15, 1, 1, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_closest_point_jacobian", "Compute the Jacobian of the closest points between two edges."], [15, 2, 2, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_closest_point_jacobian::ea0", "First point of the first edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_closest_point_jacobian::ea1", "Second point of the first edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_closest_point_jacobian::eb0", "First point of the second edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_closest_point_jacobian::eb1", "Second point of the second edge"], [10, 1, 1, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_cross_squarednorm", "Compute the squared norm of the edge-edge cross product."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_cross_squarednorm::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_cross_squarednorm::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_cross_squarednorm::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_cross_squarednorm::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_cross_squarednorm_gradient", "Compute the gradient of the squared norm of the edge cross product."], [10, 2, 2, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_cross_squarednorm_gradient::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_cross_squarednorm_gradient::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_cross_squarednorm_gradient::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_cross_squarednorm_gradient::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_cross_squarednorm_hessian", "Compute the hessian of the squared norm of the edge cross product."], [10, 2, 2, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_cross_squarednorm_hessian::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_cross_squarednorm_hessian::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_cross_squarednorm_hessian::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_cross_squarednorm_hessian::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType", "ipc::edge_edge_distance", "Compute the distance between a two lines segments in 3D."], [10, 2, 2, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-dtype", "ipc::edge_edge_distance::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea0", "ipc::edge_edge_distance::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea1", "ipc::edge_edge_distance::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb0", "ipc::edge_edge_distance::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb1", "ipc::edge_edge_distance::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType", "ipc::edge_edge_distance_gradient", "Compute the gradient of the distance between a two lines segments."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-dtype", "ipc::edge_edge_distance_gradient::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea0", "ipc::edge_edge_distance_gradient::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea1", "ipc::edge_edge_distance_gradient::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb0", "ipc::edge_edge_distance_gradient::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb1", "ipc::edge_edge_distance_gradient::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType", "ipc::edge_edge_distance_hessian", "Compute the hessian of the distance between a two lines segments."], [10, 2, 2, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-dtype", "ipc::edge_edge_distance_hessian::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea0", "ipc::edge_edge_distance_hessian::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-ea1", "ipc::edge_edge_distance_hessian::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb0", "ipc::edge_edge_distance_hessian::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType-p-eb1", "ipc::edge_edge_distance_hessian::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_distance_type", "Determine the closest pair between two edges."], [10, 2, 2, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_distance_type::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_distance_type::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_distance_type::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_distance_type::eb1", "The second vertex of the second edge."], [10, 1, 1, "_CPPv4N3ipc19edge_edge_mollifierEKdKd", "ipc::edge_edge_mollifier", "Mollifier function for edge-edge distance."], [10, 1, 1, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd", "ipc::edge_edge_mollifier", "Compute a mollifier for the edge-edge distance."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea0", "ipc::edge_edge_mollifier::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea1", "ipc::edge_edge_mollifier::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb0", "ipc::edge_edge_mollifier::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb1", "ipc::edge_edge_mollifier::eb1", "The second vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierEKdKd-p-eps_x", "ipc::edge_edge_mollifier::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eps_x", "ipc::edge_edge_mollifier::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc19edge_edge_mollifierEKdKd-p-x", "ipc::edge_edge_mollifier::x", "Squared norm of the edge-edge cross product."], [10, 1, 1, "_CPPv4N3ipc28edge_edge_mollifier_gradientEKdKd", "ipc::edge_edge_mollifier_gradient", "The gradient of the mollifier function for edge-edge distance."], [10, 1, 1, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd", "ipc::edge_edge_mollifier_gradient", "Compute the gradient of the mollifier for the edge-edge distance."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea0", "ipc::edge_edge_mollifier_gradient::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea1", "ipc::edge_edge_mollifier_gradient::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb0", "ipc::edge_edge_mollifier_gradient::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb1", "ipc::edge_edge_mollifier_gradient::eb1", "The second vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientEKdKd-p-eps_x", "ipc::edge_edge_mollifier_gradient::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eps_x", "ipc::edge_edge_mollifier_gradient::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc28edge_edge_mollifier_gradientEKdKd-p-x", "ipc::edge_edge_mollifier_gradient::x", "Squared norm of the edge-edge cross product."], [10, 1, 1, "_CPPv4N3ipc27edge_edge_mollifier_hessianEKdKd", "ipc::edge_edge_mollifier_hessian", "The hessian of the mollifier function for edge-edge distance."], [10, 1, 1, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd", "ipc::edge_edge_mollifier_hessian", "Compute the hessian of the mollifier for the edge-edge distance."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea0", "ipc::edge_edge_mollifier_hessian::ea0", "The first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-ea1", "ipc::edge_edge_mollifier_hessian::ea1", "The second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb0", "ipc::edge_edge_mollifier_hessian::eb0", "The first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eb1", "ipc::edge_edge_mollifier_hessian::eb1", "The second vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianEKdKd-p-eps_x", "ipc::edge_edge_mollifier_hessian::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd-p-eps_x", "ipc::edge_edge_mollifier_hessian::eps_x", "Mollifier activation threshold."], [10, 2, 2, "_CPPv4N3ipc27edge_edge_mollifier_hessianEKdKd-p-x", "ipc::edge_edge_mollifier_hessian::x", "Squared norm of the edge-edge cross product."], [10, 1, 1, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_mollifier_threshold", "Compute the threshold of the mollifier edge-edge distance."], [10, 2, 2, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0_rest", "ipc::edge_edge_mollifier_threshold::ea0_rest", "The rest position of the first vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1_rest", "ipc::edge_edge_mollifier_threshold::ea1_rest", "The rest position of the second vertex of the first edge."], [10, 2, 2, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0_rest", "ipc::edge_edge_mollifier_threshold::eb0_rest", "The rest position of the first vertex of the second edge."], [10, 2, 2, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1_rest", "ipc::edge_edge_mollifier_threshold::eb1_rest", "The rest position of the second vertex of the second edge."], [8, 1, 1, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd", "ipc::edge_edge_nonlinear_ccd", "Perform nonlinear CCD between two linear edges moving along nonlinear trajectories."], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-conservative_rescaling", "ipc::edge_edge_nonlinear_ccd::conservative_rescaling", "[in] Conservative rescaling of the time of impact"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-ea0", "ipc::edge_edge_nonlinear_ccd::ea0", "[in] First edge's first endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-ea1", "ipc::edge_edge_nonlinear_ccd::ea1", "[in] First edge's second endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-eb0", "ipc::edge_edge_nonlinear_ccd::eb0", "[in] Second edge's first endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-eb1", "ipc::edge_edge_nonlinear_ccd::eb1", "[in] Second edge's second endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-max_iterations", "ipc::edge_edge_nonlinear_ccd::max_iterations", "[in] Maximum number of iterations for the linear CCD algorithm"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-min_distance", "ipc::edge_edge_nonlinear_ccd::min_distance", "[in] Minimum separation distance between the two edges"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tmax", "ipc::edge_edge_nonlinear_ccd::tmax", "[in] Maximum time to check for collision"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-toi", "ipc::edge_edge_nonlinear_ccd::toi", "[out] Output time of impact"], [8, 2, 2, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tolerance", "ipc::edge_edge_nonlinear_ccd::tolerance", "[in] Tolerance for the linear CCD algorithm"], [15, 1, 1, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::edge_edge_relative_velocity", "Compute the relative velocity of the edges."], [15, 2, 2, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::edge_edge_relative_velocity::coords", "Two parametric coordinates of the closest points on the edges"], [15, 2, 2, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dea0", "ipc::edge_edge_relative_velocity::dea0", "Velocity of the first endpoint of the first edge"], [15, 2, 2, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dea1", "ipc::edge_edge_relative_velocity::dea1", "Velocity of the second endpoint of the first edge"], [15, 2, 2, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-deb0", "ipc::edge_edge_relative_velocity::deb0", "Velocity of the first endpoint of the second edge"], [15, 2, 2, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-deb1", "ipc::edge_edge_relative_velocity::deb1", "Velocity of the second endpoint of the second edge"], [15, 1, 1, "_CPPv4N3ipc34edge_edge_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::edge_edge_relative_velocity_matrix", "Compute the edge-edge relative velocity matrix."], [15, 2, 2, "_CPPv4N3ipc34edge_edge_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::edge_edge_relative_velocity_matrix::coords", "Two parametric coordinates of the closest points on the edges"], [15, 2, 2, "_CPPv4N3ipc34edge_edge_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dim", "ipc::edge_edge_relative_velocity_matrix::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc43edge_edge_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::edge_edge_relative_velocity_matrix_jacobian", "Compute the Jacobian of the edge-edge relative velocity matrix."], [15, 2, 2, "_CPPv4N3ipc43edge_edge_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::edge_edge_relative_velocity_matrix_jacobian::coords", "Two parametric coordinates of the closest points on the edges"], [15, 2, 2, "_CPPv4N3ipc43edge_edge_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dim", "ipc::edge_edge_relative_velocity_matrix_jacobian::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_tangent_basis", "Compute a basis for the space tangent to the edge-edge pair."], [15, 2, 2, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_tangent_basis::ea0", "First point of the first edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_tangent_basis::ea1", "Second point of the first edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_tangent_basis::eb0", "First point of the second edge"], [15, 2, 2, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_tangent_basis::eb1", "Second point of the second edge"], [15, 1, 1, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::edge_edge_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the edge-edge pair."], [15, 2, 2, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::edge_edge_tangent_basis_jacobian::ea0", "First point of the first edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::edge_edge_tangent_basis_jacobian::ea1", "Second point of the first edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb0", "ipc::edge_edge_tangent_basis_jacobian::eb0", "First point of the second edge"], [15, 2, 2, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-eb1", "ipc::edge_edge_tangent_basis_jacobian::eb1", "Second point of the second edge"], [12, 1, 1, "_CPPv4N3ipc17has_intersectionsERK13CollisionMeshRKN5Eigen8MatrixXdEK16BroadPhaseMethod", "ipc::has_intersections", "Determine if the mesh has self intersections."], [12, 2, 2, "_CPPv4N3ipc17has_intersectionsERK13CollisionMeshRKN5Eigen8MatrixXdEK16BroadPhaseMethod-p-broad_phase_method", "ipc::has_intersections::broad_phase_method", "The broad phase method to use."], [12, 2, 2, "_CPPv4N3ipc17has_intersectionsERK13CollisionMeshRKN5Eigen8MatrixXdEK16BroadPhaseMethod-p-mesh", "ipc::has_intersections::mesh", "The collision mesh."], [12, 2, 2, "_CPPv4N3ipc17has_intersectionsERK13CollisionMeshRKN5Eigen8MatrixXdEK16BroadPhaseMethod-p-vertices", "ipc::has_intersections::vertices", "Vertices of the collision mesh."], [5, 1, 1, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd", "ipc::initial_barrier_stiffness", "Compute an inital barrier stiffness using the barrier potential gradient."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-average_mass", "ipc::initial_barrier_stiffness::average_mass", "[in] Average mass of all bodies."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-barrier", "ipc::initial_barrier_stiffness::barrier", "[in] Barrier function."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-bbox_diagonal", "ipc::initial_barrier_stiffness::bbox_diagonal", "[in] Length of the diagonal of the bounding box of the scene."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-dhat", "ipc::initial_barrier_stiffness::dhat", "[in] Activation distance of the barrier."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-dmin", "ipc::initial_barrier_stiffness::dmin", "[in] Minimum distance between elements."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-grad_barrier", "ipc::initial_barrier_stiffness::grad_barrier", "[in] Gradient of the barrier potential."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-grad_energy", "ipc::initial_barrier_stiffness::grad_energy", "[in] Gradient of the elasticity energy function."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-max_barrier_stiffness", "ipc::initial_barrier_stiffness::max_barrier_stiffness", "[out] Maximum stiffness of the barrier."], [5, 2, 2, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd-p-min_barrier_stiffness_scale", "ipc::initial_barrier_stiffness::min_barrier_stiffness_scale", "[in] Scale used to premultiply the minimum barrier stiffness."], [12, 1, 1, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle", ""], [12, 2, 2, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle::e0", ""], [12, 2, 2, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle::e1", ""], [12, 2, 2, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle::t0", ""], [12, 2, 2, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle::t1", ""], [12, 2, 2, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE", "ipc::is_edge_intersecting_triangle::t2", ""], [8, 1, 1, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD", "ipc::is_step_collision_free", "Determine if the step is collision free."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-broad_phase_method", "ipc::is_step_collision_free::broad_phase_method", "The broad phase method to use."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-mesh", "ipc::is_step_collision_free::mesh", "The collision mesh."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-min_distance", "ipc::is_step_collision_free::min_distance", "The minimum distance allowable between any two elements."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-narrow_phase_ccd", "ipc::is_step_collision_free::narrow_phase_ccd", "The narrow phase CCD algorithm to use."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-vertices_t0", "ipc::is_step_collision_free::vertices_t0", "Surface vertex vertices at start as rows of a matrix."], [8, 2, 2, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD-p-vertices_t1", "ipc::is_step_collision_free::vertices_t1", "Surface vertex vertices at end as rows of a matrix."], [10, 1, 1, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance", "Compute the distance between a two infinite lines in 3D."], [10, 2, 2, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::line_line_distance::ea0", "The first vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::line_line_distance::ea1", "The second vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance::eb0", "Compute the distance between a two infinite lines in 3D."], [10, 2, 2, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance::eb1", "Compute the distance between a two infinite lines in 3D."], [10, 1, 1, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_gradient", "Compute the gradient of the distance between a two lines in 3D."], [10, 2, 2, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::line_line_distance_gradient::ea0", "The first vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::line_line_distance_gradient::ea1", "The second vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_gradient::eb0", "Compute the gradient of the distance between a two lines in 3D."], [10, 2, 2, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_gradient::eb1", "Compute the gradient of the distance between a two lines in 3D."], [10, 1, 1, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_hessian", "Compute the hessian of the distance between a two lines in 3D."], [10, 2, 2, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea0", "ipc::line_line_distance_hessian::ea0", "The first vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-ea1", "ipc::line_line_distance_hessian::ea1", "The second vertex of the edge defining the second line."], [10, 2, 2, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_hessian::eb0", "Compute the hessian of the distance between a two lines in 3D."], [10, 2, 2, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::line_line_distance_hessian::eb1", "Compute the hessian of the distance between a two lines in 3D."], [17, 1, 1, "_CPPv4N3ipc6loggerEv", "ipc::logger", "Retrieves the current logger."], [4, 1, 1, "_CPPv4N3ipc35max_normal_adhesion_force_magnitudeEKdKdKd", "ipc::max_normal_adhesion_force_magnitude", "The maximum normal adhesion force magnitude."], [4, 2, 2, "_CPPv4N3ipc35max_normal_adhesion_force_magnitudeEKdKdKd-p-a2", "ipc::max_normal_adhesion_force_magnitude::a2", "adjustable parameter relating to the maximum derivative of a ( a_2)"], [4, 2, 2, "_CPPv4N3ipc35max_normal_adhesion_force_magnitudeEKdKdKd-p-dhat_a", "ipc::max_normal_adhesion_force_magnitude::dhat_a", "adhesion activation distance ( \\hat{d}_a)"], [4, 2, 2, "_CPPv4N3ipc35max_normal_adhesion_force_magnitudeEKdKdKd-p-dhat_p", "ipc::max_normal_adhesion_force_magnitude::dhat_p", "distance of largest adhesion force ( \\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"], [4, 1, 1, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd", "ipc::normal_adhesion_potential", "The normal adhesion potential."], [4, 2, 2, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd-p-a2", "ipc::normal_adhesion_potential::a2", "adjustable parameter relating to the maximum derivative of a ( a_2)"], [4, 2, 2, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd-p-d", "ipc::normal_adhesion_potential::d", "distance"], [4, 2, 2, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd-p-dhat_a", "ipc::normal_adhesion_potential::dhat_a", "adhesion activation distance ( \\hat{d}_a)"], [4, 2, 2, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd-p-dhat_p", "ipc::normal_adhesion_potential::dhat_p", "distance of largest adhesion force ( \\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"], [4, 1, 1, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd", "ipc::normal_adhesion_potential_first_derivative", "The first derivative of the normal adhesion potential wrt d."], [4, 2, 2, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd-p-a2", "ipc::normal_adhesion_potential_first_derivative::a2", "adjustable parameter relating to the maximum derivative of a ( a_2)"], [4, 2, 2, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd-p-d", "ipc::normal_adhesion_potential_first_derivative::d", "distance"], [4, 2, 2, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd-p-dhat_a", "ipc::normal_adhesion_potential_first_derivative::dhat_a", "adhesion activation distance ( \\hat{d}_a)"], [4, 2, 2, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd-p-dhat_p", "ipc::normal_adhesion_potential_first_derivative::dhat_p", "distance of largest adhesion force ( \\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"], [4, 1, 1, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd", "ipc::normal_adhesion_potential_second_derivative", "The second derivative of the normal adhesion potential wrt d."], [4, 2, 2, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd-p-a2", "ipc::normal_adhesion_potential_second_derivative::a2", "adjustable parameter relating to the maximum derivative of a ( a_2)"], [4, 2, 2, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd-p-d", "ipc::normal_adhesion_potential_second_derivative::d", "distance"], [4, 2, 2, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd-p-dhat_a", "ipc::normal_adhesion_potential_second_derivative::dhat_a", "adhesion activation distance ( \\hat{d}_a)"], [4, 2, 2, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd-p-dhat_p", "ipc::normal_adhesion_potential_second_derivative::dhat_p", "distance of largest adhesion force ( \\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"], [15, 1, 1, "_CPPv4N3ipc24point_edge_closest_pointERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_edge_closest_point", "Compute the baricentric coordinate of the closest point on the edge."], [15, 2, 2, "_CPPv4N3ipc24point_edge_closest_pointERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_edge_closest_point::e0", "First edge point"], [15, 2, 2, "_CPPv4N3ipc24point_edge_closest_pointERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_edge_closest_point::e1", "Second edge point"], [15, 2, 2, "_CPPv4N3ipc24point_edge_closest_pointERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_edge_closest_point::p", "Point"], [15, 1, 1, "_CPPv4N3ipc33point_edge_closest_point_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_edge_closest_point_jacobian", "Compute the Jacobian of the closest point on the edge."], [15, 2, 2, "_CPPv4N3ipc33point_edge_closest_point_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_edge_closest_point_jacobian::e0", "First edge point"], [15, 2, 2, "_CPPv4N3ipc33point_edge_closest_point_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_edge_closest_point_jacobian::e1", "Second edge point"], [15, 2, 2, "_CPPv4N3ipc33point_edge_closest_point_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_edge_closest_point_jacobian::p", "Point"], [10, 1, 1, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType", "ipc::point_edge_distance", "Compute the distance between a point and edge in 2D or 3D."], [10, 2, 2, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-dtype", "ipc::point_edge_distance::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e0", "ipc::point_edge_distance::e0", "The first vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e1", "ipc::point_edge_distance::e1", "The second vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-p", "ipc::point_edge_distance::p", "The point."], [10, 1, 1, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType", "ipc::point_edge_distance_gradient", "Compute the gradient of the distance between a point and edge."], [10, 2, 2, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-dtype", "ipc::point_edge_distance_gradient::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e0", "ipc::point_edge_distance_gradient::e0", "The first vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e1", "ipc::point_edge_distance_gradient::e1", "The second vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-p", "ipc::point_edge_distance_gradient::p", "The point."], [10, 1, 1, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType", "ipc::point_edge_distance_hessian", "Compute the hessian of the distance between a point and edge."], [10, 2, 2, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-dtype", "ipc::point_edge_distance_hessian::dtype", "The point edge distance type to compute."], [10, 2, 2, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e0", "ipc::point_edge_distance_hessian::e0", "The first vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-e1", "ipc::point_edge_distance_hessian::e1", "The second vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType-p-p", "ipc::point_edge_distance_hessian::p", "The point."], [10, 1, 1, "_CPPv4N3ipc24point_edge_distance_typeERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_edge_distance_type", "Determine the closest pair between a point and edge."], [10, 2, 2, "_CPPv4N3ipc24point_edge_distance_typeERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_edge_distance_type::e0", "The first vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc24point_edge_distance_typeERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_edge_distance_type::e1", "The second vertex of the edge."], [10, 2, 2, "_CPPv4N3ipc24point_edge_distance_typeERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_edge_distance_type::p", "The point."], [8, 1, 1, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd", "ipc::point_edge_nonlinear_ccd", "Perform nonlinear CCD between a point and a linear edge moving along nonlinear trajectories."], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-conservative_rescaling", "ipc::point_edge_nonlinear_ccd::conservative_rescaling", "[in] Conservative rescaling of the time of impact"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-e0", "ipc::point_edge_nonlinear_ccd::e0", "[in] Edge's first endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-e1", "ipc::point_edge_nonlinear_ccd::e1", "[in] Edge's second endpoint's trajectory"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-max_iterations", "ipc::point_edge_nonlinear_ccd::max_iterations", "[in] Maximum number of iterations for the linear CCD algorithm"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-min_distance", "ipc::point_edge_nonlinear_ccd::min_distance", "[in] Minimum separation distance between the point and the edge"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-p", "ipc::point_edge_nonlinear_ccd::p", "[in] Point's trajectory"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tmax", "ipc::point_edge_nonlinear_ccd::tmax", "[in] Maximum time to check for collision"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-toi", "ipc::point_edge_nonlinear_ccd::toi", "[out] Output time of impact"], [8, 2, 2, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tolerance", "ipc::point_edge_nonlinear_ccd::tolerance", "[in] Tolerance for the linear CCD algorithm"], [15, 1, 1, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd", "ipc::point_edge_relative_velocity", "Compute the relative velocity of a point and an edge."], [15, 2, 2, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd-p-alpha", "ipc::point_edge_relative_velocity::alpha", "Parametric coordinate of the closest point on the edge"], [15, 2, 2, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd-p-de0", "ipc::point_edge_relative_velocity::de0", "Velocity of the first endpoint of the edge"], [15, 2, 2, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd-p-de1", "ipc::point_edge_relative_velocity::de1", "Velocity of the second endpoint of the edge"], [15, 2, 2, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd-p-dp", "ipc::point_edge_relative_velocity::dp", "Velocity of the point"], [15, 1, 1, "_CPPv4N3ipc35point_edge_relative_velocity_matrixEKiKd", "ipc::point_edge_relative_velocity_matrix", "Compute the point-edge relative velocity premultiplier matrix."], [15, 2, 2, "_CPPv4N3ipc35point_edge_relative_velocity_matrixEKiKd-p-alpha", "ipc::point_edge_relative_velocity_matrix::alpha", "Parametric coordinate of the closest point on the edge"], [15, 2, 2, "_CPPv4N3ipc35point_edge_relative_velocity_matrixEKiKd-p-dim", "ipc::point_edge_relative_velocity_matrix::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc44point_edge_relative_velocity_matrix_jacobianEKiKd", "ipc::point_edge_relative_velocity_matrix_jacobian", "Compute the Jacobian of the relative velocity premultiplier matrix."], [15, 2, 2, "_CPPv4N3ipc44point_edge_relative_velocity_matrix_jacobianEKiKd-p-alpha", "ipc::point_edge_relative_velocity_matrix_jacobian::alpha", "Parametric coordinate of the closest point on the edge"], [15, 2, 2, "_CPPv4N3ipc44point_edge_relative_velocity_matrix_jacobianEKiKd-p-dim", "ipc::point_edge_relative_velocity_matrix_jacobian::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc24point_edge_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_edge_tangent_basis", "Compute a basis for the space tangent to the point-edge pair."], [15, 2, 2, "_CPPv4N3ipc24point_edge_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_edge_tangent_basis::e0", "First edge point"], [15, 2, 2, "_CPPv4N3ipc24point_edge_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_edge_tangent_basis::e1", "Second edge point"], [15, 2, 2, "_CPPv4N3ipc24point_edge_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_edge_tangent_basis::p", "Point"], [15, 1, 1, "_CPPv4N3ipc33point_edge_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_edge_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-edge pair."], [15, 2, 2, "_CPPv4N3ipc33point_edge_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_edge_tangent_basis_jacobian::e0", "First edge point"], [15, 2, 2, "_CPPv4N3ipc33point_edge_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_edge_tangent_basis_jacobian::e1", "Second edge point"], [15, 2, 2, "_CPPv4N3ipc33point_edge_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_edge_tangent_basis_jacobian::p", "Point"], [10, 1, 1, "_CPPv4N3ipc19point_line_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_line_distance", "Compute the distance between a point and line in 2D or 3D."], [10, 2, 2, "_CPPv4N3ipc19point_line_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_line_distance::e0", "The first vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc19point_line_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_line_distance::e1", "The second vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc19point_line_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_line_distance::p", "The point."], [10, 1, 1, "_CPPv4N3ipc28point_line_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_line_distance_gradient", "Compute the gradient of the distance between a point and line."], [10, 2, 2, "_CPPv4N3ipc28point_line_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_line_distance_gradient::e0", "The first vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc28point_line_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_line_distance_gradient::e1", "The second vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc28point_line_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_line_distance_gradient::p", "The point."], [10, 1, 1, "_CPPv4N3ipc27point_line_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_line_distance_hessian", "Compute the hessian of the distance between a point and line."], [10, 2, 2, "_CPPv4N3ipc27point_line_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e0", "ipc::point_line_distance_hessian::e0", "The first vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc27point_line_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-e1", "ipc::point_line_distance_hessian::e1", "The second vertex of the edge defining the line."], [10, 2, 2, "_CPPv4N3ipc27point_line_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p", "ipc::point_line_distance_hessian::p", "The point."], [10, 1, 1, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance", "Compute the distance between a point and a plane."], [10, 1, 1, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance", "Compute the distance between a point and a plane."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-normal", "ipc::point_plane_distance::normal", "The normal of the plane."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-origin", "ipc::point_plane_distance::origin", "The origin of the plane."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance::p", "The point."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance::p", "The point."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_plane_distance::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_plane_distance::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_plane_distance::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance_gradient", "Compute the gradient of the distance between a point and a plane."], [10, 1, 1, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance_gradient", "Compute the gradient of the distance between a point and a plane."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-normal", "ipc::point_plane_distance_gradient::normal", "The normal of the plane."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-origin", "ipc::point_plane_distance_gradient::origin", "The origin of the plane."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance_gradient::p", "The point."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance_gradient::p", "The point."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_plane_distance_gradient::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_plane_distance_gradient::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_plane_distance_gradient::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance_hessian", "Compute the hessian of the distance between a point and a plane."], [10, 1, 1, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_plane_distance_hessian", "Compute the hessian of the distance between a point and a plane."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-normal", "ipc::point_plane_distance_hessian::normal", "The normal of the plane."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-origin", "ipc::point_plane_distance_hessian::origin", "The origin of the plane."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance_hessian::p", "The point."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_plane_distance_hessian::p", "The point."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_plane_distance_hessian::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_plane_distance_hessian::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_plane_distance_hessian::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc20point_point_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_distance", "Compute the distance between two points."], [10, 2, 2, "_CPPv4N3ipc20point_point_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p0", "ipc::point_point_distance::p0", "The first point."], [10, 2, 2, "_CPPv4N3ipc20point_point_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p1", "ipc::point_point_distance::p1", "The second point."], [10, 1, 1, "_CPPv4N3ipc29point_point_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_distance_gradient", "Compute the gradient of the distance between two points."], [10, 2, 2, "_CPPv4N3ipc29point_point_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p0", "ipc::point_point_distance_gradient::p0", "The first point."], [10, 2, 2, "_CPPv4N3ipc29point_point_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p1", "ipc::point_point_distance_gradient::p1", "The second point."], [10, 1, 1, "_CPPv4N3ipc28point_point_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_distance_hessian", "Compute the hessian of the distance between two points."], [10, 2, 2, "_CPPv4N3ipc28point_point_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p0", "ipc::point_point_distance_hessian::p0", "The first point."], [10, 2, 2, "_CPPv4N3ipc28point_point_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p1", "ipc::point_point_distance_hessian::p1", "The second point."], [8, 1, 1, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd", "ipc::point_point_nonlinear_ccd", "Perform nonlinear CCD between two points moving along nonlinear trajectories."], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-conservative_rescaling", "ipc::point_point_nonlinear_ccd::conservative_rescaling", "[in] Conservative rescaling of the time of impact"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-max_iterations", "ipc::point_point_nonlinear_ccd::max_iterations", "[in] Maximum number of iterations for the linear CCD algorithm"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-min_distance", "ipc::point_point_nonlinear_ccd::min_distance", "[in] Minimum separation distance between the two points"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-p0", "ipc::point_point_nonlinear_ccd::p0", "[in] First point's trajectory"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-p1", "ipc::point_point_nonlinear_ccd::p1", "[in] Second point's trajectory"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tmax", "ipc::point_point_nonlinear_ccd::tmax", "[in] Maximum time to check for collision"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-toi", "ipc::point_point_nonlinear_ccd::toi", "[out] Output time of impact"], [8, 2, 2, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tolerance", "ipc::point_point_nonlinear_ccd::tolerance", "[in] Tolerance for the linear CCD algorithm"], [15, 1, 1, "_CPPv4N3ipc29point_point_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_relative_velocity", "Compute the relative velocity of two points."], [15, 2, 2, "_CPPv4N3ipc29point_point_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-dp0", "ipc::point_point_relative_velocity::dp0", "Velocity of the first point"], [15, 2, 2, "_CPPv4N3ipc29point_point_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-dp1", "ipc::point_point_relative_velocity::dp1", "Velocity of the second point"], [15, 1, 1, "_CPPv4N3ipc36point_point_relative_velocity_matrixEKi", "ipc::point_point_relative_velocity_matrix", "Compute the point-point relative velocity premultiplier matrix."], [15, 2, 2, "_CPPv4N3ipc36point_point_relative_velocity_matrixEKi-p-dim", "ipc::point_point_relative_velocity_matrix::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc45point_point_relative_velocity_matrix_jacobianEKi", "ipc::point_point_relative_velocity_matrix_jacobian", "Compute the Jacobian of the relative velocity premultiplier matrix."], [15, 2, 2, "_CPPv4N3ipc45point_point_relative_velocity_matrix_jacobianEKi-p-dim", "ipc::point_point_relative_velocity_matrix_jacobian::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc25point_point_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_tangent_basis", "Compute a basis for the space tangent to the point-point pair."], [15, 2, 2, "_CPPv4N3ipc25point_point_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p0", "ipc::point_point_tangent_basis::p0", "First point"], [15, 2, 2, "_CPPv4N3ipc25point_point_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p1", "ipc::point_point_tangent_basis::p1", "Second point"], [15, 1, 1, "_CPPv4N3ipc34point_point_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE", "ipc::point_point_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-point pair."], [15, 2, 2, "_CPPv4N3ipc34point_point_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p0", "ipc::point_point_tangent_basis_jacobian::p0", "First point"], [15, 2, 2, "_CPPv4N3ipc34point_point_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE-p-p1", "ipc::point_point_tangent_basis_jacobian::p1", "Second point"], [15, 1, 1, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_triangle_closest_point", "Compute the barycentric coordinates of the closest point on the triangle."], [15, 2, 2, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_triangle_closest_point::p", "Point"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_triangle_closest_point::t0", "Triangle's first vertex"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_triangle_closest_point::t1", "Triangle's second vertex"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_triangle_closest_point::t2", "Triangle's third vertex"], [15, 1, 1, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_triangle_closest_point_jacobian", "Compute the Jacobian of the closest point on the triangle."], [15, 2, 2, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_triangle_closest_point_jacobian::p", "Point"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_triangle_closest_point_jacobian::t0", "Triangle's first vertex"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_triangle_closest_point_jacobian::t1", "Triangle's second vertex"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_triangle_closest_point_jacobian::t2", "Triangle's third vertex"], [10, 1, 1, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType", "ipc::point_triangle_distance", "Compute the distance between a points and a triangle."], [10, 2, 2, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-dtype", "ipc::point_triangle_distance::dtype", "The point-triangle distance type to compute."], [10, 2, 2, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-p", "ipc::point_triangle_distance::p", "The point."], [10, 2, 2, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t0", "ipc::point_triangle_distance::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t1", "ipc::point_triangle_distance::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t2", "ipc::point_triangle_distance::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType", "ipc::point_triangle_distance_gradient", "Compute the gradient of the distance between a points and a triangle."], [10, 2, 2, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-dtype", "ipc::point_triangle_distance_gradient::dtype", "The point-triangle distance type to compute."], [10, 2, 2, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-p", "ipc::point_triangle_distance_gradient::p", "The point."], [10, 2, 2, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t0", "ipc::point_triangle_distance_gradient::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t1", "ipc::point_triangle_distance_gradient::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t2", "ipc::point_triangle_distance_gradient::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType", "ipc::point_triangle_distance_hessian", "Compute the hessian of the distance between a points and a triangle."], [10, 2, 2, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-dtype", "ipc::point_triangle_distance_hessian::dtype", "The point-triangle distance type to compute."], [10, 2, 2, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-p", "ipc::point_triangle_distance_hessian::p", "The point."], [10, 2, 2, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t0", "ipc::point_triangle_distance_hessian::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t1", "ipc::point_triangle_distance_hessian::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType-p-t2", "ipc::point_triangle_distance_hessian::t2", "The third vertex of the triangle."], [10, 1, 1, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_triangle_distance_type", "Determine the closest pair between a point and triangle."], [10, 2, 2, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_triangle_distance_type::p", "The point."], [10, 2, 2, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_triangle_distance_type::t0", "The first vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_triangle_distance_type::t1", "The second vertex of the triangle."], [10, 2, 2, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_triangle_distance_type::t2", "The third vertex of the triangle."], [8, 1, 1, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd", "ipc::point_triangle_nonlinear_ccd", "Perform nonlinear CCD between a point and a linear triangle moving along nonlinear trajectories."], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-conservative_rescaling", "ipc::point_triangle_nonlinear_ccd::conservative_rescaling", "[in] Conservative rescaling of the time of impact"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-max_iterations", "ipc::point_triangle_nonlinear_ccd::max_iterations", "[in] Maximum number of iterations for the linear CCD algorithm"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-min_distance", "ipc::point_triangle_nonlinear_ccd::min_distance", "[in] Minimum separation distance between the two edges"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-p", "ipc::point_triangle_nonlinear_ccd::p", "[in] Point's trajectory"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-t0", "ipc::point_triangle_nonlinear_ccd::t0", "[in] Triangle's first vertex's trajectory"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-t1", "ipc::point_triangle_nonlinear_ccd::t1", "[in] Triangle's second vertex's trajectory"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-t2", "ipc::point_triangle_nonlinear_ccd::t2", "[in] Triangle's third vertex's trajectory"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tmax", "ipc::point_triangle_nonlinear_ccd::tmax", "[in] Maximum time to check for collision"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-toi", "ipc::point_triangle_nonlinear_ccd::toi", "[out] Output time of impact"], [8, 2, 2, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd-p-tolerance", "ipc::point_triangle_nonlinear_ccd::tolerance", "[in] Tolerance for the linear CCD algorithm"], [15, 1, 1, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::point_triangle_relative_velocity", "Compute the relative velocity of the point to the triangle."], [15, 2, 2, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::point_triangle_relative_velocity::coords", "Baricentric coordinates of the closest point on the triangle"], [15, 2, 2, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dp", "ipc::point_triangle_relative_velocity::dp", "Velocity of the point"], [15, 2, 2, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dt0", "ipc::point_triangle_relative_velocity::dt0", "Velocity of the first vertex of the triangle"], [15, 2, 2, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dt1", "ipc::point_triangle_relative_velocity::dt1", "Velocity of the second vertex of the triangle"], [15, 2, 2, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dt2", "ipc::point_triangle_relative_velocity::dt2", "Velocity of the third vertex of the triangle"], [15, 1, 1, "_CPPv4N3ipc39point_triangle_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::point_triangle_relative_velocity_matrix", "Compute the point-triangle relative velocity matrix."], [15, 2, 2, "_CPPv4N3ipc39point_triangle_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::point_triangle_relative_velocity_matrix::coords", "Baricentric coordinates of the closest point on the triangle"], [15, 2, 2, "_CPPv4N3ipc39point_triangle_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dim", "ipc::point_triangle_relative_velocity_matrix::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc48point_triangle_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE", "ipc::point_triangle_relative_velocity_matrix_jacobian", "Compute the Jacobian of the point-triangle relative velocity matrix."], [15, 2, 2, "_CPPv4N3ipc48point_triangle_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-coords", "ipc::point_triangle_relative_velocity_matrix_jacobian::coords", "Baricentric coordinates of the closest point on the triangle"], [15, 2, 2, "_CPPv4N3ipc48point_triangle_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE-p-dim", "ipc::point_triangle_relative_velocity_matrix_jacobian::dim", "Dimension (2 or 3)"], [15, 1, 1, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_triangle_tangent_basis", "Compute a basis for the space tangent to the point-triangle pair."], [15, 2, 2, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_triangle_tangent_basis::p", "Point"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_triangle_tangent_basis::t0", "Triangle's first vertex"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_triangle_tangent_basis::t1", "Triangle's second vertex"], [15, 2, 2, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_triangle_tangent_basis::t2", "Triangle's third vertex"], [15, 1, 1, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE", "ipc::point_triangle_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-triangle pair."], [15, 2, 2, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-p", "ipc::point_triangle_tangent_basis_jacobian::p", "Point"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t0", "ipc::point_triangle_tangent_basis_jacobian::t0", "Triangle's first vertex"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t1", "ipc::point_triangle_tangent_basis_jacobian::t1", "Triangle's second vertex"], [15, 2, 2, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE-p-t2", "ipc::point_triangle_tangent_basis_jacobian::t2", "Triangle's third vertex"], [17, 1, 1, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd", "Matrix projection onto positive definite cone."], [17, 2, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd-p-A", "ipc::project_to_pd::A", "Symmetric matrix to project"], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_Cols", "Matrix projection onto positive definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_MaxCols", "Matrix projection onto positive definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_MaxRows", "Matrix projection onto positive definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_Options", "Matrix projection onto positive definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_Rows", "Matrix projection onto positive definite cone."], [17, 4, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::_Scalar", "Matrix projection onto positive definite cone."], [17, 2, 2, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd", "ipc::project_to_pd::eps", "Matrix projection onto positive definite cone."], [17, 1, 1, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd", "Matrix projection onto positive semi-definite cone."], [17, 2, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod-p-A", "ipc::project_to_psd::A", "Symmetric matrix to project"], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_Cols", "Matrix projection onto positive semi-definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_MaxCols", "Matrix projection onto positive semi-definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_MaxRows", "Matrix projection onto positive semi-definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_Options", "Matrix projection onto positive semi-definite cone."], [17, 5, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_Rows", "Matrix projection onto positive semi-definite cone."], [17, 4, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod", "ipc::project_to_psd::_Scalar", "Matrix projection onto positive semi-definite cone."], [17, 2, 2, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod-p-method", "ipc::project_to_psd::method", "PSD projection method"], [17, 1, 1, "_CPPv4N3ipc10set_loggerENSt10shared_ptrIN6spdlog6loggerEEE", "ipc::set_logger", "Setup a logger object."], [17, 2, 2, "_CPPv4N3ipc10set_loggerENSt10shared_ptrIN6spdlog6loggerEEE-p-logger", "ipc::set_logger::logger", "New logger object to be used."], [11, 1, 1, "_CPPv4N3ipc18smooth_friction_f0EKdKd", "ipc::smooth_friction_f0", "Smooth friction mollifier function."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f0EKdKd-p-eps_v", "ipc::smooth_friction_f0::eps_v", "Velocity threshold below which static friction force is applied."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f0EKdKd-p-y", "ipc::smooth_friction_f0::y", "The tangential relative speed."], [11, 1, 1, "_CPPv4N3ipc18smooth_friction_f1EKdKd", "ipc::smooth_friction_f1", "The first derivative of the smooth friction mollifier."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f1EKdKd-p-eps_v", "ipc::smooth_friction_f1::eps_v", "Velocity threshold below which static friction force is applied."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f1EKdKd-p-y", "ipc::smooth_friction_f1::y", "The tangential relative speed."], [11, 1, 1, "_CPPv4N3ipc25smooth_friction_f1_over_xEKdKd", "ipc::smooth_friction_f1_over_x", "Compute the derivative of the smooth friction mollifier divided by y ( \\frac{f_0'(y)}{y})."], [11, 2, 2, "_CPPv4N3ipc25smooth_friction_f1_over_xEKdKd-p-eps_v", "ipc::smooth_friction_f1_over_x::eps_v", "Velocity threshold below which static friction force is applied."], [11, 2, 2, "_CPPv4N3ipc25smooth_friction_f1_over_xEKdKd-p-y", "ipc::smooth_friction_f1_over_x::y", "The tangential relative speed."], [11, 1, 1, "_CPPv4N3ipc18smooth_friction_f2EKdKd", "ipc::smooth_friction_f2", "The second derivative of the smooth friction mollifier."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f2EKdKd-p-eps_v", "ipc::smooth_friction_f2::eps_v", "Velocity threshold below which static friction force is applied."], [11, 2, 2, "_CPPv4N3ipc18smooth_friction_f2EKdKd-p-y", "ipc::smooth_friction_f2::y", "The tangential relative speed."], [11, 1, 1, "_CPPv4N3ipc37smooth_friction_f2_x_minus_f1_over_x3EKdKd", "ipc::smooth_friction_f2_x_minus_f1_over_x3", "The derivative of f1 times y minus f1 all divided by y cubed."], [11, 2, 2, "_CPPv4N3ipc37smooth_friction_f2_x_minus_f1_over_x3EKdKd-p-eps_v", "ipc::smooth_friction_f2_x_minus_f1_over_x3::eps_v", "Velocity threshold below which static friction force is applied."], [11, 2, 2, "_CPPv4N3ipc37smooth_friction_f2_x_minus_f1_over_x3EKdKd-p-y", "ipc::smooth_friction_f2_x_minus_f1_over_x3::y", "The tangential relative speed."], [4, 1, 1, "_CPPv4N3ipc22tangential_adhesion_f0EKdKd", "ipc::tangential_adhesion_f0", "The tangential adhesion mollifier function."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f0EKdKd-p-eps_a", "ipc::tangential_adhesion_f0::eps_a", "Velocity threshold below which static adhesion force is applied."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f0EKdKd-p-y", "ipc::tangential_adhesion_f0::y", "The tangential relative speed."], [4, 1, 1, "_CPPv4N3ipc22tangential_adhesion_f1EKdKd", "ipc::tangential_adhesion_f1", "The first derivative of the tangential adhesion mollifier function."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f1EKdKd-p-eps_a", "ipc::tangential_adhesion_f1::eps_a", "Velocity threshold below which static adhesion force is applied."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f1EKdKd-p-y", "ipc::tangential_adhesion_f1::y", "The tangential relative speed."], [4, 1, 1, "_CPPv4N3ipc29tangential_adhesion_f1_over_xEKdKd", "ipc::tangential_adhesion_f1_over_x", "The first derivative of the tangential adhesion mollifier function divided by y."], [4, 2, 2, "_CPPv4N3ipc29tangential_adhesion_f1_over_xEKdKd-p-eps_a", "ipc::tangential_adhesion_f1_over_x::eps_a", "Velocity threshold below which static adhesion force is applied."], [4, 2, 2, "_CPPv4N3ipc29tangential_adhesion_f1_over_xEKdKd-p-y", "ipc::tangential_adhesion_f1_over_x::y", "The tangential relative speed."], [4, 1, 1, "_CPPv4N3ipc22tangential_adhesion_f2EKdKd", "ipc::tangential_adhesion_f2", "The second derivative of the tangential adhesion mollifier function."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f2EKdKd-p-eps_a", "ipc::tangential_adhesion_f2::eps_a", "Velocity threshold below which static adhesion force is applied."], [4, 2, 2, "_CPPv4N3ipc22tangential_adhesion_f2EKdKd-p-y", "ipc::tangential_adhesion_f2::y", "The tangential relative speed."], [4, 1, 1, "_CPPv4N3ipc41tangential_adhesion_f2_x_minus_f1_over_x3EKdKd", "ipc::tangential_adhesion_f2_x_minus_f1_over_x3", "The second derivative of the tangential adhesion mollifier function times y minus the first derivative all divided by y cubed."], [4, 2, 2, "_CPPv4N3ipc41tangential_adhesion_f2_x_minus_f1_over_x3EKdKd-p-eps_a", "ipc::tangential_adhesion_f2_x_minus_f1_over_x3::eps_a", "Velocity threshold below which static adhesion force is applied."], [4, 2, 2, "_CPPv4N3ipc41tangential_adhesion_f2_x_minus_f1_over_x3EKdKd-p-y", "ipc::tangential_adhesion_f2_x_minus_f1_over_x3::y", "The tangential relative speed."], [5, 1, 1, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd", "ipc::update_barrier_stiffness", "Update the barrier stiffness if the distance is decreasing and less than dhat_epsilon_scale * diag."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-barrier_stiffness", "ipc::update_barrier_stiffness::barrier_stiffness", "[in] Current barrier stiffness."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-bbox_diagonal", "ipc::update_barrier_stiffness::bbox_diagonal", "[in] Length of the diagonal of the bounding box of the scene."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-dhat_epsilon_scale", "ipc::update_barrier_stiffness::dhat_epsilon_scale", "[in] Update if distance is less than this fraction of the diagonal."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-dmin", "ipc::update_barrier_stiffness::dmin", "[in] Minimum distance between elements."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-max_barrier_stiffness", "ipc::update_barrier_stiffness::max_barrier_stiffness", "[in] Maximum stiffness of the barrier."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-min_distance", "ipc::update_barrier_stiffness::min_distance", "[in] Current minimum distance between elements."], [5, 2, 2, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd-p-prev_min_distance", "ipc::update_barrier_stiffness::prev_min_distance", "[in] Previous minimum distance between elements."]], "ipctk": [[23, 9, 1, 0, "AABB", "Bases: pybind11_object"], [23, 9, 1, 0, "BVH", "Bases: BroadPhase"], [22, 9, 1, 0, "Barrier", "Bases: pybind11_object"], [31, 9, 1, 0, "BarrierPotential", "Bases: NormalPotential"], [23, 9, 1, 0, "BroadPhase", "Bases: pybind11_object"], [23, 9, 1, 0, "BroadPhaseMethod", "Bases: pybind11_object"], [23, 9, 1, 0, "BruteForce", "Bases: BroadPhase"], [24, 9, 1, 0, "Candidates", "Bases: pybind11_object"], [22, 9, 1, 0, "ClampedLogBarrier", "Bases: Barrier"], [26, 9, 1, 0, "CollisionMesh", "Bases: pybind11_object"], [24, 9, 1, 0, "ContinuousCollisionCandidate", "Bases: pybind11_object"], [24, 9, 1, 0, "EdgeEdgeCandidate", "Bases: CollisionStencil, ContinuousCollisionCandidate"], [27, 9, 1, 0, "EdgeEdgeDistanceType", "Bases: pybind11_object"], [30, 9, 1, 0, "EdgeEdgeNormalCollision", "Bases: EdgeEdgeCandidate, NormalCollision"], [33, 9, 1, 0, "EdgeEdgeTangentialCollision", "Bases: EdgeEdgeCandidate, TangentialCollision"], [24, 9, 1, 0, "EdgeFaceCandidate", "Bases: pybind11_object"], [24, 9, 1, 0, "EdgeVertexCandidate", "Bases: CollisionStencil, ContinuousCollisionCandidate"], [30, 9, 1, 0, "EdgeVertexNormalCollision", "Bases: EdgeVertexCandidate, NormalCollision"], [33, 9, 1, 0, "EdgeVertexTangentialCollision", "Bases: EdgeVertexCandidate, TangentialCollision"], [24, 9, 1, 0, "FaceVertexCandidate", "Bases: CollisionStencil, ContinuousCollisionCandidate"], [30, 9, 1, 0, "FaceVertexNormalCollision", "Bases: FaceVertexCandidate, NormalCollision"], [33, 9, 1, 0, "FaceVertexTangentialCollision", "Bases: FaceVertexCandidate, TangentialCollision"], [31, 9, 1, 0, "FrictionPotential", "Bases: TangentialPotential"], [23, 9, 1, 0, "HashGrid", "Bases: BroadPhase"], [25, 9, 1, 0, "IntervalNonlinearTrajectory", "Bases: NonlinearTrajectory"], [34, 9, 1, 0, "LoggerLevel", "Bases: pybind11_object"], [25, 9, 1, 0, "NonlinearTrajectory", "Bases: pybind11_object"], [31, 9, 1, 0, "NormalAdhesionPotential", "Bases: NormalPotential"], [30, 9, 1, 0, "NormalCollision", "Bases: CollisionStencil"], [30, 9, 1, 0, "NormalCollisions", "Bases: pybind11_object"], [31, 9, 1, 0, "NormalPotential", "Bases: pybind11_object"], [34, 9, 1, 0, "PSDProjectionMethod", "Bases: pybind11_object"], [30, 9, 1, 0, "PlaneVertexNormalCollision", "Bases: NormalCollision"], [27, 9, 1, 0, "PointEdgeDistanceType", "Bases: pybind11_object"], [27, 9, 1, 0, "PointTriangleDistanceType", "Bases: pybind11_object"], [23, 9, 1, 0, "SpatialHash", "Bases: BroadPhase"], [23, 9, 1, 0, "SweepAndPrune", "Bases: BroadPhase"], [31, 9, 1, 0, "TangentialAdhesionPotential", "Bases: TangentialPotential"], [33, 9, 1, 0, "TangentialCollision", "Bases: CollisionStencil"], [33, 9, 1, 0, "TangentialCollisions", "Bases: pybind11_object"], [31, 9, 1, 0, "TangentialPotential", "Bases: pybind11_object"], [24, 9, 1, 0, "VertexVertexCandidate", "Bases: CollisionStencil, ContinuousCollisionCandidate"], [30, 9, 1, 0, "VertexVertexNormalCollision", "Bases: VertexVertexCandidate, NormalCollision"], [33, 9, 1, 0, "VertexVertexTangentialCollision", "Bases: VertexVertexCandidate, TangentialCollision"], [22, 14, 1, 0, "barrier", "Function that grows to infinity as d approaches 0 from the right."], [22, 14, 1, 0, "barrier_first_derivative", "Derivative of the barrier function."], [22, 14, 1, 0, "barrier_force_magnitude", "Compute the magnitude of the force due to a barrier."], [22, 14, 1, 0, "barrier_force_magnitude_gradient", "Compute the gradient of the magnitude of the force due to a barrier."], [22, 14, 1, 0, "barrier_second_derivative", "Second derivative of the barrier function."], [25, 14, 1, 0, "compute_collision_free_stepsize", "Computes a maximal step size that is collision free."], [25, 14, 1, 0, "conservative_piecewise_linear_ccd", "Perform conservative piecewise linear CCD of a nonlinear trajectories."], [32, 14, 1, 0, "edge_edge_closest_point", "Compute the barycentric coordinates of the closest points between two edges."], [32, 14, 1, 0, "edge_edge_closest_point_jacobian", "Compute the Jacobian of the closest points between two edges."], [27, 14, 1, 0, "edge_edge_cross_squarednorm", "Compute the squared norm of the edge-edge cross product."], [27, 14, 1, 0, "edge_edge_cross_squarednorm_gradient", "Compute the gradient of the squared norm of the edge cross product."], [27, 14, 1, 0, "edge_edge_cross_squarednorm_hessian", "Compute the hessian of the squared norm of the edge cross product."], [27, 14, 1, 0, "edge_edge_distance", "Compute the distance between a two lines segments in 3D."], [27, 14, 1, 0, "edge_edge_distance_gradient", "Compute the gradient of the distance between a two lines segments."], [27, 14, 1, 0, "edge_edge_distance_hessian", "Compute the hessian of the distance between a two lines segments."], [27, 14, 1, 0, "edge_edge_distance_type", "Determine the closest pair between two edges."], [27, 14, 1, 0, "edge_edge_mollifier", "Overloaded function."], [27, 14, 1, 0, "edge_edge_mollifier_gradient", "Overloaded function."], [27, 14, 1, 0, "edge_edge_mollifier_hessian", "Overloaded function."], [27, 14, 1, 0, "edge_edge_mollifier_threshold", "Compute the threshold of the mollifier edge-edge distance."], [25, 14, 1, 0, "edge_edge_nonlinear_ccd", "Perform nonlinear CCD between two linear edges moving along nonlinear trajectories."], [32, 14, 1, 0, "edge_edge_relative_velocity", "Compute the relative velocity of the edges."], [32, 14, 1, 0, "edge_edge_relative_velocity_matrix", "Compute the edge-edge relative velocity matrix."], [32, 14, 1, 0, "edge_edge_relative_velocity_matrix_jacobian", "Compute the Jacobian of the edge-edge relative velocity matrix."], [32, 14, 1, 0, "edge_edge_tangent_basis", "Compute a basis for the space tangent to the edge-edge pair."], [32, 14, 1, 0, "edge_edge_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the edge-edge pair."], [34, 14, 1, 0, "get_num_threads", "get maximum number of threads to use"], [29, 14, 1, 0, "has_intersections", "Determine if the mesh has self intersections."], [22, 14, 1, 0, "initial_barrier_stiffness", "Compute an inital barrier stiffness using the barrier potential gradient."], [29, 14, 1, 0, "is_edge_intersecting_triangle", ""], [25, 14, 1, 0, "is_step_collision_free", "Determine if the step is collision free."], [27, 14, 1, 0, "line_line_distance", "Compute the distance between a two infinite lines in 3D."], [27, 14, 1, 0, "line_line_distance_gradient", "Compute the gradient of the distance between a two lines in 3D."], [27, 14, 1, 0, "line_line_distance_hessian", "Compute the hessian of the distance between a two lines in 3D."], [21, 14, 1, 0, "max_normal_adhesion_force_magnitude", "The maximum normal adhesion force magnitude."], [21, 14, 1, 0, "normal_adhesion_potential", "The normal adhesion potential."], [21, 14, 1, 0, "normal_adhesion_potential_first_derivative", "The first derivative of the normal adhesion potential wrt d."], [21, 14, 1, 0, "normal_adhesion_potential_second_derivative", "The second derivative of the normal adhesion potential wrt d."], [32, 14, 1, 0, "point_edge_closest_point", "Compute the baricentric coordinate of the closest point on the edge."], [32, 14, 1, 0, "point_edge_closest_point_jacobian", "Compute the Jacobian of the closest point on the edge."], [27, 14, 1, 0, "point_edge_distance", "Compute the distance between a point and edge in 2D or 3D."], [27, 14, 1, 0, "point_edge_distance_gradient", "Compute the gradient of the distance between a point and edge."], [27, 14, 1, 0, "point_edge_distance_hessian", "Compute the hessian of the distance between a point and edge."], [27, 14, 1, 0, "point_edge_distance_type", "Determine the closest pair between a point and edge."], [25, 14, 1, 0, "point_edge_nonlinear_ccd", "Perform nonlinear CCD between a point and a linear edge moving along nonlinear trajectories."], [32, 14, 1, 0, "point_edge_relative_velocity", "Compute the relative velocity of a point and an edge"], [32, 14, 1, 0, "point_edge_relative_velocity_matrix", "Compute the point-edge relative velocity premultiplier matrix"], [32, 14, 1, 0, "point_edge_relative_velocity_matrix_jacobian", "Compute the Jacobian of the relative velocity premultiplier matrix"], [32, 14, 1, 0, "point_edge_tangent_basis", "Compute a basis for the space tangent to the point-edge pair."], [32, 14, 1, 0, "point_edge_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-edge pair."], [27, 14, 1, 0, "point_line_distance", "Compute the distance between a point and line in 2D or 3D."], [27, 14, 1, 0, "point_line_distance_gradient", "Compute the gradient of the distance between a point and line."], [27, 14, 1, 0, "point_line_distance_hessian", "Compute the hessian of the distance between a point and line."], [27, 14, 1, 0, "point_plane_distance", "Overloaded function."], [27, 14, 1, 0, "point_plane_distance_gradient", "Overloaded function."], [27, 14, 1, 0, "point_plane_distance_hessian", "Overloaded function."], [27, 14, 1, 0, "point_point_distance", "Compute the distance between two points."], [27, 14, 1, 0, "point_point_distance_gradient", "Compute the gradient of the distance between two points."], [27, 14, 1, 0, "point_point_distance_hessian", "Compute the hessian of the distance between two points."], [25, 14, 1, 0, "point_point_nonlinear_ccd", "Perform nonlinear CCD between two points moving along nonlinear trajectories."], [32, 14, 1, 0, "point_point_relative_velocity", "Compute the relative velocity of two points"], [32, 14, 1, 0, "point_point_relative_velocity_matrix", "Compute the point-point relative velocity premultiplier matrix"], [32, 14, 1, 0, "point_point_relative_velocity_matrix_jacobian", "Compute the Jacobian of the relative velocity premultiplier matrix"], [32, 14, 1, 0, "point_point_tangent_basis", "Compute a basis for the space tangent to the point-point pair."], [32, 14, 1, 0, "point_point_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-point pair."], [32, 14, 1, 0, "point_triangle_closest_point", "Compute the barycentric coordinates of the closest point on the triangle."], [32, 14, 1, 0, "point_triangle_closest_point_jacobian", "Compute the Jacobian of the closest point on the triangle."], [27, 14, 1, 0, "point_triangle_distance", "Compute the distance between a points and a triangle."], [27, 14, 1, 0, "point_triangle_distance_gradient", "Compute the gradient of the distance between a points and a triangle."], [27, 14, 1, 0, "point_triangle_distance_hessian", "Compute the hessian of the distance between a points and a triangle."], [27, 14, 1, 0, "point_triangle_distance_type", "Determine the closest pair between a point and triangle."], [25, 14, 1, 0, "point_triangle_nonlinear_ccd", "Perform nonlinear CCD between a point and a linear triangle moving along nonlinear trajectories."], [32, 14, 1, 0, "point_triangle_relative_velocity", "Compute the relative velocity of the point to the triangle."], [32, 14, 1, 0, "point_triangle_relative_velocity_matrix", "Compute the point-triangle relative velocity matrix."], [32, 14, 1, 0, "point_triangle_relative_velocity_matrix_jacobian", "Compute the Jacobian of the point-triangle relative velocity matrix."], [32, 14, 1, 0, "point_triangle_tangent_basis", "Compute a basis for the space tangent to the point-triangle pair."], [32, 14, 1, 0, "point_triangle_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis for the point-triangle pair."], [34, 14, 1, 0, "project_to_pd", "Matrix projection onto positive definite cone"], [34, 14, 1, 0, "project_to_psd", "Matrix projection onto positive semi-definite cone"], [29, 14, 1, 0, "segment_segment_intersect", "Given two segments in 2d test whether they intersect each other using predicates orient2d"], [34, 14, 1, 0, "set_logger_level", "Set log level"], [34, 14, 1, 0, "set_num_threads", "set maximum number of threads to use"], [28, 14, 1, 0, "smooth_friction_f0", "Smooth friction mollifier function."], [28, 14, 1, 0, "smooth_friction_f1", "The first derivative of the smooth friction mollifier."], [28, 14, 1, 0, "smooth_friction_f1_over_x", "Compute the derivative of the smooth friction mollifier divided by y (\\frac{f_0'(y)}{y})."], [28, 14, 1, 0, "smooth_friction_f2", "The second derivative of the smooth friction mollifier."], [28, 14, 1, 0, "smooth_friction_f2_x_minus_f1_over_x3", "The derivative of f1 times y minus f1 all divided by y cubed."], [21, 14, 1, 0, "tangential_adhesion_f0", "The tangential adhesion mollifier function."], [21, 14, 1, 0, "tangential_adhesion_f1", "The first derivative of the tangential adhesion mollifier function."], [21, 14, 1, 0, "tangential_adhesion_f1_over_x", "The first derivative of the tangential adhesion mollifier function divided by y."], [21, 14, 1, 0, "tangential_adhesion_f2", "The second derivative of the tangential adhesion mollifier function."], [21, 14, 1, 0, "tangential_adhesion_f2_x_minus_f1_over_x3", "The second derivative of the tangential adhesion mollifier function times y minus the first derivative all divided by y cubed."], [22, 14, 1, 0, "update_barrier_stiffness", "Update the barrier stiffness if the distance is decreasing and less than dhat_epsilon_scale * diag."]], "ipctk.AABB": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", "Overloaded function."], [23, 10, 1, 0, "__module__", ""], [23, 11, 1, 0, "conservative_inflation", "Compute a conservative inflation of the AABB."], [23, 11, 1, 0, "from_point", "Overloaded function."], [23, 11, 1, 0, "intersects", "Check if another AABB intersects with this one."], [23, 13, 1, 0, "max", "Maximum corner of the AABB."], [23, 13, 1, 0, "min", "Minimum corner of the AABB."], [23, 13, 1, 0, "vertex_ids", "Vertex IDs attached to the AABB."]], "ipctk.AABB.intersects": [[23, 12, 2, 0, "other", "The other AABB."]], "ipctk.BVH": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", ""], [23, 10, 1, 0, "__module__", ""]], "ipctk.Barrier": [[22, 11, 1, 0, "__call__", "Evaluate the barrier function."], [22, 11, 1, 0, "__init__", ""], [22, 10, 1, 0, "__module__", ""], [22, 11, 1, 0, "first_derivative", "Evaluate the first derivative of the barrier function wrt d."], [22, 11, 1, 0, "second_derivative", "Evaluate the second derivative of the barrier function wrt d."], [22, 11, 1, 0, "units", "Get the units of the barrier function."]], "ipctk.Barrier.__call__": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.Barrier.first_derivative": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.Barrier.second_derivative": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.Barrier.units": [[22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.BarrierPotential": [[31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__init__", "Overloaded function."], [31, 10, 1, 0, "__module__", ""], [31, 13, 1, 0, "barrier", "Barrier function used to compute the potential."], [31, 13, 1, 0, "dhat", "Barrier activation distance."]], "ipctk.BroadPhase": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", ""], [23, 10, 1, 0, "__module__", ""], [23, 11, 1, 0, "build", "Overloaded function."], [23, 13, 1, 0, "can_vertices_collide", "Function for determining if two vertices can collide."], [23, 11, 1, 0, "clear", "Clear any built data."], [23, 11, 1, 0, "detect_collision_candidates", "Detect all collision candidates needed for a given dimensional simulation."], [23, 11, 1, 0, "detect_edge_edge_candidates", "Find the candidate edge-edge collisions."], [23, 11, 1, 0, "detect_edge_face_candidates", "Find the candidate edge-face intersections."], [23, 11, 1, 0, "detect_edge_vertex_candidates", "Find the candidate edge-vertex collisions."], [23, 11, 1, 0, "detect_face_face_candidates", "Find the candidate face-face collisions."], [23, 11, 1, 0, "detect_face_vertex_candidates", "Find the candidate face-vertex collisions."], [23, 11, 1, 0, "detect_vertex_vertex_candidates", "Find the candidate vertex-vertex collisions."], [23, 11, 1, 0, "make_broad_phase", "Construct a registered broad phase object."]], "ipctk.BroadPhase.detect_collision_candidates": [[23, 12, 2, 0, "dim", "The dimension of the simulation (i.e., 2 or 3)."]], "ipctk.BroadPhase.make_broad_phase": [[23, 12, 2, 0, "method", "The broad phase method to use."]], "ipctk.BroadPhaseMethod": [[23, 10, 1, 0, "BOUNDING_VOLUME_HIERARCHY", ""], [23, 10, 1, 0, "BRUTE_FORCE", ""], [23, 10, 1, 0, "HASH_GRID", ""], [23, 10, 1, 0, "SPATIAL_HASH", ""], [23, 10, 1, 0, "SWEEP_AND_PRUNE", ""], [23, 10, 1, 0, "SWEEP_AND_TINIEST_QUEUE", ""], [23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__eq__", ""], [23, 11, 1, 0, "__getstate__", ""], [23, 11, 1, 0, "__hash__", ""], [23, 11, 1, 0, "__index__", ""], [23, 11, 1, 0, "__init__", ""], [23, 11, 1, 0, "__int__", ""], [23, 10, 1, 0, "__members__", ""], [23, 10, 1, 0, "__module__", ""], [23, 11, 1, 0, "__ne__", ""], [23, 11, 1, 0, "__repr__", ""], [23, 11, 1, 0, "__setstate__", ""], [23, 11, 1, 0, "__str__", ""], [23, 13, 1, 0, "name", ""], [23, 13, 1, 0, "value", ""]], "ipctk.BruteForce": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", ""], [23, 10, 1, 0, "__module__", ""]], "ipctk.Candidates": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__getitem__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__len__", ""], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "build", "Overloaded function."], [24, 11, 1, 0, "clear", ""], [24, 11, 1, 0, "compute_cfl_stepsize", "Computes a CFL-inspired CCD maximum step step size."], [24, 11, 1, 0, "compute_collision_free_stepsize", "Computes a maximal step size that is collision free using the set of collision candidates."], [24, 11, 1, 0, "compute_noncandidate_conservative_stepsize", "Computes a conservative bound on the largest-feasible step size for surface primitives not in collision."], [24, 13, 1, 0, "ee_candidates", ""], [24, 11, 1, 0, "empty", ""], [24, 13, 1, 0, "ev_candidates", ""], [24, 13, 1, 0, "fv_candidates", ""], [24, 11, 1, 0, "is_step_collision_free", "Determine if the step is collision free from the set of candidates."], [24, 11, 1, 0, "save_obj", ""], [24, 13, 1, 0, "vv_candidates", ""]], "ipctk.ClampedLogBarrier": [[22, 10, 1, 0, "__annotations__", ""], [22, 11, 1, 0, "__init__", ""], [22, 10, 1, 0, "__module__", ""]], "ipctk.CollisionMesh": [[26, 10, 1, 0, "__annotations__", ""], [26, 11, 1, 0, "__init__", "Overloaded function."], [26, 10, 1, 0, "__module__", ""], [26, 11, 1, 0, "are_adjacencies_initialized", "Determine if the adjacencies have been initialized by calling init_adjacencies()."], [26, 11, 1, 0, "are_area_jacobians_initialized", "Determine if the area Jacobians have been initialized by calling init_area_jacobians()."], [26, 11, 1, 0, "build_from_full_mesh", "Helper function that automatically builds include_vertex using construct_is_on_surface."], [26, 13, 1, 0, "can_collide", "A function that takes two vertex IDs and returns true if the vertices (and faces or edges containing the vertices) can collide."], [26, 13, 1, 0, "codim_edges", "Get the indices of codimensional edges of the collision mesh (#CE x 1)."], [26, 13, 1, 0, "codim_vertices", "Get the indices of codimensional vertices of the collision mesh (#CV x 1)."], [26, 11, 1, 0, "construct_faces_to_edges", "Construct a matrix that maps from the faces' edges to rows in the edges matrix."], [26, 11, 1, 0, "construct_is_on_surface", "Construct a vector of bools indicating whether each vertex is on the surface."], [26, 13, 1, 0, "dim", "Get the dimension of the mesh."], [26, 11, 1, 0, "displace_vertices", "Compute the vertex positions from vertex displacements on the full mesh."], [26, 11, 1, 0, "edge_area", "Get the barycentric area of an edge."], [26, 11, 1, 0, "edge_area_gradient", "Get the gradient of the barycentric area of an edge wrt the rest positions of all points."], [26, 11, 1, 0, "edge_areas", "Get the barycentric area of the edges."], [26, 13, 1, 0, "edge_vertex_adjacencies", "Get the edge-vertex adjacency matrix."], [26, 13, 1, 0, "edges", "Get the edges of the collision mesh (#E \u00d7 2)."], [26, 13, 1, 0, "faces", "Get the faces of the collision mesh (#F \u00d7 3)."], [26, 13, 1, 0, "faces_to_edges", "Get the mapping from faces to edges of the collision mesh (#F \u00d7 3)."], [26, 13, 1, 0, "full_ndof", "Get the number of degrees of freedom in the full mesh."], [26, 13, 1, 0, "full_num_vertices", "Get the number of vertices in the full mesh."], [26, 11, 1, 0, "init_adjacencies", "Initialize vertex-vertex and edge-vertex adjacencies."], [26, 11, 1, 0, "init_area_jacobians", "Initialize vertex and edge areas."], [26, 11, 1, 0, "is_vertex_on_boundary", "Is a vertex on the boundary of the collision mesh?"], [26, 11, 1, 0, "map_displacements", "Map vertex displacements on the full mesh to vertex displacements on the collision mesh."], [26, 13, 1, 0, "ndof", "Get the number of degrees of freedom in the collision mesh."], [26, 13, 1, 0, "num_codim_edges", "Get the number of codimensional edges in the collision mesh."], [26, 13, 1, 0, "num_codim_vertices", "Get the number of codimensional vertices in the collision mesh."], [26, 13, 1, 0, "num_edges", "Get the number of edges in the collision mesh."], [26, 13, 1, 0, "num_faces", "Get the number of faces in the collision mesh."], [26, 13, 1, 0, "num_vertices", "Get the number of vertices in the collision mesh."], [26, 13, 1, 0, "rest_positions", "Get the vertices of the collision mesh at rest (#V \u00d7 dim)."], [26, 11, 1, 0, "to_full_dof", "Overloaded function."], [26, 11, 1, 0, "to_full_vertex_id", "Map a vertex ID to the corresponding vertex ID in the full mesh."], [26, 11, 1, 0, "vertex_area", "Get the barycentric area of a vertex."], [26, 11, 1, 0, "vertex_area_gradient", "Get the gradient of the barycentric area of a vertex wrt the rest positions of all points."], [26, 13, 1, 0, "vertex_areas", "Get the barycentric area of the vertices."], [26, 13, 1, 0, "vertex_edge_adjacencies", "Get the vertex-edge adjacency matrix."], [26, 13, 1, 0, "vertex_vertex_adjacencies", "Get the vertex-vertex adjacency matrix."], [26, 11, 1, 0, "vertices", "Compute the vertex positions from the positions of the full mesh."]], "ipctk.CollisionMesh.build_from_full_mesh": [[26, 12, 2, 0, "edges", "The edge matrix of mesh (#E \u00d7 2)."], [26, 12, 2, 0, "faces", "The face matrix of mesh (#F \u00d7 3)."], [26, 12, 2, 0, "full_rest_positions", "The full vertices at rest (#FV \u00d7 dim)."]], "ipctk.CollisionMesh.construct_faces_to_edges": [[26, 12, 2, 0, "edges", "The edge matrix of mesh (#E \u00d7 2)."], [26, 12, 2, 0, "faces", "The face matrix of mesh (#F \u00d7 3)."]], "ipctk.CollisionMesh.construct_is_on_surface": [[26, 12, 2, 0, "codim_vertices", "The indices of codimensional vertices (#CV x 1)."], [26, 12, 2, 0, "edges", "The surface edges of the mesh (#E \u00d7 2)."], [26, 12, 2, 0, "num_vertices", "The number of vertices in the mesh."]], "ipctk.CollisionMesh.displace_vertices": [[26, 12, 2, 0, "full_displacements", "The vertex displacements on the full mesh (#FV \u00d7 dim)."]], "ipctk.CollisionMesh.edge_area": [[26, 12, 2, 0, "ei", "Edge ID."]], "ipctk.CollisionMesh.edge_area_gradient": [[26, 12, 2, 0, "ei", "Edge ID."]], "ipctk.CollisionMesh.is_vertex_on_boundary": [[26, 12, 2, 0, "vi", "Vertex ID."]], "ipctk.CollisionMesh.map_displacements": [[26, 12, 2, 0, "full_displacements", "The vertex displacements on the full mesh (#FV \u00d7 dim)."]], "ipctk.CollisionMesh.to_full_vertex_id": [[26, 12, 2, 0, "id", "Vertex ID in the collision mesh."]], "ipctk.CollisionMesh.vertex_area": [[26, 12, 2, 0, "vi", "Vertex ID."]], "ipctk.CollisionMesh.vertex_area_gradient": [[26, 12, 2, 0, "vi", "Vertex ID."]], "ipctk.CollisionMesh.vertices": [[26, 12, 2, 0, "full_positions", "The vertex positions of the full mesh (#FV \u00d7 dim)."]], "ipctk.ContinuousCollisionCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__init__", ""], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "ccd", "Perform narrow-phase CCD on the candidate."], [24, 11, 1, 0, "print_ccd_query", "Print the CCD query to cout."]], "ipctk.ContinuousCollisionCandidate.print_ccd_query": [[24, 12, 2, 0, "vertices_t0", "Stencil vertices at the start of the time step."]], "ipctk.EdgeEdgeCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__eq__", ""], [24, 10, 1, 0, "__hash__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__lt__", "Compare EdgeEdgeCandidates for sorting."], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "__ne__", ""], [24, 11, 1, 0, "__repr__", ""], [24, 11, 1, 0, "__str__", ""], [24, 13, 1, 0, "edge0_id", "ID of the first edge."], [24, 13, 1, 0, "edge1_id", "ID of the second edge."], [24, 11, 1, 0, "known_dtype", ""]], "ipctk.EdgeEdgeDistanceType": [[27, 10, 1, 0, "AUTO", ""], [27, 10, 1, 0, "EA0_EB", ""], [27, 10, 1, 0, "EA0_EB0", ""], [27, 10, 1, 0, "EA0_EB1", ""], [27, 10, 1, 0, "EA1_EB", ""], [27, 10, 1, 0, "EA1_EB0", ""], [27, 10, 1, 0, "EA1_EB1", ""], [27, 10, 1, 0, "EA_EB", ""], [27, 10, 1, 0, "EA_EB0", ""], [27, 10, 1, 0, "EA_EB1", ""], [27, 10, 1, 0, "__annotations__", ""], [27, 11, 1, 0, "__eq__", ""], [27, 11, 1, 0, "__getstate__", ""], [27, 11, 1, 0, "__hash__", ""], [27, 11, 1, 0, "__index__", ""], [27, 11, 1, 0, "__init__", ""], [27, 11, 1, 0, "__int__", ""], [27, 10, 1, 0, "__members__", ""], [27, 10, 1, 0, "__module__", ""], [27, 11, 1, 0, "__ne__", ""], [27, 11, 1, 0, "__repr__", ""], [27, 11, 1, 0, "__setstate__", ""], [27, 11, 1, 0, "__str__", ""], [27, 13, 1, 0, "name", ""], [27, 13, 1, 0, "value", ""]], "ipctk.EdgeEdgeNormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__eq__", ""], [30, 10, 1, 0, "__hash__", ""], [30, 11, 1, 0, "__init__", "Overloaded function."], [30, 11, 1, 0, "__lt__", ""], [30, 10, 1, 0, "__module__", ""], [30, 11, 1, 0, "__ne__", ""], [30, 13, 1, 0, "dtype", "Cached distance type."], [30, 13, 1, 0, "eps_x", "Mollifier activation threshold."]], "ipctk.EdgeEdgeTangentialCollision": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__init__", "Overloaded function."], [33, 10, 1, 0, "__module__", ""]], "ipctk.EdgeFaceCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__eq__", ""], [24, 10, 1, 0, "__hash__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__lt__", "Compare EdgeFaceCandidate for sorting."], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "__ne__", ""], [24, 11, 1, 0, "__repr__", ""], [24, 11, 1, 0, "__str__", ""], [24, 13, 1, 0, "edge_id", "ID of the edge"], [24, 13, 1, 0, "face_id", "ID of the face"]], "ipctk.EdgeVertexCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__eq__", ""], [24, 10, 1, 0, "__hash__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__lt__", "Compare EdgeVertexCandidates for sorting."], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "__ne__", ""], [24, 11, 1, 0, "__repr__", ""], [24, 11, 1, 0, "__str__", ""], [24, 13, 1, 0, "edge_id", "ID of the edge"], [24, 11, 1, 0, "known_dtype", ""], [24, 13, 1, 0, "vertex_id", "ID of the vertex"]], "ipctk.EdgeVertexNormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__init__", "Overloaded function."], [30, 10, 1, 0, "__module__", ""]], "ipctk.EdgeVertexTangentialCollision": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__init__", "Overloaded function."], [33, 10, 1, 0, "__module__", ""]], "ipctk.FaceVertexCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__eq__", ""], [24, 10, 1, 0, "__hash__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__lt__", "Compare FaceVertexCandidate for sorting."], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "__ne__", ""], [24, 11, 1, 0, "__repr__", ""], [24, 11, 1, 0, "__str__", ""], [24, 13, 1, 0, "face_id", "ID of the face"], [24, 11, 1, 0, "known_dtype", ""], [24, 13, 1, 0, "vertex_id", "ID of the vertex"]], "ipctk.FaceVertexNormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__init__", "Overloaded function."], [30, 10, 1, 0, "__module__", ""]], "ipctk.FaceVertexTangentialCollision": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__init__", "Overloaded function."], [33, 10, 1, 0, "__module__", ""]], "ipctk.FrictionPotential": [[31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__init__", "Construct a friction potential."], [31, 10, 1, 0, "__module__", ""], [31, 13, 1, 0, "eps_v", "The smooth friction mollifier parameter \\epsilon_{v}."]], "ipctk.FrictionPotential.__init__": [[31, 12, 2, 0, "eps_v", "The smooth friction mollifier parameter \\\\epsilon_{v}."]], "ipctk.HashGrid": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", ""], [23, 10, 1, 0, "__module__", ""], [23, 13, 1, 0, "cell_size", ""], [23, 13, 1, 0, "domain_max", ""], [23, 13, 1, 0, "domain_min", ""], [23, 13, 1, 0, "grid_size", ""]], "ipctk.IntervalNonlinearTrajectory": [[25, 10, 1, 0, "__annotations__", ""], [25, 11, 1, 0, "__call__", "Overloaded function."], [25, 11, 1, 0, "__init__", ""], [25, 10, 1, 0, "__module__", ""], [25, 11, 1, 0, "max_distance_from_linear", "Compute the maximum distance from the nonlinear trajectory to a linearized trajectory"]], "ipctk.IntervalNonlinearTrajectory.max_distance_from_linear": [[25, 12, 2, 0, "t0", "Start time of the trajectory"], [25, 12, 2, 0, "t1", "End time of the trajectory"]], "ipctk.LoggerLevel": [[34, 10, 1, 0, "__annotations__", ""], [34, 11, 1, 0, "__eq__", ""], [34, 11, 1, 0, "__getstate__", ""], [34, 11, 1, 0, "__hash__", ""], [34, 11, 1, 0, "__index__", ""], [34, 11, 1, 0, "__init__", ""], [34, 11, 1, 0, "__int__", ""], [34, 10, 1, 0, "__members__", ""], [34, 10, 1, 0, "__module__", ""], [34, 11, 1, 0, "__ne__", ""], [34, 11, 1, 0, "__repr__", ""], [34, 11, 1, 0, "__setstate__", ""], [34, 11, 1, 0, "__str__", ""], [34, 10, 1, 0, "critical", ""], [34, 10, 1, 0, "debug", ""], [34, 10, 1, 0, "error", ""], [34, 10, 1, 0, "info", ""], [34, 13, 1, 0, "name", ""], [34, 10, 1, 0, "off", ""], [34, 10, 1, 0, "trace", ""], [34, 13, 1, 0, "value", ""], [34, 10, 1, 0, "warn", ""]], "ipctk.NonlinearTrajectory": [[25, 10, 1, 0, "__annotations__", ""], [25, 11, 1, 0, "__call__", "Compute the point's position at time t"], [25, 11, 1, 0, "__init__", ""], [25, 10, 1, 0, "__module__", ""], [25, 11, 1, 0, "max_distance_from_linear", "Compute the maximum distance from the nonlinear trajectory to a linearized trajectory"]], "ipctk.NonlinearTrajectory.max_distance_from_linear": [[25, 12, 2, 0, "t0", "Start time of the trajectory"], [25, 12, 2, 0, "t1", "End time of the trajectory"]], "ipctk.NormalAdhesionPotential": [[31, 13, 1, 0, "Y", "The Young's modulus (Y))."], [31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__init__", ""], [31, 10, 1, 0, "__module__", ""], [31, 13, 1, 0, "dhat_a", "The adhesion activation distance (\\hat{d}_{a}."], [31, 13, 1, 0, "dhat_p", "The distance of largest adhesion force (\\hat{d}_{p}) (0 < \\hat{d}_{p} < \\hat{d}_{a})."], [31, 13, 1, 0, "eps_c", "The critical strain (\\varepsilon_{c}))."]], "ipctk.NormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__init__", ""], [30, 10, 1, 0, "__module__", ""], [30, 13, 1, 0, "dmin", "The minimum separation distance."], [30, 11, 1, 0, "is_mollified", "Does the distance potentially have to be mollified?"], [30, 11, 1, 0, "mollifier", "Overloaded function."], [30, 11, 1, 0, "mollifier_gradient", "Overloaded function."], [30, 11, 1, 0, "mollifier_gradient_jacobian_wrt_x", "Compute the jacobian of the distance mollifier's gradient w.r.t. rest positions."], [30, 11, 1, 0, "mollifier_gradient_wrt_x", "Compute the gradient of the mollifier for the distance w.r.t. rest positions."], [30, 11, 1, 0, "mollifier_hessian", "Overloaded function."], [30, 11, 1, 0, "mollifier_threshold", "Compute the mollifier threshold for the distance."], [30, 13, 1, 0, "weight", "The term's weight (e.g., collision area)"], [30, 13, 1, 0, "weight_gradient", "The gradient of the term's weight wrt the rest positions."]], "ipctk.NormalCollision.mollifier_gradient_jacobian_wrt_x": [[30, 12, 2, 0, "positions", "The stencil's vertex positions."], [30, 12, 2, 0, "rest_positions", "The stencil's rest vertex positions."]], "ipctk.NormalCollision.mollifier_gradient_wrt_x": [[30, 12, 2, 0, "positions", "The stencil's vertex positions."], [30, 12, 2, 0, "rest_positions", "The stencil's rest vertex positions."]], "ipctk.NormalCollision.mollifier_threshold": [[30, 12, 2, 0, "rest_positions", "The stencil's rest vertex positions."]], "ipctk.NormalCollisions": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__getitem__", "Get a reference to collision at index i."], [30, 11, 1, 0, "__init__", ""], [30, 11, 1, 0, "__len__", "Get the number of collisions."], [30, 10, 1, 0, "__module__", ""], [30, 11, 1, 0, "__str__", ""], [30, 11, 1, 0, "build", "Overloaded function."], [30, 11, 1, 0, "clear", "Clear the collision set."], [30, 11, 1, 0, "compute_minimum_distance", "Computes the minimum distance between any non-adjacent elements."], [30, 13, 1, 0, "ee_collisions", ""], [30, 11, 1, 0, "empty", "Get if the collision set are empty."], [30, 13, 1, 0, "enable_shape_derivatives", "If the NormalCollisions are using the convergent formulation."], [30, 13, 1, 0, "ev_collisions", ""], [30, 13, 1, 0, "fv_collisions", ""], [30, 11, 1, 0, "is_edge_edge", "Get if the collision at i is an edge-edge collision."], [30, 11, 1, 0, "is_edge_vertex", "Get if the collision at i is an edge-vertex collision."], [30, 11, 1, 0, "is_face_vertex", "Get if the collision at i is an face-vertex collision."], [30, 11, 1, 0, "is_plane_vertex", "Get if the collision at i is an plane-vertex collision."], [30, 11, 1, 0, "is_vertex_vertex", "Get if the collision at i is a vertex-vertex collision."], [30, 13, 1, 0, "pv_collisions", ""], [30, 13, 1, 0, "use_area_weighting", "If the NormalCollisions should use the convergent formulation."], [30, 13, 1, 0, "use_improved_max_approximator", "If the NormalCollisions should use the improved max approximator."], [30, 13, 1, 0, "vv_collisions", ""]], "ipctk.NormalCollisions.__getitem__": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalCollisions.is_edge_edge": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalCollisions.is_edge_vertex": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalCollisions.is_face_vertex": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalCollisions.is_plane_vertex": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalCollisions.is_vertex_vertex": [[30, 12, 2, 0, "i", "The index of the collision."]], "ipctk.NormalPotential": [[31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__call__", "Overloaded function."], [31, 11, 1, 0, "__init__", ""], [31, 10, 1, 0, "__module__", ""], [31, 11, 1, 0, "force_magnitude", "Compute the force magnitude for a collision."], [31, 11, 1, 0, "force_magnitude_gradient", "Compute the gradient of the force magnitude for a collision."], [31, 11, 1, 0, "gradient", "Overloaded function."], [31, 11, 1, 0, "hessian", "Overloaded function."], [31, 11, 1, 0, "shape_derivative", "Overloaded function."]], "ipctk.NormalPotential.force_magnitude": [[31, 12, 2, 0, "barrier_stiffness", "The barrier stiffness."], [31, 12, 2, 0, "distance_squared", "The squared distance between elements."], [31, 12, 2, 0, "dmin", "The minimum distance offset to the barrier."]], "ipctk.NormalPotential.force_magnitude_gradient": [[31, 12, 2, 0, "barrier_stiffness", "The stiffness of the barrier."], [31, 12, 2, 0, "distance_squared", "The squared distance between elements."], [31, 12, 2, 0, "distance_squared_gradient", "The gradient of the squared distance."], [31, 12, 2, 0, "dmin", "The minimum distance offset to the barrier."]], "ipctk.PSDProjectionMethod": [[34, 10, 1, 0, "ABS", ""], [34, 10, 1, 0, "CLAMP", ""], [34, 10, 1, 0, "NONE", ""], [34, 10, 1, 0, "__annotations__", ""], [34, 11, 1, 0, "__eq__", ""], [34, 11, 1, 0, "__getstate__", ""], [34, 11, 1, 0, "__hash__", ""], [34, 11, 1, 0, "__index__", ""], [34, 11, 1, 0, "__init__", ""], [34, 11, 1, 0, "__int__", ""], [34, 10, 1, 0, "__members__", ""], [34, 10, 1, 0, "__module__", ""], [34, 11, 1, 0, "__ne__", ""], [34, 11, 1, 0, "__repr__", ""], [34, 11, 1, 0, "__setstate__", ""], [34, 11, 1, 0, "__str__", ""], [34, 13, 1, 0, "name", ""], [34, 13, 1, 0, "value", ""]], "ipctk.PlaneVertexNormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__init__", ""], [30, 10, 1, 0, "__module__", ""], [30, 13, 1, 0, "plane_normal", "The plane's normal."], [30, 13, 1, 0, "plane_origin", "The plane's origin."], [30, 13, 1, 0, "vertex_id", "The vertex's id."]], "ipctk.PointEdgeDistanceType": [[27, 10, 1, 0, "AUTO", ""], [27, 10, 1, 0, "P_E", ""], [27, 10, 1, 0, "P_E0", ""], [27, 10, 1, 0, "P_E1", ""], [27, 10, 1, 0, "__annotations__", ""], [27, 11, 1, 0, "__eq__", ""], [27, 11, 1, 0, "__getstate__", ""], [27, 11, 1, 0, "__hash__", ""], [27, 11, 1, 0, "__index__", ""], [27, 11, 1, 0, "__init__", ""], [27, 11, 1, 0, "__int__", ""], [27, 10, 1, 0, "__members__", ""], [27, 10, 1, 0, "__module__", ""], [27, 11, 1, 0, "__ne__", ""], [27, 11, 1, 0, "__repr__", ""], [27, 11, 1, 0, "__setstate__", ""], [27, 11, 1, 0, "__str__", ""], [27, 13, 1, 0, "name", ""], [27, 13, 1, 0, "value", ""]], "ipctk.PointTriangleDistanceType": [[27, 10, 1, 0, "AUTO", ""], [27, 10, 1, 0, "P_E0", ""], [27, 10, 1, 0, "P_E1", ""], [27, 10, 1, 0, "P_E2", ""], [27, 10, 1, 0, "P_T", ""], [27, 10, 1, 0, "P_T0", ""], [27, 10, 1, 0, "P_T1", ""], [27, 10, 1, 0, "P_T2", ""], [27, 10, 1, 0, "__annotations__", ""], [27, 11, 1, 0, "__eq__", ""], [27, 11, 1, 0, "__getstate__", ""], [27, 11, 1, 0, "__hash__", ""], [27, 11, 1, 0, "__index__", ""], [27, 11, 1, 0, "__init__", ""], [27, 11, 1, 0, "__int__", ""], [27, 10, 1, 0, "__members__", ""], [27, 10, 1, 0, "__module__", ""], [27, 11, 1, 0, "__ne__", ""], [27, 11, 1, 0, "__repr__", ""], [27, 11, 1, 0, "__setstate__", ""], [27, 11, 1, 0, "__str__", ""], [27, 13, 1, 0, "name", ""], [27, 13, 1, 0, "value", ""]], "ipctk.SpatialHash": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", "Overloaded function."], [23, 10, 1, 0, "__module__", ""], [23, 11, 1, 0, "build", "Overloaded function."], [23, 11, 1, 0, "clear", ""], [23, 13, 1, 0, "edge_start_ind", ""], [23, 13, 1, 0, "edge_to_voxels", "Map from edge index to the voxel indices it occupies."], [23, 13, 1, 0, "face_to_voxels", "Map from face index to the voxel indices it occupies."], [23, 11, 1, 0, "is_edge_index", "Check if primitive index refers to an edge."], [23, 11, 1, 0, "is_triangle_index", "Check if primitive index refers to a triangle."], [23, 11, 1, 0, "is_vertex_index", "Check if primitive index refers to a vertex."], [23, 13, 1, 0, "left_bottom_corner", "The left bottom corner of the world bounding box."], [23, 13, 1, 0, "one_div_voxelSize", "1.0 / voxel_size"], [23, 13, 1, 0, "point_to_voxels", "Map from point index to the voxel indices it occupies."], [23, 13, 1, 0, "right_top_corner", "The right top corner of the world bounding box."], [23, 11, 1, 0, "to_edge_index", "Convert a primitive index to an edge index."], [23, 11, 1, 0, "to_triangle_index", "Convert a primitive index to a triangle index."], [23, 13, 1, 0, "tri_start_ind", ""], [23, 13, 1, 0, "voxel_count", "The number of voxels in each dimension."], [23, 13, 1, 0, "voxel_count_0x1", "The number of voxels in the first two dimensions."], [23, 13, 1, 0, "voxel_to_primitives", "Map from voxel index to the primitive indices it contains."]], "ipctk.SweepAndPrune": [[23, 10, 1, 0, "__annotations__", ""], [23, 11, 1, 0, "__init__", ""], [23, 10, 1, 0, "__module__", ""]], "ipctk.TangentialAdhesionPotential": [[31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__init__", "Construct a tangential adhesion potential."], [31, 10, 1, 0, "__module__", ""], [31, 13, 1, 0, "eps_a", "Get the tangential adhesion mollifier parameter \u001bpsilon_a."]], "ipctk.TangentialAdhesionPotential.__init__": [[31, 12, 2, 0, "eps_a", "The tangential adhesion mollifier parameter \\epsilon_a."]], "ipctk.TangentialCollision": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__init__", ""], [33, 10, 1, 0, "__module__", ""], [33, 13, 1, 0, "closest_point", "Barycentric coordinates of the closest point(s)"], [33, 11, 1, 0, "compute_closest_point", "Compute the barycentric coordinates of the closest point."], [33, 11, 1, 0, "compute_closest_point_jacobian", "Compute the Jacobian of the barycentric coordinates of the closest point."], [33, 11, 1, 0, "compute_tangent_basis", "Compute the tangent basis of the collision."], [33, 11, 1, 0, "compute_tangent_basis_jacobian", "Compute the Jacobian of the tangent basis of the collision."], [33, 13, 1, 0, "dim", "Get the dimension of the collision."], [33, 13, 1, 0, "mu", "Ratio between normal and tangential forces (e.g., friction coefficient)"], [33, 13, 1, 0, "ndof", "Get the number of degrees of freedom for the collision."], [33, 13, 1, 0, "normal_force_magnitude", "Normal force magnitude"], [33, 11, 1, 0, "relative_velocity", "Compute the relative velocity of the collision."], [33, 11, 1, 0, "relative_velocity_matrix", "Overloaded function."], [33, 11, 1, 0, "relative_velocity_matrix_jacobian", "Construct the Jacobian of the relative velocity premultiplier wrt the closest points."], [33, 13, 1, 0, "tangent_basis", "Tangent basis of the collision (max size 3\u00d72)"], [33, 13, 1, 0, "weight", "Weight"], [33, 13, 1, 0, "weight_gradient", "Gradient of weight with respect to all DOF"]], "ipctk.TangentialCollision.compute_closest_point": [[33, 12, 2, 0, "positions", "Collision stencil's vertex positions."]], "ipctk.TangentialCollision.compute_closest_point_jacobian": [[33, 12, 2, 0, "positions", "Collision stencil's vertex positions."]], "ipctk.TangentialCollision.compute_tangent_basis": [[33, 12, 2, 0, "positions", "Collision stencil's vertex positions."]], "ipctk.TangentialCollision.compute_tangent_basis_jacobian": [[33, 12, 2, 0, "positions", "Collision stencil's vertex positions."]], "ipctk.TangentialCollision.relative_velocity_matrix_jacobian": [[33, 12, 2, 0, "closest_point", "Barycentric coordinates of the closest point."]], "ipctk.TangentialCollisions": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__getitem__", "Get a reference to collision at index i."], [33, 11, 1, 0, "__init__", ""], [33, 11, 1, 0, "__len__", "Get the number of friction collisions."], [33, 10, 1, 0, "__module__", ""], [33, 11, 1, 0, "build", "Overloaded function."], [33, 11, 1, 0, "clear", "Clear the friction collisions."], [33, 11, 1, 0, "default_blend_mu", ""], [33, 13, 1, 0, "ee_collisions", ""], [33, 11, 1, 0, "empty", "Get if the friction collisions are empty."], [33, 13, 1, 0, "ev_collisions", ""], [33, 13, 1, 0, "fv_collisions", ""], [33, 13, 1, 0, "vv_collisions", ""]], "ipctk.TangentialCollisions.__getitem__": [[33, 12, 2, 0, "i", "The index of the collision."]], "ipctk.TangentialPotential": [[31, 9, 1, 0, "DiffWRT", "Bases: pybind11_object"], [31, 10, 1, 0, "LAGGED_DISPLACEMENTS", ""], [31, 10, 1, 0, "REST_POSITIONS", ""], [31, 10, 1, 0, "VELOCITIES", ""], [31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__call__", "Overloaded function."], [31, 11, 1, 0, "__init__", ""], [31, 10, 1, 0, "__module__", ""], [31, 11, 1, 0, "force", "Overloaded function."], [31, 11, 1, 0, "force_jacobian", "Overloaded function."], [31, 11, 1, 0, "gradient", "Overloaded function."], [31, 11, 1, 0, "hessian", "Overloaded function."]], "ipctk.TangentialPotential.DiffWRT": [[31, 10, 1, 0, "LAGGED_DISPLACEMENTS", ""], [31, 10, 1, 0, "REST_POSITIONS", ""], [31, 10, 1, 0, "VELOCITIES", ""], [31, 10, 1, 0, "__annotations__", ""], [31, 11, 1, 0, "__eq__", ""], [31, 11, 1, 0, "__getstate__", ""], [31, 11, 1, 0, "__hash__", ""], [31, 11, 1, 0, "__index__", ""], [31, 11, 1, 0, "__init__", ""], [31, 11, 1, 0, "__int__", ""], [31, 10, 1, 0, "__members__", ""], [31, 10, 1, 0, "__module__", ""], [31, 11, 1, 0, "__ne__", ""], [31, 11, 1, 0, "__repr__", ""], [31, 11, 1, 0, "__setstate__", ""], [31, 11, 1, 0, "__str__", ""], [31, 13, 1, 0, "name", ""], [31, 13, 1, 0, "value", ""]], "ipctk.VertexVertexCandidate": [[24, 10, 1, 0, "__annotations__", ""], [24, 11, 1, 0, "__eq__", ""], [24, 10, 1, 0, "__hash__", ""], [24, 11, 1, 0, "__init__", ""], [24, 11, 1, 0, "__lt__", "Compare EdgeVertexCandidates for sorting."], [24, 10, 1, 0, "__module__", ""], [24, 11, 1, 0, "__ne__", ""], [24, 11, 1, 0, "__repr__", ""], [24, 11, 1, 0, "__str__", ""], [24, 13, 1, 0, "vertex0_id", "ID of the first vertex"], [24, 13, 1, 0, "vertex1_id", "ID of the second vertex"]], "ipctk.VertexVertexNormalCollision": [[30, 10, 1, 0, "__annotations__", ""], [30, 11, 1, 0, "__init__", "Overloaded function."], [30, 10, 1, 0, "__module__", ""]], "ipctk.VertexVertexTangentialCollision": [[33, 10, 1, 0, "__annotations__", ""], [33, 11, 1, 0, "__init__", "Overloaded function."], [33, 10, 1, 0, "__module__", ""]], "ipctk.barrier": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.barrier_first_derivative": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.barrier_force_magnitude": [[22, 12, 2, 0, "barrier", "The barrier function."], [22, 12, 2, 0, "barrier_stiffness", "The stiffness of the barrier."], [22, 12, 2, 0, "dhat", "The activation distance of the barrier."], [22, 12, 2, 0, "distance_squared", "The squared distance between elements."], [22, 12, 2, 0, "dmin", "The minimum distance offset to the barrier."]], "ipctk.barrier_force_magnitude_gradient": [[22, 12, 2, 0, "barrier", "The barrier function."], [22, 12, 2, 0, "barrier_stiffness", "The stiffness of the barrier."], [22, 12, 2, 0, "dhat", "The activation distance of the barrier."], [22, 12, 2, 0, "distance_squared", "The squared distance between elements."], [22, 12, 2, 0, "distance_squared_gradient", "The gradient of the squared distance."], [22, 12, 2, 0, "dmin", "The minimum distance offset to the barrier."]], "ipctk.barrier_second_derivative": [[22, 12, 2, 0, "d", "The distance."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."]], "ipctk.conservative_piecewise_linear_ccd": [[25, 12, 2, 0, "conservative_rescaling", "Conservative rescaling of the time of impact."], [25, 12, 2, 0, "distance", "Return the distance for a given time in [0, 1]."], [25, 12, 2, 0, "linear_ccd", "Perform linear CCD on a given time interval."], [25, 12, 2, 0, "max_distance_from_linear", "Return the maximum distance from the linearized trajectory for a given time interval."], [25, 12, 2, 0, "min_distance", "Minimum separation distance between the objects."], [25, 12, 2, 0, "tmax", "Maximum time to check for collision."]], "ipctk.edge_edge_closest_point": [[32, 12, 2, 0, "ea0", "First point of the first edge"], [32, 12, 2, 0, "ea1", "Second point of the first edge"], [32, 12, 2, 0, "eb0", "First point of the second edge"], [32, 12, 2, 0, "eb1", "Second point of the second edge"]], "ipctk.edge_edge_closest_point_jacobian": [[32, 12, 2, 0, "ea0", "First point of the first edge"], [32, 12, 2, 0, "ea1", "Second point of the first edge"], [32, 12, 2, 0, "eb0", "First point of the second edge"], [32, 12, 2, 0, "eb1", "Second point of the second edge"]], "ipctk.edge_edge_cross_squarednorm": [[27, 12, 2, 0, "ea0", "The first vertex of the first edge."], [27, 12, 2, 0, "ea1", "The second vertex of the first edge."], [27, 12, 2, 0, "eb0", "The first vertex of the second edge."], [27, 12, 2, 0, "eb1", "The second vertex of the second edge."]], "ipctk.edge_edge_cross_squarednorm_gradient": [[27, 12, 2, 0, "ea0", "The first vertex of the first edge."], [27, 12, 2, 0, "ea1", "The second vertex of the first edge."], [27, 12, 2, 0, "eb0", "The first vertex of the second edge."], [27, 12, 2, 0, "eb1", "The second vertex of the second edge."]], "ipctk.edge_edge_cross_squarednorm_hessian": [[27, 12, 2, 0, "ea0", "The first vertex of the first edge."], [27, 12, 2, 0, "ea1", "The second vertex of the first edge."], [27, 12, 2, 0, "eb0", "The first vertex of the second edge."], [27, 12, 2, 0, "eb1", "The second vertex of the second edge."]], "ipctk.edge_edge_distance_type": [[27, 12, 2, 0, "ea0", "The first vertex of the first edge."], [27, 12, 2, 0, "ea1", "The second vertex of the first edge."], [27, 12, 2, 0, "eb0", "The first vertex of the second edge."], [27, 12, 2, 0, "eb1", "The second vertex of the second edge."]], "ipctk.edge_edge_mollifier_threshold": [[27, 12, 2, 0, "ea0_rest", "The rest position of the first vertex of the first edge."], [27, 12, 2, 0, "ea1_rest", "The rest position of the second vertex of the first edge."], [27, 12, 2, 0, "eb0_rest", "The rest position of the first vertex of the second edge."], [27, 12, 2, 0, "eb1_rest", "The rest position of the second vertex of the second edge."]], "ipctk.edge_edge_nonlinear_ccd": [[25, 12, 2, 0, "conservative_rescaling", "Conservative rescaling of the time of impact"], [25, 12, 2, 0, "ea0", "First edge's first endpoint's trajectory"], [25, 12, 2, 0, "ea1", "First edge's second endpoint's trajectory"], [25, 12, 2, 0, "eb0", "Second edge's first endpoint's trajectory"], [25, 12, 2, 0, "eb1", "Second edge's second endpoint's trajectory"], [25, 12, 2, 0, "max_iterations", "Maximum number of iterations for the linear CCD algorithm"], [25, 12, 2, 0, "min_distance", "Minimum separation distance between the two edges"], [25, 12, 2, 0, "tmax", "Maximum time to check for collision"], [25, 12, 2, 0, "tolerance", "Tolerance for the linear CCD algorithm"]], "ipctk.edge_edge_relative_velocity": [[32, 12, 2, 0, "coords", "Two parametric coordinates of the closest points on the edges"], [32, 12, 2, 0, "dea0", "Velocity of the first endpoint of the first edge"], [32, 12, 2, 0, "dea1", "Velocity of the second endpoint of the first edge"], [32, 12, 2, 0, "deb0", "Velocity of the first endpoint of the second edge"], [32, 12, 2, 0, "deb1", "Velocity of the second endpoint of the second edge"]], "ipctk.edge_edge_relative_velocity_matrix": [[32, 12, 2, 0, "coords", "Two parametric coordinates of the closest points on the edges"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.edge_edge_relative_velocity_matrix_jacobian": [[32, 12, 2, 0, "coords", "Two parametric coordinates of the closest points on the edges"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.edge_edge_tangent_basis": [[32, 12, 2, 0, "ea0", "First point of the first edge"], [32, 12, 2, 0, "ea1", "Second point of the first edge"], [32, 12, 2, 0, "eb0", "First point of the second edge"], [32, 12, 2, 0, "eb1", "Second point of the second edge"]], "ipctk.edge_edge_tangent_basis_jacobian": [[32, 12, 2, 0, "ea0", "First point of the first edge"], [32, 12, 2, 0, "ea1", "Second point of the first edge"], [32, 12, 2, 0, "eb0", "First point of the second edge"], [32, 12, 2, 0, "eb1", "Second point of the second edge"]], "ipctk.initial_barrier_stiffness": [[22, 12, 2, 0, "average_mass", "Average mass of all bodies."], [22, 12, 2, 0, "barrier", "Barrier function."], [22, 12, 2, 0, "bbox_diagonal", "Length of the diagonal of the bounding box of the scene."], [22, 12, 2, 0, "dhat", "Activation distance of the barrier."], [22, 12, 2, 0, "dmin", "Minimum distance between elements."], [22, 12, 2, 0, "grad_barrier", "Gradient of the barrier potential."], [22, 12, 2, 0, "grad_energy", "Gradient of the elasticity energy function."], [22, 12, 2, 0, "min_barrier_stiffness_scale", "Scale used to premultiply the minimum barrier stiffness."]], "ipctk.line_line_distance": [[27, 12, 2, 0, "ea0", "The first vertex of the edge defining the second line."], [27, 12, 2, 0, "ea1", "The second vertex of the edge defining the second line."]], "ipctk.line_line_distance_gradient": [[27, 12, 2, 0, "ea0", "The first vertex of the edge defining the second line."], [27, 12, 2, 0, "ea1", "The second vertex of the edge defining the second line."]], "ipctk.line_line_distance_hessian": [[27, 12, 2, 0, "ea0", "The first vertex of the edge defining the second line."], [27, 12, 2, 0, "ea1", "The second vertex of the edge defining the second line."]], "ipctk.max_normal_adhesion_force_magnitude": [[21, 12, 2, 0, "a2", "adjustable parameter relating to the maximum derivative of a (a_2)"], [21, 12, 2, 0, "dhat_a", "adhesion activation distance (\\hat{d}_a)"], [21, 12, 2, 0, "dhat_p", "distance of largest adhesion force (\\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"]], "ipctk.normal_adhesion_potential": [[21, 12, 2, 0, "a2", "adjustable parameter relating to the maximum derivative of a (a_2)"], [21, 12, 2, 0, "d", "distance"], [21, 12, 2, 0, "dhat_a", "adhesion activation distance (\\hat{d}_a)"], [21, 12, 2, 0, "dhat_p", "distance of largest adhesion force (\\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"]], "ipctk.normal_adhesion_potential_first_derivative": [[21, 12, 2, 0, "a2", "adjustable parameter relating to the maximum derivative of a (a_2)"], [21, 12, 2, 0, "d", "distance"], [21, 12, 2, 0, "dhat_a", "adhesion activation distance (\\hat{d}_a)"], [21, 12, 2, 0, "dhat_p", "distance of largest adhesion force (\\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"]], "ipctk.normal_adhesion_potential_second_derivative": [[21, 12, 2, 0, "a2", "adjustable parameter relating to the maximum derivative of a (a_2)"], [21, 12, 2, 0, "d", "distance"], [21, 12, 2, 0, "dhat_a", "adhesion activation distance (\\hat{d}_a)"], [21, 12, 2, 0, "dhat_p", "distance of largest adhesion force (\\hat{d}_p) where 0 < \\hat{d}_p < \\hat{d}_a"]], "ipctk.point_edge_closest_point": [[32, 12, 2, 0, "e0", "First edge point"], [32, 12, 2, 0, "e1", "Second edge point"], [32, 12, 2, 0, "p", "Point"]], "ipctk.point_edge_closest_point_jacobian": [[32, 12, 2, 0, "e0", "First edge point"], [32, 12, 2, 0, "e1", "Second edge point"], [32, 12, 2, 0, "p", "Point"]], "ipctk.point_edge_distance_type": [[27, 12, 2, 0, "e0", "The first vertex of the edge."], [27, 12, 2, 0, "e1", "The second vertex of the edge."], [27, 12, 2, 0, "p", "The point."]], "ipctk.point_edge_nonlinear_ccd": [[25, 12, 2, 0, "conservative_rescaling", "Conservative rescaling of the time of impact"], [25, 12, 2, 0, "e0", "Edge's first endpoint's trajectory"], [25, 12, 2, 0, "e1", "Edge's second endpoint's trajectory"], [25, 12, 2, 0, "max_iterations", "Maximum number of iterations for the linear CCD algorithm"], [25, 12, 2, 0, "min_distance", "Minimum separation distance between the point and the edge"], [25, 12, 2, 0, "p", "Point's trajectory"], [25, 12, 2, 0, "tmax", "Maximum time to check for collision"], [25, 12, 2, 0, "tolerance", "Tolerance for the linear CCD algorithm"]], "ipctk.point_edge_relative_velocity": [[32, 12, 2, 0, "alpha", "Parametric coordinate of the closest point on the edge"], [32, 12, 2, 0, "de0", "Velocity of the first endpoint of the edge"], [32, 12, 2, 0, "de1", "Velocity of the second endpoint of the edge"], [32, 12, 2, 0, "dp", "Velocity of the point"]], "ipctk.point_edge_relative_velocity_matrix": [[32, 12, 2, 0, "alpha", "Parametric coordinate of the closest point on the edge"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_edge_relative_velocity_matrix_jacobian": [[32, 12, 2, 0, "alpha", "Parametric coordinate of the closest point on the edge"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_edge_tangent_basis": [[32, 12, 2, 0, "e0", "First edge point"], [32, 12, 2, 0, "e1", "Second edge point"], [32, 12, 2, 0, "p", "Point"]], "ipctk.point_edge_tangent_basis_jacobian": [[32, 12, 2, 0, "e0", "First edge point"], [32, 12, 2, 0, "e1", "Second edge point"], [32, 12, 2, 0, "p", "Point"]], "ipctk.point_line_distance": [[27, 12, 2, 0, "e0", "The first vertex of the edge defining the line."], [27, 12, 2, 0, "e1", "The second vertex of the edge defining the line."], [27, 12, 2, 0, "p", "The point."]], "ipctk.point_line_distance_gradient": [[27, 12, 2, 0, "e0", "The first vertex of the edge defining the line."], [27, 12, 2, 0, "e1", "The second vertex of the edge defining the line."], [27, 12, 2, 0, "p", "The point."]], "ipctk.point_line_distance_hessian": [[27, 12, 2, 0, "e0", "The first vertex of the edge defining the line."], [27, 12, 2, 0, "e1", "The second vertex of the edge defining the line."], [27, 12, 2, 0, "p", "The point."]], "ipctk.point_point_distance": [[27, 12, 2, 0, "p0", "The first point."], [27, 12, 2, 0, "p1", "The second point."]], "ipctk.point_point_distance_gradient": [[27, 12, 2, 0, "p0", "The first point."], [27, 12, 2, 0, "p1", "The second point."]], "ipctk.point_point_distance_hessian": [[27, 12, 2, 0, "p0", "The first point."], [27, 12, 2, 0, "p1", "The second point."]], "ipctk.point_point_nonlinear_ccd": [[25, 12, 2, 0, "conservative_rescaling", "Conservative rescaling of the time of impact"], [25, 12, 2, 0, "max_iterations", "Maximum number of iterations for the linear CCD algorithm"], [25, 12, 2, 0, "min_distance", "Minimum separation distance between the two points"], [25, 12, 2, 0, "p0", "First point's trajectory"], [25, 12, 2, 0, "p1", "Second point's trajectory"], [25, 12, 2, 0, "tmax", "Maximum time to check for collision"], [25, 12, 2, 0, "tolerance", "Tolerance for the linear CCD algorithm"]], "ipctk.point_point_relative_velocity": [[32, 12, 2, 0, "dp0", "Velocity of the first point"], [32, 12, 2, 0, "dp1", "Velocity of the second point"]], "ipctk.point_point_relative_velocity_matrix": [[32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_point_relative_velocity_matrix_jacobian": [[32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_point_tangent_basis": [[32, 12, 2, 0, "p0", "First point"], [32, 12, 2, 0, "p1", "Second point"]], "ipctk.point_point_tangent_basis_jacobian": [[32, 12, 2, 0, "p0", "First point"], [32, 12, 2, 0, "p1", "Second point"]], "ipctk.point_triangle_closest_point": [[32, 12, 2, 0, "p", "Point"], [32, 12, 2, 0, "t0", "Triangle's first vertex"], [32, 12, 2, 0, "t1", "Triangle's second vertex"], [32, 12, 2, 0, "t2", "Triangle's third vertex"]], "ipctk.point_triangle_closest_point_jacobian": [[32, 12, 2, 0, "p", "Point"], [32, 12, 2, 0, "t0", "Triangle's first vertex"], [32, 12, 2, 0, "t1", "Triangle's second vertex"], [32, 12, 2, 0, "t2", "Triangle's third vertex"]], "ipctk.point_triangle_distance_type": [[27, 12, 2, 0, "p", "The point."], [27, 12, 2, 0, "t0", "The first vertex of the triangle."], [27, 12, 2, 0, "t1", "The second vertex of the triangle."], [27, 12, 2, 0, "t2", "The third vertex of the triangle."]], "ipctk.point_triangle_nonlinear_ccd": [[25, 12, 2, 0, "conservative_rescaling", "Conservative rescaling of the time of impact"], [25, 12, 2, 0, "max_iterations", "Maximum number of iterations for the linear CCD algorithm"], [25, 12, 2, 0, "min_distance", "Minimum separation distance between the two edges"], [25, 12, 2, 0, "p", "Point's trajectory"], [25, 12, 2, 0, "t0", "Triangle's first vertex's trajectory"], [25, 12, 2, 0, "t1", "Triangle's second vertex's trajectory"], [25, 12, 2, 0, "t2", "Triangle's third vertex's trajectory"], [25, 12, 2, 0, "tmax", "Maximum time to check for collision"], [25, 12, 2, 0, "tolerance", "Tolerance for the linear CCD algorithm"]], "ipctk.point_triangle_relative_velocity": [[32, 12, 2, 0, "coords", "Baricentric coordinates of the closest point on the triangle"], [32, 12, 2, 0, "dp", "Velocity of the point"], [32, 12, 2, 0, "dt0", "Velocity of the first vertex of the triangle"], [32, 12, 2, 0, "dt1", "Velocity of the second vertex of the triangle"], [32, 12, 2, 0, "dt2", "Velocity of the third vertex of the triangle"]], "ipctk.point_triangle_relative_velocity_matrix": [[32, 12, 2, 0, "coords", "Baricentric coordinates of the closest point on the triangle"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_triangle_relative_velocity_matrix_jacobian": [[32, 12, 2, 0, "coords", "Baricentric coordinates of the closest point on the triangle"], [32, 12, 2, 0, "dim", "Dimension (2 or 3)"]], "ipctk.point_triangle_tangent_basis": [[32, 12, 2, 0, "p", "Point"], [32, 12, 2, 0, "t0", "Triangle's first vertex"], [32, 12, 2, 0, "t1", "Triangle's second vertex"], [32, 12, 2, 0, "t2", "Triangle's third vertex"]], "ipctk.point_triangle_tangent_basis_jacobian": [[32, 12, 2, 0, "p", "Point"], [32, 12, 2, 0, "t0", "Triangle's first vertex"], [32, 12, 2, 0, "t1", "Triangle's second vertex"], [32, 12, 2, 0, "t2", "Triangle's third vertex"]], "ipctk.project_to_pd": [[34, 12, 2, 0, "A", "Symmetric matrix to project"]], "ipctk.segment_segment_intersect": [[29, 12, 2, 0, "A", "1st endpoint of segment 1"], [29, 12, 2, 0, "B", "2st endpoint of segment 1"], [29, 12, 2, 0, "C", "1st endpoint of segment 2"], [29, 12, 2, 0, "D", "2st endpoint of segment 2"]], "ipctk.smooth_friction_f0": [[28, 12, 2, 0, "eps_v", "Velocity threshold below which static friction force is applied."], [28, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.smooth_friction_f1": [[28, 12, 2, 0, "eps_v", "Velocity threshold below which static friction force is applied."], [28, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.smooth_friction_f1_over_x": [[28, 12, 2, 0, "eps_v", "Velocity threshold below which static friction force is applied."], [28, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.smooth_friction_f2": [[28, 12, 2, 0, "eps_v", "Velocity threshold below which static friction force is applied."], [28, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.smooth_friction_f2_x_minus_f1_over_x3": [[28, 12, 2, 0, "eps_v", "Velocity threshold below which static friction force is applied."], [28, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tangential_adhesion_f0": [[21, 12, 2, 0, "eps_a", "Velocity threshold below which static adhesion force is applied."], [21, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tangential_adhesion_f1": [[21, 12, 2, 0, "eps_a", "Velocity threshold below which static adhesion force is applied."], [21, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tangential_adhesion_f1_over_x": [[21, 12, 2, 0, "eps_a", "Velocity threshold below which static adhesion force is applied."], [21, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tangential_adhesion_f2": [[21, 12, 2, 0, "eps_a", "Velocity threshold below which static adhesion force is applied."], [21, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tangential_adhesion_f2_x_minus_f1_over_x3": [[21, 12, 2, 0, "eps_a", "Velocity threshold below which static adhesion force is applied."], [21, 12, 2, 0, "y", "The tangential relative speed."]], "ipctk.tight_inclusion": [[25, 14, 1, 0, "compute_ccd_filters", "Compute the numerical error filters for the input to the CCD solver."], [25, 14, 1, 0, "edge_edge_ccd", "Determine the earliest time of impact between two edges (optionally with a minimum separation)."], [25, 14, 1, 0, "point_triangle_ccd", "Determine the earliest time of impact between a point and triangle (optionally with a minimum separation)."]], "ipctk.tight_inclusion.compute_ccd_filters": [[25, 12, 2, 0, "is_vertex_face", "True if checking vertex-face collision, false if checking edge-edge collision."], [25, 12, 2, 0, "max_corner", "Maximum corner of the axis-aligned bounding box of the simulation scene."], [25, 12, 2, 0, "min_corner", "Minimum corner of the axis-aligned bounding box of the simulation scene."], [25, 12, 2, 0, "using_minimum_separation", "True if using minimum separation CCD, false otherwise."]], "ipctk.update_barrier_stiffness": [[22, 12, 2, 0, "barrier_stiffness", "Current barrier stiffness."], [22, 12, 2, 0, "bbox_diagonal", "Length of the diagonal of the bounding box of the scene."], [22, 12, 2, 0, "dhat_epsilon_scale", "Update if distance is less than this fraction of the diagonal."], [22, 12, 2, 0, "dmin", "Minimum distance between elements."], [22, 12, 2, 0, "max_barrier_stiffness", "Maximum stiffness of the barrier."], [22, 12, 2, 0, "min_distance", "Current minimum distance between elements."], [22, 12, 2, 0, "prev_min_distance", "Previous minimum distance between elements."]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:functionParam", "3": "cpp:member", "4": "cpp:templateTypeParam", "5": "cpp:templateNonTypeParam", "6": "cpp:type", "7": "cpp:enum", "8": "cpp:enumerator", "9": "py:class", "10": "py:attribute", "11": "py:method", "12": "py:parameter", "13": "py:property", "14": "py:function"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "functionParam", "C++ function parameter"], "3": ["cpp", "member", "C++ member"], "4": ["cpp", "templateTypeParam", "C++ type template parameter"], "5": ["cpp", "templateNonTypeParam", "C++ non-type template parameter"], "6": ["cpp", "type", "C++ type"], "7": ["cpp", "enum", "C++ enum"], "8": ["cpp", "enumerator", "C++ enumerator"], "9": ["py", "class", "Python class"], "10": ["py", "attribute", "Python attribute"], "11": ["py", "method", "Python method"], "12": ["py", "parameter", "Python parameter"], "13": ["py", "property", "Python property"], "14": ["py", "function", "Python function"]}, "titleterms": {"changelog": 0, "v1": 0, "3": [0, 1], "1": [0, 1], "nov": 0, "08": 0, "2024": 0, "0": 0, "aug": 0, "03": 0, "detail": [0, 36], "2": [0, 1], "jul": 0, "12": 0, "dec": 0, "11": 0, "2023": 0, "18": 0, "25": 0, "feb": 0, "21": 0, "pre": 0, "2021": 0, "10": 0, "05": 0, "9e2cc2a": 0, "ad": 0, "09": 0, "acf2a80": 0, "chang": 0, "07": 0, "26": 0, "1479aae": 0, "22": 0, "e24c76d": 0, "fix": [0, 2], "17": 0, "a20f7a2": 0, "15": 0, "7301b42": 0, "86ae4e5": 0, "remov": 0, "4d16954": 0, "b3808e1": 0, "06": 0, "aa59aeb": 0, "245b13b": 0, "5c34dcd": 0, "24056cc": 0, "81d65f3": 0, "04": 0, "59ec167": 0, "664d65f": 0, "9b4ebfc": 0, "29": 0, "293d0ad": 0, "c8a6d5": 0, "02": 0, "9c7493": 0, "01": 0, "b510253": 0, "a395175": 0, "deee6d0": 0, "2020": 0, "20": 0, "93143ad": 0, "4553509": 0, "51f4903": 0, "9be6c0f": 0, "cb8b53f": 0, "4a5f84f": 0, "1d51a61": 0, "b737fb0": 0, "6ee60a": 0, "cc3947d": 0, "5582582": 0, "b48ba0e": 0, "9a4576b": 0, "19": 0, "31a37e0": 0, "acb7664": 0, "7dd2ab7": 0, "contributor": 1, "coven": 1, "code": [1, 35], "conduct": 1, "our": 1, "pledg": 1, "standard": 1, "enforc": 1, "respons": 1, "scope": 1, "guidelin": 1, "correct": 1, "warn": [1, 3, 27, 42], "temporari": 1, "ban": 1, "4": 1, "perman": 1, "attribut": 1, "contribut": [2, 18], "type": [2, 10, 27], "report": 2, "bug": 2, "implement": 2, "featur": [2, 18], "write": 2, "document": [2, 20, 35], "submit": 2, "feedback": 2, "c": 3, "build": [3, 18, 20, 37], "tip": 3, "depend": [3, 18], "option": [3, 18], "usag": [3, 18], "unit": [3, 18], "test": [3, 18], "adhes": [4, 14, 21, 31], "normal": [4, 13, 14, 21, 30, 31], "potenti": [4, 14, 21, 31, 38], "tangenti": [4, 14, 16, 21, 31, 33], "barrier": [5, 14, 22, 31, 36, 38], "forc": [5, 6, 22, 23], "magnitud": [5, 22], "adapt": [5, 22, 38], "stiff": [5, 22, 38], "class": [5, 22], "clamp": [5, 22], "log": [5, 22], "broad": [6, 23, 38], "phase": [6, 23, 38], "brute": [6, 23], "hash": [6, 23], "grid": [6, 23], "spatial": [6, 23], "bvh": [6, 23], "sweep": [6, 23], "prune": [6, 23], "tiniest": [6, 23], "queue": [6, 23], "aabb": [6, 23], "candid": [7, 24], "collis": [7, 8, 9, 13, 16, 24, 25, 26, 30, 33, 38], "stencil": [7, 24], "continu": [7, 8, 24, 25, 38], "vertex": [7, 13, 16, 24, 30, 33], "edg": [7, 10, 13, 16, 24, 27, 30, 33, 37], "face": [7, 13, 16, 24, 30, 33, 37], "detect": [8, 25, 38], "individu": [8, 25], "ccd": [8, 25, 40], "function": [8, 25], "gener": [8, 14, 25, 35], "interfac": [8, 25], "addit": [8, 25], "nonlinear": [8, 25, 40, 42], "mesh": [9, 26, 38, 42], "distanc": [10, 27], "mollifi": [10, 11, 27, 28], "line": [10, 27], "point": [10, 15, 27, 32], "plane": [10, 13, 27, 30], "triangl": [10, 27], "friction": [11, 14, 28, 31, 36, 38], "smooth": [11, 28], "intersect": [12, 29, 37, 39], "tangent": [15, 32], "basi": [15, 32], "jacobian": [15, 32], "rel": [15, 32], "veloc": [15, 32], "multipli": [15, 32], "matrici": [15, 32], "matrix": [15, 32, 37], "closet": [15, 32], "util": [17, 34], "logger": [17, 34, 39], "posit": [17, 34, 42], "semi": [17, 34, 42], "definit": [17, 34, 42], "project": [17, 34, 37, 42], "home": 18, "descript": 18, "limit": 18, "python": [18, 20], "bind": 18, "citat": 18, "licens": [18, 19], "instal": 20, "cmake": 20, "help": 20, "note": [24, 25, 27, 36, 38, 40], "error": 24, "tight": 25, "inclus": 25, "multi": [34, 39], "thread": [34, 39], "style": 35, "guid": 35, "format": 35, "name": 35, "convent": 35, "specif": 35, "converg": 36, "formul": 36, "import": [36, 38], "technic": 36, "physic": [36, 42], "frequent": 37, "ask": 37, "question": 37, "how": 37, "do": 37, "i": 37, "includ": 37, "ipc": 37, "toolkit": 37, "my": 37, "determin": 37, "which": 37, "from": 37, "answer": 37, "here": 37, "what": 37, "should": 37, "get": 38, "start": 38, "deriv": 38, "model": 38, "thick": 38, "dissip": 38, "narrow": 38, "minimum": 38, "separ": 38, "miscellan": 39, "static": 39, "check": 39, "defin": 40, "trajectori": 40, "comput": 40, "conserv": 40, "envelop": 40, "perform": 40, "refer": 41, "simul": 42, "volumetr": 42, "codimension": 42, "vertic": 42, "base": 42, "curv": 42}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Changelog": [[0, "changelog"]], "v1.3.1 (Nov 08, 2024)": [[0, "v1-3-1-nov-08-2024"]], "v1.3.0 (Aug 03, 2024)": [[0, "v1-3-0-aug-03-2024"]], "Details": [[0, "details"], [0, "details-3"], [0, "details-2"], [0, "details-1"]], "v1.2.1 (Jul 12, 2024)": [[0, "v1-2-1-jul-12-2024"]], "v1.2.0 (Dec 11, 2023)": [[0, "v1-2-0-dec-11-2023"]], "v1.1.1 (Aug 18, 2023)": [[0, "v1-1-1-aug-18-2023"]], "v1.1.0 (Jul 25, 2023)": [[0, "v1-1-0-jul-25-2023"]], "v1.0.0 (Feb 21, 2023)": [[0, "v1-0-0-feb-21-2023"]], "Pre-v1.0.0": [[0, "pre-v1-0-0"]], "2021-10-05 (9e2cc2a)": [[0, "e2cc2a"]], "Added": [[0, "added"], [0, "added-1"], [0, "added-2"], [0, "added-3"], [0, "added-4"], [0, "added-5"], [0, "added-6"], [0, "added-7"], [0, "added-8"], [0, "added-9"], [0, "added-10"], [0, "added-11"], [0, "added-12"], [0, "added-13"], [0, "added-14"], [0, "added-15"], [0, "added-16"], [0, "added-17"]], "2021-09-05 (9e2cc2a)": [[0, "e2cc2a-1"]], "2021-08-21 (acf2a80)": [[0, "acf2a80"]], "Changed": [[0, "changed"], [0, "changed-1"], [0, "changed-2"], [0, "changed-3"], [0, "changed-4"], [0, "changed-5"], [0, "changed-6"], [0, "changed-7"], [0, "changed-8"], [0, "changed-9"], [0, "changed-10"], [0, "changed-11"], [0, "changed-12"], [0, "changed-13"], [0, "changed-14"], [0, "changed-15"], [0, "changed-16"], [0, "changed-17"], [0, "changed-18"], [0, "changed-19"]], "2021-07-26 (1479aae)": [[0, "aae"]], "2021-07-22 (e24c76d)": [[0, "e24c76d"]], "Fixed": [[0, "fixed"], [0, "fixed-1"], [0, "fixed-2"], [0, "fixed-3"], [0, "fixed-4"], [0, "fixed-5"], [0, "fixed-6"], [0, "fixed-7"], [0, "fixed-8"], [0, "fixed-9"], [0, "fixed-10"], [0, "fixed-11"]], "2021-07-17 (a20f7a2)": [[0, "a20f7a2"]], "2021-07-15 (7301b42)": [[0, "b42"]], "2021-07-08 (86ae4e5)": [[0, "ae4e5"]], "Removed": [[0, "removed"]], "2021-07-05 (4d16954)": [[0, "d16954"]], "2021-07-05 (b3808e1)": [[0, "b3808e1"]], "2021-06-18 (aa59aeb)": [[0, "aa59aeb"]], "2021-05-18 (245b13b)": [[0, "b13b"]], "2021-05-11 (5c34dcd)": [[0, "c34dcd"]], "2021-05-06 (24056cc)": [[0, "cc"]], "2021-05-06 (81d65f3)": [[0, "d65f3"]], "2021-05-04 (59ec167)": [[0, "ec167"]], "2021-05-03 (664d65f)": [[0, "d65f"]], "2021-05-03 (9b4ebfc)": [[0, "b4ebfc"]], "2021-04-29 (293d0ad)": [[0, "d0ad"]], "2021-04-21 (c8a6d5)": [[0, "c8a6d5"]], "2021-02-11 (9c7493)": [[0, "c7493"]], "2021-02-01 (b510253)": [[0, "b510253"]], "2021-02-01 (a395175)": [[0, "a395175"]], "2021-01-12 (deee6d0)": [[0, "deee6d0"]], "2021-01-09 (deee6d0)": [[0, "deee6d0-1"]], "2020-11-20 (93143ad)": [[0, "ad"]], "2020-11-06 (4553509)": [[0, "id37"]], "2020-10-22 (51f4903)": [[0, "f4903"]], "2020-10-22 (9be6c0f)": [[0, "be6c0f"]], "2020-10-10 (cb8b53f)": [[0, "cb8b53f"]], "2020-10-10 (4a5f84f)": [[0, "a5f84f"]], "2020-10-10 (1d51a61)": [[0, "d51a61"]], "2020-10-09 (b737fb0)": [[0, "b737fb0"]], "2020-10-08 (6ee60ae)": [[0, "ee60ae"]], "2020-10-08 (cc3947d)": [[0, "cc3947d"]], "2020-10-07 (5582582)": [[0, "section-1"]], "2020-10-06 (b48ba0e)": [[0, "b48ba0e"]], "2020-10-05 (9a4576b)": [[0, "a4576b"]], "2020-09-19 (31a37e0)": [[0, "a37e0"]], "2020-09-19 (acb7664)": [[0, "acb7664"]], "2020-09-04 (7dd2ab7)": [[0, "dd2ab7"]], "Contributor Covenant Code of Conduct": [[1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[1, "our-pledge"]], "Our Standards": [[1, "our-standards"]], "Enforcement Responsibilities": [[1, "enforcement-responsibilities"]], "Scope": [[1, "scope"]], "Enforcement": [[1, "enforcement"]], "Enforcement Guidelines": [[1, "enforcement-guidelines"]], "1. Correction": [[1, "correction"]], "2. Warning": [[1, "warning"]], "3. Temporary Ban": [[1, "temporary-ban"]], "4. Permanent Ban": [[1, "permanent-ban"]], "Attribution": [[1, "attribution"]], "Contributing": [[2, "contributing"], [18, "contributing"]], "Types of Contributions": [[2, "types-of-contributions"]], "Report Bugs": [[2, "report-bugs"]], "Fix Bugs": [[2, "fix-bugs"]], "Implement Features": [[2, "implement-features"]], "Write Documentation": [[2, "write-documentation"]], "Submit Feedback": [[2, "submit-feedback"]], "C++": [[3, "c"]], "Build": [[3, "build"], [18, "build"], [20, "build"]], "Tip": [[3, null]], "Dependencies": [[3, "dependencies"], [3, "dependencies"], [18, "dependencies"], [18, "id1"]], "Optional": [[3, "optional"], [18, "optional"]], "Warning": [[3, null], [27, null], [27, null], [27, null], [42, null]], "Usage": [[3, "usage"], [18, "usage"]], "Unit Tests": [[3, "unit-tests"], [18, "unit-tests"]], "Adhesion": [[4, "adhesion"], [21, "adhesion"]], "Normal Adhesion Potential": [[4, "normal-adhesion-potential"], [14, "normal-adhesion-potential"], [21, "normal-adhesion-potential"], [31, "normal-adhesion-potential"]], "Tangential Adhesion Potential": [[4, "tangential-adhesion-potential"], [14, "tangential-adhesion-potential"], [21, "tangential-adhesion-potential"], [31, "tangential-adhesion-potential"]], "Barrier": [[5, "barrier"], [22, "barrier"]], "Barrier Force Magnitude": [[5, "barrier-force-magnitude"], [22, "barrier-force-magnitude"]], "Adaptive Barrier Stiffness": [[5, "adaptive-barrier-stiffness"], [22, "adaptive-barrier-stiffness"], [38, "adaptive-barrier-stiffness"]], "Barrier Class": [[5, "barrier-class"], [22, "barrier-class"]], "Clamped Log Barrier": [[5, "clamped-log-barrier"], [22, "clamped-log-barrier"]], "Broad Phase": [[6, "broad-phase"], [6, "id1"], [23, "broad-phase"], [23, "id1"]], "Brute Force": [[6, "brute-force"], [23, "brute-force"]], "Hash Grid": [[6, "hash-grid"], [23, "hash-grid"]], "Spatial Hash": [[6, "spatial-hash"], [23, "spatial-hash"]], "BVH": [[6, "bvh"], [23, "bvh"]], "Sweep and Prune": [[6, "sweep-and-prune"], [23, "sweep-and-prune"]], "Sweep and Tiniest Queue": [[6, "sweep-and-tiniest-queue"], [23, "sweep-and-tiniest-queue"]], "AABB": [[6, "aabb"], [23, "aabb"]], "Candidates": [[7, "candidates"], [7, "id1"], [24, "candidates"], [24, "id1"]], "Collision Stencil": [[7, "collision-stencil"], [24, "collision-stencil"]], "Continuous Collision Candidate": [[7, "continuous-collision-candidate"], [24, "continuous-collision-candidate"]], "Vertex-Vertex Candidate": [[7, "vertex-vertex-candidate"], [24, "vertex-vertex-candidate"]], "Edge-Vertex Candidate": [[7, "edge-vertex-candidate"], [24, "edge-vertex-candidate"]], "Edge-Edge Candidate": [[7, "edge-edge-candidate"], [24, "edge-edge-candidate"]], "Edge-Face Candidate": [[7, "edge-face-candidate"], [24, "edge-face-candidate"]], "Face-Vertex Candidate": [[7, "face-vertex-candidate"], [24, "face-vertex-candidate"]], "Continuous Collision Detection": [[8, "continuous-collision-detection"], [25, "continuous-collision-detection"], [38, "continuous-collision-detection"]], "Individual CCD Functions": [[8, "individual-ccd-functions"], [25, "individual-ccd-functions"]], "Generic Interface": [[8, "generic-interface"], [8, "id1"], [8, "id2"], [25, "generic-interface"], [25, "id1"], [25, "id2"]], "Additive CCD": [[8, "additive-ccd"], [25, "additive-ccd"]], "Nonlinear CCD": [[8, "nonlinear-ccd"], [25, "nonlinear-ccd"], [40, "nonlinear-ccd"]], "Collision Mesh": [[9, "collision-mesh"], [26, "collision-mesh"], [38, "collision-mesh"]], "Distance": [[10, "distance"], [27, "distance"]], "Distance Type": [[10, "distance-type"], [27, "distance-type"]], "Edge-Edge Mollifier": [[10, "edge-edge-mollifier"], [27, "edge-edge-mollifier"]], "Edge-Edge": [[10, "edge-edge"], [27, "edge-edge"]], "Line-Line": [[10, "line-line"], [27, "line-line"]], "Point-Edge": [[10, "point-edge"], [27, "point-edge"]], "Point-Line": [[10, "point-line"], [27, "point-line"]], "Point-Plane": [[10, "point-plane"], [27, "point-plane"]], "Point-Point": [[10, "point-point"], [27, "point-point"]], "Point-Triangle": [[10, "point-triangle"], [27, "point-triangle"]], "Friction": [[11, "friction"], [28, "friction"], [36, "friction"], [38, "friction"]], "Smooth Mollifier": [[11, "smooth-mollifier"], [28, "smooth-mollifier"]], "Intersections": [[12, "intersections"], [29, "intersections"]], "Normal Collisions": [[13, "normal-collisions"], [13, "id1"], [30, "normal-collisions"], [30, "id1"]], "Normal Collision": [[13, "normal-collision"], [30, "normal-collision"]], "Vertex-Vertex Normal Collision": [[13, "vertex-vertex-normal-collision"], [30, "vertex-vertex-normal-collision"]], "Edge-Vertex Normal Collision": [[13, "edge-vertex-normal-collision"], [30, "edge-vertex-normal-collision"]], "Edge-Edge Normal Collision": [[13, "edge-edge-normal-collision"], [30, "edge-edge-normal-collision"]], "Face-Vertex Normal Collision": [[13, "face-vertex-normal-collision"], [30, "face-vertex-normal-collision"]], "Plane-Vertex Normal Collision": [[13, "plane-vertex-normal-collision"], [30, "plane-vertex-normal-collision"]], "Potentials": [[14, "potentials"], [31, "potentials"]], "Generic Potential": [[14, "generic-potential"]], "Normal Potentials": [[14, "normal-potentials"], [31, "normal-potentials"]], "Barrier Potential": [[14, "barrier-potential"], [31, "barrier-potential"], [38, "barrier-potential"]], "Tangential Potentials": [[14, "tangential-potentials"], [31, "tangential-potentials"]], "Friction Potential": [[14, "friction-potential"], [31, "friction-potential"]], "Tangent": [[15, "tangent"], [32, "tangent"]], "Tangent Basis": [[15, "tangent-basis"], [32, "tangent-basis"]], "Tangent Basis Jacobians": [[15, "tangent-basis-jacobians"], [32, "tangent-basis-jacobians"]], "Relative Velocity": [[15, "relative-velocity"], [32, "relative-velocity"]], "Relative Velocity as Multiplier Matricies": [[15, "relative-velocity-as-multiplier-matricies"], [32, "relative-velocity-as-multiplier-matricies"]], "Relative Velocity Matrix Jacobians": [[15, "relative-velocity-matrix-jacobians"], [32, "relative-velocity-matrix-jacobians"]], "Closet Points": [[15, "closet-points"], [32, "closet-points"]], "Closet Points Jacobians": [[15, "closet-points-jacobians"], [32, "closet-points-jacobians"]], "Tangential Collisions": [[16, "tangential-collisions"], [33, "tangential-collisions"]], "Tangential Collision": [[16, "tangential-collision"], [33, "tangential-collision"]], "Vertex-Vertex Tangential Collision": [[16, "vertex-vertex-tangential-collision"], [33, "vertex-vertex-tangential-collision"]], "Edge-Vertex Tangential Collision": [[16, "edge-vertex-tangential-collision"], [33, "edge-vertex-tangential-collision"]], "Edge-Edge Tangential Collision": [[16, "edge-edge-tangential-collision"], [33, "edge-edge-tangential-collision"]], "Face-Vertex Tangential Collision": [[16, "face-vertex-tangential-collision"], [33, "face-vertex-tangential-collision"]], "Utils": [[17, "utils"], [34, "utils"]], "Logger": [[17, "logger"], [34, "logger"], [39, "logger"]], "Positive Semi-Definite Projection": [[17, "positive-semi-definite-projection"], [34, "positive-semi-definite-projection"], [42, "positive-semi-definite-projection"]], "Home": [[18, "home"]], "Description": [[18, "description"]], "Features": [[18, "features"]], "Limitations": [[18, "limitations"]], "Python Bindings": [[18, "python-bindings"]], "Citation": [[18, "citation"]], "License": [[18, "license"], [19, "license"]], "Python": [[20, "python"]], "Installation": [[20, "installation"]], "CMake Build": [[20, "cmake-build"]], "Help/Documentation": [[20, "help-documentation"]], "Note": [[24, null], [24, null], [25, null], [25, null], [25, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [27, null], [36, null], [36, null], [36, null], [36, null], [38, null], [38, null], [38, null], [38, null], [40, null]], "Error": [[24, null]], "Tight Inclusion CCD": [[25, "tight-inclusion-ccd"]], "Multi-Threading": [[34, "multi-threading"]], "Style Guide": [[35, "style-guide"]], "Code Formatting": [[35, "code-formatting"]], "Naming conventions": [[35, "naming-conventions"]], "General": [[35, "general"]], "Specific": [[35, "specific"]], "Documentation": [[35, "documentation"]], "Convergent Formulation": [[36, "convergent-formulation"]], "Important": [[36, null], [38, null]], "Technical Details": [[36, "technical-details"]], "Physical Barrier": [[36, "physical-barrier"]], "Frequently Asked Questions": [[37, "frequently-asked-questions"]], "How do I include IPC Toolkit in my project?": [[37, "how-do-i-include-ipc-toolkit-in-my-project"]], "How do I determine which edges intersect?": [[37, "how-do-i-determine-which-edges-intersect"]], "How do I build the edge matrix from the face matrix?": [[37, "how-do-i-build-the-edge-matrix-from-the-face-matrix"]], "My question is not answered here. What should I do?": [[37, "my-question-is-not-answered-here-what-should-i-do"]], "Getting Started": [[38, "getting-started"]], "Collisions": [[38, "collisions"]], "Barrier Potential Derivatives": [[38, "barrier-potential-derivatives"]], "Modeling Thickness": [[38, "modeling-thickness"]], "Friction Dissipative Potential": [[38, "friction-dissipative-potential"]], "Derivatives": [[38, "derivatives"]], "Broad-Phase": [[38, "broad-phase"]], "Narrow-Phase": [[38, "narrow-phase"]], "Minimum Separation": [[38, "minimum-separation"]], "Miscellaneous": [[39, "miscellaneous"]], "Static Intersection Checks": [[39, "static-intersection-checks"]], "Multi-threading": [[39, "multi-threading"]], "Defining the Trajectory": [[40, "defining-the-trajectory"]], "Computing a Conservative Envelope": [[40, "computing-a-conservative-envelope"]], "Performing Nonlinear CCD": [[40, "performing-nonlinear-ccd"]], "References": [[41, "references"]], "Physical Simulation": [[42, "physical-simulation"]], "Volumetric Meshes": [[42, "volumetric-meshes"]], "Codimensional Vertices": [[42, "codimensional-vertices"]], "Nonlinear Bases and Curved Meshes": [[42, "nonlinear-bases-and-curved-meshes"]]}, "indexentries": {"ipc::max_normal_adhesion_force_magnitude (c++ function)": [[4, "_CPPv4N3ipc35max_normal_adhesion_force_magnitudeEKdKdKd"]], "ipc::normal_adhesion_potential (c++ function)": [[4, "_CPPv4N3ipc25normal_adhesion_potentialEKdKdKdKd"]], "ipc::normal_adhesion_potential_first_derivative (c++ function)": [[4, "_CPPv4N3ipc42normal_adhesion_potential_first_derivativeEKdKdKdKd"]], "ipc::normal_adhesion_potential_second_derivative (c++ function)": [[4, "_CPPv4N3ipc43normal_adhesion_potential_second_derivativeEKdKdKdKd"]], "ipc::tangential_adhesion_f0 (c++ function)": [[4, "_CPPv4N3ipc22tangential_adhesion_f0EKdKd"]], "ipc::tangential_adhesion_f1 (c++ function)": [[4, "_CPPv4N3ipc22tangential_adhesion_f1EKdKd"]], "ipc::tangential_adhesion_f1_over_x (c++ function)": [[4, "_CPPv4N3ipc29tangential_adhesion_f1_over_xEKdKd"]], "ipc::tangential_adhesion_f2 (c++ function)": [[4, "_CPPv4N3ipc22tangential_adhesion_f2EKdKd"]], "ipc::tangential_adhesion_f2_x_minus_f1_over_x3 (c++ function)": [[4, "_CPPv4N3ipc41tangential_adhesion_f2_x_minus_f1_over_x3EKdKd"]], "ipc::barrier (c++ class)": [[5, "_CPPv4N3ipc7BarrierE"]], "ipc::barrier::barrier (c++ function)": [[5, "_CPPv4N3ipc7Barrier7BarrierEv"]], "ipc::barrier::first_derivative (c++ function)": [[5, "_CPPv4NK3ipc7Barrier16first_derivativeEKdKd"]], "ipc::barrier::operator() (c++ function)": [[5, "_CPPv4NK3ipc7BarrierclEKdKd"]], "ipc::barrier::second_derivative (c++ function)": [[5, "_CPPv4NK3ipc7Barrier17second_derivativeEKdKd"]], "ipc::barrier::units (c++ function)": [[5, "_CPPv4NK3ipc7Barrier5unitsEKd"]], "ipc::barrier::~barrier (c++ function)": [[5, "_CPPv4N3ipc7BarrierD0Ev"]], "ipc::clampedlogbarrier (c++ class)": [[5, "_CPPv4N3ipc17ClampedLogBarrierE"]], "ipc::clampedlogbarrier::clampedlogbarrier (c++ function)": [[5, "_CPPv4N3ipc17ClampedLogBarrier17ClampedLogBarrierEv"]], "ipc::clampedlogbarrier::first_derivative (c++ function)": [[5, "_CPPv4NK3ipc17ClampedLogBarrier16first_derivativeEKdKd"]], "ipc::clampedlogbarrier::operator() (c++ function)": [[5, "_CPPv4NK3ipc17ClampedLogBarrierclEKdKd"]], "ipc::clampedlogbarrier::second_derivative (c++ function)": [[5, "_CPPv4NK3ipc17ClampedLogBarrier17second_derivativeEKdKd"]], "ipc::clampedlogbarrier::units (c++ function)": [[5, "_CPPv4NK3ipc17ClampedLogBarrier5unitsEKd"]], "ipc::barrier (c++ function)": [[5, "_CPPv4N3ipc7barrierEKdKd"]], "ipc::barrier_first_derivative (c++ function)": [[5, "_CPPv4N3ipc24barrier_first_derivativeEKdKd"]], "ipc::barrier_force_magnitude (c++ function)": [[5, "_CPPv4N3ipc23barrier_force_magnitudeEKdRK7BarrierKdKdKd"]], "ipc::barrier_force_magnitude_gradient (c++ function)": [[5, "_CPPv4N3ipc32barrier_force_magnitude_gradientEKdRK12VectorMax12dRK7BarrierKdKdKd"]], "ipc::barrier_second_derivative (c++ function)": [[5, "_CPPv4N3ipc25barrier_second_derivativeEKdKd"]], "ipc::initial_barrier_stiffness (c++ function)": [[5, "_CPPv4N3ipc25initial_barrier_stiffnessEKdRK7BarrierKdKdRKN5Eigen8VectorXdERKN5Eigen8VectorXdERdKdKd"]], "ipc::update_barrier_stiffness (c++ function)": [[5, "_CPPv4N3ipc24update_barrier_stiffnessEKdKdKdKdKdKdKd"]], "ipc::aabb (c++ class)": [[6, "_CPPv4N3ipc4AABBE"]], "ipc::aabb::aabb (c++ function)": [[6, "_CPPv4N3ipc4AABB4AABBERK10ArrayMax3dRK10ArrayMax3d"], [6, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABB"], [6, "_CPPv4N3ipc4AABB4AABBERK4AABBRK4AABBRK4AABB"], [6, "_CPPv4N3ipc4AABB4AABBEv"]], "ipc::aabb::conservative_inflation (c++ function)": [[6, "_CPPv4N3ipc4AABB22conservative_inflationER10ArrayMax3dR10ArrayMax3dKd"]], "ipc::aabb::from_point (c++ function)": [[6, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dKd"], [6, "_CPPv4N3ipc4AABB10from_pointERK11VectorMax3dRK11VectorMax3dKd"]], "ipc::aabb::intersects (c++ function)": [[6, "_CPPv4NK3ipc4AABB10intersectsERK4AABB"]], "ipc::aabb::max (c++ member)": [[6, "_CPPv4N3ipc4AABB3maxE"]], "ipc::aabb::min (c++ member)": [[6, "_CPPv4N3ipc4AABB3minE"]], "ipc::aabb::vertex_ids (c++ member)": [[6, "_CPPv4N3ipc4AABB10vertex_idsE"]], "ipc::bvh (c++ class)": [[6, "_CPPv4N3ipc3BVHE"]], "ipc::bvh::bvh (c++ function)": [[6, "_CPPv4N3ipc3BVH3BVHEv"]], "ipc::bvh::build (c++ function)": [[6, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd"], [6, "_CPPv4N3ipc3BVH5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd"]], "ipc::bvh::clear (c++ function)": [[6, "_CPPv4N3ipc3BVH5clearEv"]], "ipc::bvh::detect_candidates (c++ function)": [[6, "_CPPv4I0_b_bEN3ipc3BVH17detect_candidatesEvRKNSt6vectorI4AABBEERKN9SimpleBVH3BVHERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE"]], "ipc::bvh::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::bvh::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::bvh::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::bvh::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::bvh::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::bvh::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc3BVH31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::bvh::edge_bvh (c++ member)": [[6, "_CPPv4N3ipc3BVH8edge_bvhE"]], "ipc::bvh::face_bvh (c++ member)": [[6, "_CPPv4N3ipc3BVH8face_bvhE"]], "ipc::bvh::init_bvh (c++ function)": [[6, "_CPPv4N3ipc3BVH8init_bvhERKNSt6vectorI4AABBEERN9SimpleBVH3BVHE"]], "ipc::bvh::vertex_bvh (c++ member)": [[6, "_CPPv4N3ipc3BVH10vertex_bvhE"]], "ipc::broadphase (c++ class)": [[6, "_CPPv4N3ipc10BroadPhaseE"]], "ipc::broadphase::build (c++ function)": [[6, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd"], [6, "_CPPv4N3ipc10BroadPhase5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEKd"]], "ipc::broadphase::can_edge_face_collide (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase21can_edge_face_collideE6size_t6size_t"]], "ipc::broadphase::can_edge_vertex_collide (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase23can_edge_vertex_collideE6size_t6size_t"]], "ipc::broadphase::can_edges_collide (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase17can_edges_collideE6size_t6size_t"]], "ipc::broadphase::can_face_vertex_collide (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase23can_face_vertex_collideE6size_t6size_t"]], "ipc::broadphase::can_faces_collide (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase17can_faces_collideE6size_t6size_t"]], "ipc::broadphase::can_vertices_collide (c++ member)": [[6, "_CPPv4N3ipc10BroadPhase20can_vertices_collideE"]], "ipc::broadphase::clear (c++ function)": [[6, "_CPPv4N3ipc10BroadPhase5clearEv"]], "ipc::broadphase::default_can_vertices_collide (c++ function)": [[6, "_CPPv4N3ipc10BroadPhase28default_can_vertices_collideE6size_t6size_t"]], "ipc::broadphase::detect_collision_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase27detect_collision_candidatesEiR10Candidates"]], "ipc::broadphase::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::broadphase::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::broadphase::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::broadphase::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::broadphase::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::broadphase::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BroadPhase31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::broadphase::edge_boxes (c++ member)": [[6, "_CPPv4N3ipc10BroadPhase10edge_boxesE"]], "ipc::broadphase::face_boxes (c++ member)": [[6, "_CPPv4N3ipc10BroadPhase10face_boxesE"]], "ipc::broadphase::make_broad_phase (c++ function)": [[6, "_CPPv4N3ipc10BroadPhase16make_broad_phaseEK16BroadPhaseMethod"]], "ipc::broadphase::vertex_boxes (c++ member)": [[6, "_CPPv4N3ipc10BroadPhase12vertex_boxesE"]], "ipc::broadphase::~broadphase (c++ function)": [[6, "_CPPv4N3ipc10BroadPhaseD0Ev"]], "ipc::broadphasemethod (c++ enum)": [[6, "_CPPv4N3ipc16BroadPhaseMethodE"]], "ipc::broadphasemethod::brute_force (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod11BRUTE_FORCEE"]], "ipc::broadphasemethod::bvh (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod3BVHE"]], "ipc::broadphasemethod::hash_grid (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod9HASH_GRIDE"]], "ipc::broadphasemethod::num_methods (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod11NUM_METHODSE"]], "ipc::broadphasemethod::spatial_hash (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod12SPATIAL_HASHE"]], "ipc::broadphasemethod::sweep_and_prune (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod15SWEEP_AND_PRUNEE"]], "ipc::broadphasemethod::sweep_and_tiniest_queue (c++ enumerator)": [[6, "_CPPv4N3ipc16BroadPhaseMethod23SWEEP_AND_TINIEST_QUEUEE"]], "ipc::bruteforce (c++ class)": [[6, "_CPPv4N3ipc10BruteForceE"]], "ipc::bruteforce::bruteforce (c++ function)": [[6, "_CPPv4N3ipc10BruteForce10BruteForceEv"]], "ipc::bruteforce::detect_candidates (c++ function)": [[6, "_CPPv4I0_bENK3ipc10BruteForce17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE"]], "ipc::bruteforce::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::bruteforce::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::bruteforce::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::bruteforce::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::bruteforce::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::bruteforce::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc10BruteForce31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::default_broad_phase_method (c++ member)": [[6, "_CPPv4N3ipc26DEFAULT_BROAD_PHASE_METHODE"]], "ipc::hashgrid (c++ class)": [[6, "_CPPv4N3ipc8HashGridE"]], "ipc::hashgrid::hashgrid (c++ function)": [[6, "_CPPv4N3ipc8HashGrid8HashGridEv"]], "ipc::hashgrid::build (c++ function)": [[6, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"], [6, "_CPPv4N3ipc8HashGrid5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"]], "ipc::hashgrid::cell_size (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid9cell_sizeEv"]], "ipc::hashgrid::clear (c++ function)": [[6, "_CPPv4N3ipc8HashGrid5clearEv"]], "ipc::hashgrid::detect_candidates (c++ function)": [[6, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE"], [6, "_CPPv4I0ENK3ipc8HashGrid17detect_candidatesEvRKNSt6vectorI8HashItemEERKNSt6vectorI8HashItemEERKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFb6size_t6size_tEEERNSt6vectorI9CandidateEE"]], "ipc::hashgrid::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::hashgrid::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::hashgrid::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::hashgrid::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::hashgrid::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::hashgrid::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::hashgrid::domain_max (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid10domain_maxEv"]], "ipc::hashgrid::domain_min (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid10domain_minEv"]], "ipc::hashgrid::edge_items (c++ member)": [[6, "_CPPv4N3ipc8HashGrid10edge_itemsE"]], "ipc::hashgrid::face_items (c++ member)": [[6, "_CPPv4N3ipc8HashGrid10face_itemsE"]], "ipc::hashgrid::grid_size (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid9grid_sizeEv"]], "ipc::hashgrid::hash (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid4hashEiii"]], "ipc::hashgrid::insert_box (c++ function)": [[6, "_CPPv4NK3ipc8HashGrid10insert_boxERK4AABBKlRNSt6vectorI8HashItemEE"]], "ipc::hashgrid::insert_boxes (c++ function)": [[6, "_CPPv4N3ipc8HashGrid12insert_boxesEv"], [6, "_CPPv4NK3ipc8HashGrid12insert_boxesERKNSt6vectorI4AABBEERNSt6vectorI8HashItemEE"]], "ipc::hashgrid::m_cell_size (c++ member)": [[6, "_CPPv4N3ipc8HashGrid11m_cell_sizeE"]], "ipc::hashgrid::m_domain_max (c++ member)": [[6, "_CPPv4N3ipc8HashGrid12m_domain_maxE"]], "ipc::hashgrid::m_domain_min (c++ member)": [[6, "_CPPv4N3ipc8HashGrid12m_domain_minE"]], "ipc::hashgrid::m_grid_size (c++ member)": [[6, "_CPPv4N3ipc8HashGrid11m_grid_sizeE"]], "ipc::hashgrid::resize (c++ function)": [[6, "_CPPv4N3ipc8HashGrid6resizeERK10ArrayMax3dRK10ArrayMax3dd"]], "ipc::hashgrid::vertex_items (c++ member)": [[6, "_CPPv4N3ipc8HashGrid12vertex_itemsE"]], "ipc::spatialhash (c++ class)": [[6, "_CPPv4N3ipc11SpatialHashE"]], "ipc::spatialhash::spatialhash (c++ function)": [[6, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd"], [6, "_CPPv4N3ipc11SpatialHash11SpatialHashERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd"], [6, "_CPPv4N3ipc11SpatialHash11SpatialHashEv"]], "ipc::spatialhash::build (c++ function)": [[6, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"], [6, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd"], [6, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"], [6, "_CPPv4N3ipc11SpatialHash5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEdd"]], "ipc::spatialhash::built_in_radius (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash15built_in_radiusE"]], "ipc::spatialhash::clear (c++ function)": [[6, "_CPPv4N3ipc11SpatialHash5clearEv"]], "ipc::spatialhash::detect_candidates (c++ function)": [[6, "_CPPv4I0ENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE"], [6, "_CPPv4I0_b_bENK3ipc11SpatialHash17detect_candidatesEvRKNSt6vectorI4AABBEERKNSt6vectorI4AABBEERKNSt8functionIFviR13unordered_setIiEEEERKNSt8functionIFbiiEEERNSt6vectorI9CandidateEE"]], "ipc::spatialhash::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::spatialhash::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::spatialhash::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::spatialhash::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::spatialhash::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::spatialhash::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::spatialhash::dim (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash3dimE"]], "ipc::spatialhash::edge_start_ind (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash14edge_start_indE"]], "ipc::spatialhash::edge_to_voxels (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash14edge_to_voxelsE"]], "ipc::spatialhash::face_to_voxels (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash14face_to_voxelsE"]], "ipc::spatialhash::is_edge_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash13is_edge_indexEi"]], "ipc::spatialhash::is_triangle_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash17is_triangle_indexEi"]], "ipc::spatialhash::is_vertex_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash15is_vertex_indexEi"]], "ipc::spatialhash::left_bottom_corner (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash18left_bottom_cornerE"]], "ipc::spatialhash::locate_box_voxel_axis_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash27locate_box_voxel_axis_indexE10ArrayMax3d10ArrayMax3dR10ArrayMax3iR10ArrayMax3iKd"]], "ipc::spatialhash::locate_voxel_axis_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash23locate_voxel_axis_indexERK11VectorMax3d"]], "ipc::spatialhash::locate_voxel_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash18locate_voxel_indexERK11VectorMax3d"]], "ipc::spatialhash::one_div_voxelsize (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash17one_div_voxelSizeE"]], "ipc::spatialhash::point_to_voxels (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash15point_to_voxelsE"]], "ipc::spatialhash::query_edge_for_edges (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash20query_edge_for_edgesEiR13unordered_setIiE"]], "ipc::spatialhash::query_edge_for_triangles (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash24query_edge_for_trianglesEiR13unordered_setIiE"]], "ipc::spatialhash::query_point_for_edges (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash21query_point_for_edgesEiR13unordered_setIiE"]], "ipc::spatialhash::query_point_for_points (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash22query_point_for_pointsEiR13unordered_setIiE"]], "ipc::spatialhash::query_point_for_triangles (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash25query_point_for_trianglesEiR13unordered_setIiE"]], "ipc::spatialhash::query_triangle_for_triangles (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash28query_triangle_for_trianglesEiR13unordered_setIiE"]], "ipc::spatialhash::right_top_corner (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash16right_top_cornerE"]], "ipc::spatialhash::to_edge_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash13to_edge_indexEi"]], "ipc::spatialhash::to_triangle_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash17to_triangle_indexEi"]], "ipc::spatialhash::tri_start_ind (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash13tri_start_indE"]], "ipc::spatialhash::voxel_axis_index_to_voxel_index (c++ function)": [[6, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexERK10ArrayMax3i"], [6, "_CPPv4NK3ipc11SpatialHash31voxel_axis_index_to_voxel_indexEiii"]], "ipc::spatialhash::voxel_count (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash11voxel_countE"]], "ipc::spatialhash::voxel_count_0x1 (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash15voxel_count_0x1E"]], "ipc::spatialhash::voxel_to_primitives (c++ member)": [[6, "_CPPv4N3ipc11SpatialHash19voxel_to_primitivesE"]], "ipc::sweepandprune (c++ class)": [[6, "_CPPv4N3ipc13SweepAndPruneE"]], "ipc::sweepandprune::sweepandprune (c++ function)": [[6, "_CPPv4N3ipc13SweepAndPrune13SweepAndPruneEv"]], "ipc::sweepandprune::build (c++ function)": [[6, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"], [6, "_CPPv4N3ipc13SweepAndPrune5buildERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiEd"]], "ipc::sweepandprune::can_edge_face_collide (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune21can_edge_face_collideE6size_t6size_t"]], "ipc::sweepandprune::can_edge_vertex_collide (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune23can_edge_vertex_collideE6size_t6size_t"]], "ipc::sweepandprune::can_edges_collide (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune17can_edges_collideE6size_t6size_t"]], "ipc::sweepandprune::can_face_vertex_collide (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune23can_face_vertex_collideE6size_t6size_t"]], "ipc::sweepandprune::can_faces_collide (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune17can_faces_collideE6size_t6size_t"]], "ipc::sweepandprune::clear (c++ function)": [[6, "_CPPv4N3ipc13SweepAndPrune5clearEv"]], "ipc::sweepandprune::detect_edge_edge_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_edge_candidatesERNSt6vectorI17EdgeEdgeCandidateEE"]], "ipc::sweepandprune::detect_edge_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune27detect_edge_face_candidatesERNSt6vectorI17EdgeFaceCandidateEE"]], "ipc::sweepandprune::detect_edge_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune29detect_edge_vertex_candidatesERNSt6vectorI19EdgeVertexCandidateEE"]], "ipc::sweepandprune::detect_face_face_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune27detect_face_face_candidatesERNSt6vectorI17FaceFaceCandidateEE"]], "ipc::sweepandprune::detect_face_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune29detect_face_vertex_candidatesERNSt6vectorI19FaceVertexCandidateEE"]], "ipc::sweepandprune::detect_vertex_vertex_candidates (c++ function)": [[6, "_CPPv4NK3ipc13SweepAndPrune31detect_vertex_vertex_candidatesERNSt6vectorI21VertexVertexCandidateEE"]], "ipc::sweepandprune::edge_boxes (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune10edge_boxesE"]], "ipc::sweepandprune::ee_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12ee_sort_axisE"]], "ipc::sweepandprune::ef_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12ef_sort_axisE"]], "ipc::sweepandprune::ev_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12ev_sort_axisE"]], "ipc::sweepandprune::face_boxes (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune10face_boxesE"]], "ipc::sweepandprune::ff_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12ff_sort_axisE"]], "ipc::sweepandprune::fv_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12fv_sort_axisE"]], "ipc::sweepandprune::vertex_boxes (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12vertex_boxesE"]], "ipc::sweepandprune::vv_sort_axis (c++ member)": [[6, "_CPPv4N3ipc13SweepAndPrune12vv_sort_axisE"]], "ipc::candidates (c++ class)": [[7, "_CPPv4N3ipc10CandidatesE"]], "ipc::candidates::candidates (c++ function)": [[7, "_CPPv4N3ipc10Candidates10CandidatesEv"]], "ipc::candidates::build (c++ function)": [[7, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdK16BroadPhaseMethod"], [7, "_CPPv4N3ipc10Candidates5buildERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethod"]], "ipc::candidates::clear (c++ function)": [[7, "_CPPv4N3ipc10Candidates5clearEv"]], "ipc::candidates::compute_cfl_stepsize (c++ function)": [[7, "_CPPv4NK3ipc10Candidates20compute_cfl_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodKdRK14NarrowPhaseCCD"]], "ipc::candidates::compute_collision_free_stepsize (c++ function)": [[7, "_CPPv4NK3ipc10Candidates31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD"]], "ipc::candidates::compute_noncandidate_conservative_stepsize (c++ function)": [[7, "_CPPv4NK3ipc10Candidates42compute_noncandidate_conservative_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdEKd"]], "ipc::candidates::ee_candidates (c++ member)": [[7, "_CPPv4N3ipc10Candidates13ee_candidatesE"]], "ipc::candidates::empty (c++ function)": [[7, "_CPPv4NK3ipc10Candidates5emptyEv"]], "ipc::candidates::ev_candidates (c++ member)": [[7, "_CPPv4N3ipc10Candidates13ev_candidatesE"]], "ipc::candidates::fv_candidates (c++ member)": [[7, "_CPPv4N3ipc10Candidates13fv_candidatesE"]], "ipc::candidates::is_step_collision_free (c++ function)": [[7, "_CPPv4NK3ipc10Candidates22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdRK14NarrowPhaseCCD"]], "ipc::candidates::operator[] (c++ function)": [[7, "_CPPv4N3ipc10CandidatesixE6size_t"], [7, "_CPPv4NK3ipc10CandidatesixE6size_t"]], "ipc::candidates::save_obj (c++ function)": [[7, "_CPPv4NK3ipc10Candidates8save_objERKNSt6stringERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::candidates::size (c++ function)": [[7, "_CPPv4NK3ipc10Candidates4sizeEv"]], "ipc::candidates::vv_candidates (c++ member)": [[7, "_CPPv4N3ipc10Candidates13vv_candidatesE"]], "ipc::collisionstencil (c++ class)": [[7, "_CPPv4N3ipc16CollisionStencilE"]], "ipc::collisionstencil::compute_distance (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil16compute_distanceERK12VectorMax12d"]], "ipc::collisionstencil::compute_distance_gradient (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil25compute_distance_gradientERK12VectorMax12d"]], "ipc::collisionstencil::compute_distance_hessian (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil24compute_distance_hessianERK12VectorMax12d"]], "ipc::collisionstencil::dim (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil3dimEKi"]], "ipc::collisionstencil::dof (c++ function)": [[7, "_CPPv4I0ENK3ipc16CollisionStencil3dofE11VectorMax12I1TERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::collisionstencil::num_vertices (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil12num_verticesEv"]], "ipc::collisionstencil::vertex_ids (c++ function)": [[7, "_CPPv4NK3ipc16CollisionStencil10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::collisionstencil::vertices (c++ function)": [[7, "_CPPv4I0ENK3ipc16CollisionStencil8verticesENSt5arrayI10VectorMax3I1TEXL4EEEERK7MatrixXI1TERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::collisionstencil::~collisionstencil (c++ function)": [[7, "_CPPv4N3ipc16CollisionStencilD0Ev"]], "ipc::continuouscollisioncandidate (c++ class)": [[7, "_CPPv4N3ipc28ContinuousCollisionCandidateE"]], "ipc::continuouscollisioncandidate::ccd (c++ function)": [[7, "_CPPv4NK3ipc28ContinuousCollisionCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD"]], "ipc::continuouscollisioncandidate::write_ccd_query (c++ function)": [[7, "_CPPv4NK3ipc28ContinuousCollisionCandidate15write_ccd_queryERNSt7ostreamERK12VectorMax12dRK12VectorMax12d"]], "ipc::continuouscollisioncandidate::~continuouscollisioncandidate (c++ function)": [[7, "_CPPv4N3ipc28ContinuousCollisionCandidateD0Ev"]], "ipc::edgeedgecandidate (c++ class)": [[7, "_CPPv4N3ipc17EdgeEdgeCandidateE"]], "ipc::edgeedgecandidate::abslhashvalue (c++ function)": [[7, "_CPPv4I0EN3ipc17EdgeEdgeCandidate13AbslHashValueE1H1HRK17EdgeEdgeCandidate"]], "ipc::edgeedgecandidate::edgeedgecandidate (c++ function)": [[7, "_CPPv4N3ipc17EdgeEdgeCandidate17EdgeEdgeCandidateEll"]], "ipc::edgeedgecandidate::ccd (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD"]], "ipc::edgeedgecandidate::compute_distance (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate16compute_distanceERK12VectorMax12d"]], "ipc::edgeedgecandidate::compute_distance_gradient (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate25compute_distance_gradientERK12VectorMax12d"]], "ipc::edgeedgecandidate::compute_distance_hessian (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate24compute_distance_hessianERK12VectorMax12d"]], "ipc::edgeedgecandidate::edge0_id (c++ member)": [[7, "_CPPv4N3ipc17EdgeEdgeCandidate8edge0_idE"]], "ipc::edgeedgecandidate::edge1_id (c++ member)": [[7, "_CPPv4N3ipc17EdgeEdgeCandidate8edge1_idE"]], "ipc::edgeedgecandidate::known_dtype (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate11known_dtypeEv"]], "ipc::edgeedgecandidate::num_vertices (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate12num_verticesEv"]], "ipc::edgeedgecandidate::operator!= (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidateneERK17EdgeEdgeCandidate"]], "ipc::edgeedgecandidate::operator< (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidateltERK17EdgeEdgeCandidate"]], "ipc::edgeedgecandidate::operator== (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidateeqERK17EdgeEdgeCandidate"]], "ipc::edgeedgecandidate::vertex_ids (c++ function)": [[7, "_CPPv4NK3ipc17EdgeEdgeCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::edgefacecandidate (c++ class)": [[7, "_CPPv4N3ipc17EdgeFaceCandidateE"]], "ipc::edgefacecandidate::abslhashvalue (c++ function)": [[7, "_CPPv4I0EN3ipc17EdgeFaceCandidate13AbslHashValueE1H1HRK17EdgeFaceCandidate"]], "ipc::edgefacecandidate::edgefacecandidate (c++ function)": [[7, "_CPPv4N3ipc17EdgeFaceCandidate17EdgeFaceCandidateEll"]], "ipc::edgefacecandidate::edge_id (c++ member)": [[7, "_CPPv4N3ipc17EdgeFaceCandidate7edge_idE"]], "ipc::edgefacecandidate::face_id (c++ member)": [[7, "_CPPv4N3ipc17EdgeFaceCandidate7face_idE"]], "ipc::edgefacecandidate::operator!= (c++ function)": [[7, "_CPPv4NK3ipc17EdgeFaceCandidateneERK17EdgeFaceCandidate"]], "ipc::edgefacecandidate::operator< (c++ function)": [[7, "_CPPv4NK3ipc17EdgeFaceCandidateltERK17EdgeFaceCandidate"]], "ipc::edgefacecandidate::operator== (c++ function)": [[7, "_CPPv4NK3ipc17EdgeFaceCandidateeqERK17EdgeFaceCandidate"]], "ipc::edgevertexcandidate (c++ class)": [[7, "_CPPv4N3ipc19EdgeVertexCandidateE"]], "ipc::edgevertexcandidate::abslhashvalue (c++ function)": [[7, "_CPPv4I0EN3ipc19EdgeVertexCandidate13AbslHashValueE1H1HRK19EdgeVertexCandidate"]], "ipc::edgevertexcandidate::edgevertexcandidate (c++ function)": [[7, "_CPPv4N3ipc19EdgeVertexCandidate19EdgeVertexCandidateEll"]], "ipc::edgevertexcandidate::ccd (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD"]], "ipc::edgevertexcandidate::compute_distance (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate16compute_distanceERK12VectorMax12d"]], "ipc::edgevertexcandidate::compute_distance_gradient (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate25compute_distance_gradientERK12VectorMax12d"]], "ipc::edgevertexcandidate::compute_distance_hessian (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate24compute_distance_hessianERK12VectorMax12d"]], "ipc::edgevertexcandidate::edge_id (c++ member)": [[7, "_CPPv4N3ipc19EdgeVertexCandidate7edge_idE"]], "ipc::edgevertexcandidate::known_dtype (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate11known_dtypeEv"]], "ipc::edgevertexcandidate::num_vertices (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate12num_verticesEv"]], "ipc::edgevertexcandidate::operator!= (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidateneERK19EdgeVertexCandidate"]], "ipc::edgevertexcandidate::operator< (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidateltERK19EdgeVertexCandidate"]], "ipc::edgevertexcandidate::operator== (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidateeqERK19EdgeVertexCandidate"]], "ipc::edgevertexcandidate::vertex_id (c++ member)": [[7, "_CPPv4N3ipc19EdgeVertexCandidate9vertex_idE"]], "ipc::edgevertexcandidate::vertex_ids (c++ function)": [[7, "_CPPv4NK3ipc19EdgeVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::facevertexcandidate (c++ class)": [[7, "_CPPv4N3ipc19FaceVertexCandidateE"]], "ipc::facevertexcandidate::abslhashvalue (c++ function)": [[7, "_CPPv4I0EN3ipc19FaceVertexCandidate13AbslHashValueE1H1HRK19FaceVertexCandidate"]], "ipc::facevertexcandidate::facevertexcandidate (c++ function)": [[7, "_CPPv4N3ipc19FaceVertexCandidate19FaceVertexCandidateEll"]], "ipc::facevertexcandidate::ccd (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD"]], "ipc::facevertexcandidate::compute_distance (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate16compute_distanceERK12VectorMax12d"]], "ipc::facevertexcandidate::compute_distance_gradient (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate25compute_distance_gradientERK12VectorMax12d"]], "ipc::facevertexcandidate::compute_distance_hessian (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate24compute_distance_hessianERK12VectorMax12d"]], "ipc::facevertexcandidate::face_id (c++ member)": [[7, "_CPPv4N3ipc19FaceVertexCandidate7face_idE"]], "ipc::facevertexcandidate::known_dtype (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate11known_dtypeEv"]], "ipc::facevertexcandidate::num_vertices (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate12num_verticesEv"]], "ipc::facevertexcandidate::operator!= (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidateneERK19FaceVertexCandidate"]], "ipc::facevertexcandidate::operator< (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidateltERK19FaceVertexCandidate"]], "ipc::facevertexcandidate::operator== (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidateeqERK19FaceVertexCandidate"]], "ipc::facevertexcandidate::vertex_id (c++ member)": [[7, "_CPPv4N3ipc19FaceVertexCandidate9vertex_idE"]], "ipc::facevertexcandidate::vertex_ids (c++ function)": [[7, "_CPPv4NK3ipc19FaceVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::vertexvertexcandidate (c++ class)": [[7, "_CPPv4N3ipc21VertexVertexCandidateE"]], "ipc::vertexvertexcandidate::abslhashvalue (c++ function)": [[7, "_CPPv4I0EN3ipc21VertexVertexCandidate13AbslHashValueE1H1HRK21VertexVertexCandidate"]], "ipc::vertexvertexcandidate::vertexvertexcandidate (c++ function)": [[7, "_CPPv4N3ipc21VertexVertexCandidate21VertexVertexCandidateEll"]], "ipc::vertexvertexcandidate::ccd (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate3ccdERK12VectorMax12dRK12VectorMax12dRdKdKdRK14NarrowPhaseCCD"]], "ipc::vertexvertexcandidate::compute_distance (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate16compute_distanceERK12VectorMax12d"]], "ipc::vertexvertexcandidate::compute_distance_gradient (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate25compute_distance_gradientERK12VectorMax12d"]], "ipc::vertexvertexcandidate::compute_distance_hessian (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate24compute_distance_hessianERK12VectorMax12d"]], "ipc::vertexvertexcandidate::num_vertices (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate12num_verticesEv"]], "ipc::vertexvertexcandidate::operator!= (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidateneERK21VertexVertexCandidate"]], "ipc::vertexvertexcandidate::operator< (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidateltERK21VertexVertexCandidate"]], "ipc::vertexvertexcandidate::operator== (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidateeqERK21VertexVertexCandidate"]], "ipc::vertexvertexcandidate::vertex0_id (c++ member)": [[7, "_CPPv4N3ipc21VertexVertexCandidate10vertex0_idE"]], "ipc::vertexvertexcandidate::vertex1_id (c++ member)": [[7, "_CPPv4N3ipc21VertexVertexCandidate10vertex1_idE"]], "ipc::vertexvertexcandidate::vertex_ids (c++ function)": [[7, "_CPPv4NK3ipc21VertexVertexCandidate10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::intervalnonlineartrajectory (c++ class)": [[8, "_CPPv4N3ipc27IntervalNonlinearTrajectoryE"]], "ipc::intervalnonlineartrajectory::max_distance_from_linear (c++ function)": [[8, "_CPPv4NK3ipc27IntervalNonlinearTrajectory24max_distance_from_linearEKdKd"]], "ipc::intervalnonlineartrajectory::operator() (c++ function)": [[8, "_CPPv4NK3ipc27IntervalNonlinearTrajectoryclERKN5filib8IntervalE"]], "ipc::intervalnonlineartrajectory::~intervalnonlineartrajectory (c++ function)": [[8, "_CPPv4N3ipc27IntervalNonlinearTrajectoryD0Ev"]], "ipc::nonlineartrajectory (c++ class)": [[8, "_CPPv4N3ipc19NonlinearTrajectoryE"]], "ipc::nonlineartrajectory::max_distance_from_linear (c++ function)": [[8, "_CPPv4NK3ipc19NonlinearTrajectory24max_distance_from_linearEKdKd"]], "ipc::nonlineartrajectory::operator() (c++ function)": [[8, "_CPPv4NK3ipc19NonlinearTrajectoryclEKd"]], "ipc::nonlineartrajectory::~nonlineartrajectory (c++ function)": [[8, "_CPPv4N3ipc19NonlinearTrajectoryD0Ev"]], "ipc::compute_collision_free_stepsize (c++ function)": [[8, "_CPPv4N3ipc31compute_collision_free_stepsizeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD"]], "ipc::conservative_piecewise_linear_ccd (c++ function)": [[8, "_CPPv4N3ipc33conservative_piecewise_linear_ccdERKNSt8functionIFdKdEEERKNSt8functionIFdKdKdEEERKNSt8functionIFbKdKdKdKbRdEEERdKdKdKd"]], "ipc::edge_edge_nonlinear_ccd (c++ function)": [[8, "_CPPv4N3ipc23edge_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd"]], "ipc::is_step_collision_free (c++ function)": [[8, "_CPPv4N3ipc22is_step_collision_freeERK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdEKdK16BroadPhaseMethodRK14NarrowPhaseCCD"]], "ipc::point_edge_nonlinear_ccd (c++ function)": [[8, "_CPPv4N3ipc24point_edge_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd"]], "ipc::point_point_nonlinear_ccd (c++ function)": [[8, "_CPPv4N3ipc25point_point_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd"]], "ipc::point_triangle_nonlinear_ccd (c++ function)": [[8, "_CPPv4N3ipc28point_triangle_nonlinear_ccdERK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRK19NonlinearTrajectoryRdKdKdKdKlKd"]], "ipc::collisionmesh (c++ class)": [[9, "_CPPv4N3ipc13CollisionMeshE"]], "ipc::collisionmesh::collisionmesh (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE"], [9, "_CPPv4N3ipc13CollisionMesh13CollisionMeshERKNSt6vectorIbEERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiERKN5Eigen12SparseMatrixIdEE"], [9, "_CPPv4N3ipc13CollisionMesh13CollisionMeshEv"]], "ipc::collisionmesh::are_adjacencies_initialized (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh27are_adjacencies_initializedEv"]], "ipc::collisionmesh::are_area_jacobians_initialized (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh30are_area_jacobians_initializedEv"]], "ipc::collisionmesh::build_from_full_mesh (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh20build_from_full_meshERKN5Eigen8MatrixXdERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::collisionmesh::can_collide (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh11can_collideE"]], "ipc::collisionmesh::codim_edges (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh11codim_edgesEv"]], "ipc::collisionmesh::codim_vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh14codim_verticesEv"]], "ipc::collisionmesh::construct_faces_to_edges (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh24construct_faces_to_edgesERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::collisionmesh::construct_is_on_surface (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh23construct_is_on_surfaceEKlRKN5Eigen8MatrixXiERKN5Eigen8VectorXiE"]], "ipc::collisionmesh::default_can_collide (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh19default_can_collideE6size_t6size_t"]], "ipc::collisionmesh::dim (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh3dimEv"]], "ipc::collisionmesh::displace_vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh17displace_verticesERKN5Eigen8MatrixXdE"]], "ipc::collisionmesh::edge_area (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh9edge_areaEK6size_t"]], "ipc::collisionmesh::edge_area_gradient (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh18edge_area_gradientEK6size_t"]], "ipc::collisionmesh::edge_areas (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh10edge_areasEv"]], "ipc::collisionmesh::edge_vertex_adjacencies (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh23edge_vertex_adjacenciesEv"]], "ipc::collisionmesh::edges (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh5edgesEv"]], "ipc::collisionmesh::faces (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh5facesEv"]], "ipc::collisionmesh::faces_to_edges (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh14faces_to_edgesEv"]], "ipc::collisionmesh::full_ndof (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh9full_ndofEv"]], "ipc::collisionmesh::full_num_vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh17full_num_verticesEv"]], "ipc::collisionmesh::init_adjacencies (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh16init_adjacenciesEv"]], "ipc::collisionmesh::init_area_jacobians (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh19init_area_jacobiansEv"]], "ipc::collisionmesh::init_areas (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh10init_areasEv"]], "ipc::collisionmesh::init_codim_edges (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh16init_codim_edgesEv"]], "ipc::collisionmesh::init_codim_vertices (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh19init_codim_verticesEv"]], "ipc::collisionmesh::init_selection_matrices (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh23init_selection_matricesEKi"]], "ipc::collisionmesh::is_vertex_on_boundary (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh21is_vertex_on_boundaryEKi"]], "ipc::collisionmesh::m_codim_edges (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh13m_codim_edgesE"]], "ipc::collisionmesh::m_codim_vertices (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh16m_codim_verticesE"]], "ipc::collisionmesh::m_displacement_dof_map (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh22m_displacement_dof_mapE"]], "ipc::collisionmesh::m_displacement_map (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh18m_displacement_mapE"]], "ipc::collisionmesh::m_edge_area_jacobian (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh20m_edge_area_jacobianE"]], "ipc::collisionmesh::m_edge_areas (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh12m_edge_areasE"]], "ipc::collisionmesh::m_edge_vertex_adjacencies (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh25m_edge_vertex_adjacenciesE"]], "ipc::collisionmesh::m_edges (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh7m_edgesE"]], "ipc::collisionmesh::m_faces (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh7m_facesE"]], "ipc::collisionmesh::m_faces_to_edges (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh16m_faces_to_edgesE"]], "ipc::collisionmesh::m_full_rest_positions (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh21m_full_rest_positionsE"]], "ipc::collisionmesh::m_full_vertex_to_vertex (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh23m_full_vertex_to_vertexE"]], "ipc::collisionmesh::m_is_vertex_on_boundary (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh23m_is_vertex_on_boundaryE"]], "ipc::collisionmesh::m_rest_positions (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh16m_rest_positionsE"]], "ipc::collisionmesh::m_select_dof (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh12m_select_dofE"]], "ipc::collisionmesh::m_select_vertices (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh17m_select_verticesE"]], "ipc::collisionmesh::m_vertex_area_jacobian (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh22m_vertex_area_jacobianE"]], "ipc::collisionmesh::m_vertex_areas (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh14m_vertex_areasE"]], "ipc::collisionmesh::m_vertex_edge_adjacencies (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh25m_vertex_edge_adjacenciesE"]], "ipc::collisionmesh::m_vertex_to_full_vertex (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh23m_vertex_to_full_vertexE"]], "ipc::collisionmesh::m_vertex_vertex_adjacencies (c++ member)": [[9, "_CPPv4N3ipc13CollisionMesh27m_vertex_vertex_adjacenciesE"]], "ipc::collisionmesh::map_displacements (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh17map_displacementsERKN5Eigen8MatrixXdE"]], "ipc::collisionmesh::ndof (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh4ndofEv"]], "ipc::collisionmesh::num_codim_edges (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh15num_codim_edgesEv"]], "ipc::collisionmesh::num_codim_vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh18num_codim_verticesEv"]], "ipc::collisionmesh::num_edges (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh9num_edgesEv"]], "ipc::collisionmesh::num_faces (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh9num_facesEv"]], "ipc::collisionmesh::num_vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh12num_verticesEv"]], "ipc::collisionmesh::rest_positions (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh14rest_positionsEv"]], "ipc::collisionmesh::to_full_dof (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen12SparseMatrixIdEE"], [9, "_CPPv4NK3ipc13CollisionMesh11to_full_dofERKN5Eigen8VectorXdE"]], "ipc::collisionmesh::to_full_vertex_id (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh17to_full_vertex_idEK6size_t"]], "ipc::collisionmesh::vertex_area (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh11vertex_areaEK6size_t"]], "ipc::collisionmesh::vertex_area_gradient (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh20vertex_area_gradientEK6size_t"]], "ipc::collisionmesh::vertex_areas (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh12vertex_areasEv"]], "ipc::collisionmesh::vertex_edge_adjacencies (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh23vertex_edge_adjacenciesEv"]], "ipc::collisionmesh::vertex_matrix_to_dof_matrix (c++ function)": [[9, "_CPPv4N3ipc13CollisionMesh27vertex_matrix_to_dof_matrixERKN5Eigen12SparseMatrixIdEEi"]], "ipc::collisionmesh::vertex_vertex_adjacencies (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh25vertex_vertex_adjacenciesEv"]], "ipc::collisionmesh::vertices (c++ function)": [[9, "_CPPv4NK3ipc13CollisionMesh8verticesERKN5Eigen8MatrixXdE"]], "ipc::collisionmesh::~collisionmesh (c++ function)": [[9, "_CPPv4N3ipc13CollisionMeshD0Ev"]], "ipc::edgeedgedistancetype (c++ enum)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceTypeE"]], "ipc::edgeedgedistancetype::auto (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType4AUTOE"]], "ipc::edgeedgedistancetype::ea0_eb (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA0_EBE"]], "ipc::edgeedgedistancetype::ea0_eb0 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA0_EB0E"]], "ipc::edgeedgedistancetype::ea0_eb1 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA0_EB1E"]], "ipc::edgeedgedistancetype::ea1_eb (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA1_EBE"]], "ipc::edgeedgedistancetype::ea1_eb0 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA1_EB0E"]], "ipc::edgeedgedistancetype::ea1_eb1 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType7EA1_EB1E"]], "ipc::edgeedgedistancetype::ea_eb (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType5EA_EBE"]], "ipc::edgeedgedistancetype::ea_eb0 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA_EB0E"]], "ipc::edgeedgedistancetype::ea_eb1 (c++ enumerator)": [[10, "_CPPv4N3ipc20EdgeEdgeDistanceType6EA_EB1E"]], "ipc::pointedgedistancetype (c++ enum)": [[10, "_CPPv4N3ipc21PointEdgeDistanceTypeE"]], "ipc::pointedgedistancetype::auto (c++ enumerator)": [[10, "_CPPv4N3ipc21PointEdgeDistanceType4AUTOE"]], "ipc::pointedgedistancetype::p_e (c++ enumerator)": [[10, "_CPPv4N3ipc21PointEdgeDistanceType3P_EE"]], "ipc::pointedgedistancetype::p_e0 (c++ enumerator)": [[10, "_CPPv4N3ipc21PointEdgeDistanceType4P_E0E"]], "ipc::pointedgedistancetype::p_e1 (c++ enumerator)": [[10, "_CPPv4N3ipc21PointEdgeDistanceType4P_E1E"]], "ipc::pointtriangledistancetype (c++ enum)": [[10, "_CPPv4N3ipc25PointTriangleDistanceTypeE"]], "ipc::pointtriangledistancetype::auto (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4AUTOE"]], "ipc::pointtriangledistancetype::p_e0 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_E0E"]], "ipc::pointtriangledistancetype::p_e1 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_E1E"]], "ipc::pointtriangledistancetype::p_e2 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_E2E"]], "ipc::pointtriangledistancetype::p_t (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType3P_TE"]], "ipc::pointtriangledistancetype::p_t0 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_T0E"]], "ipc::pointtriangledistancetype::p_t1 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_T1E"]], "ipc::pointtriangledistancetype::p_t2 (c++ enumerator)": [[10, "_CPPv4N3ipc25PointTriangleDistanceType4P_T2E"]], "ipc::edge_edge_cross_squarednorm (c++ function)": [[10, "_CPPv4N3ipc27edge_edge_cross_squarednormERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_cross_squarednorm_gradient (c++ function)": [[10, "_CPPv4N3ipc36edge_edge_cross_squarednorm_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_cross_squarednorm_hessian (c++ function)": [[10, "_CPPv4N3ipc35edge_edge_cross_squarednorm_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_distance (c++ function)": [[10, "_CPPv4N3ipc18edge_edge_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType"]], "ipc::edge_edge_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc27edge_edge_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType"]], "ipc::edge_edge_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc26edge_edge_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE20EdgeEdgeDistanceType"]], "ipc::edge_edge_distance_type (c++ function)": [[10, "_CPPv4N3ipc23edge_edge_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_mollifier (c++ function)": [[10, "_CPPv4N3ipc19edge_edge_mollifierEKdKd"], [10, "_CPPv4N3ipc19edge_edge_mollifierERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd"]], "ipc::edge_edge_mollifier_gradient (c++ function)": [[10, "_CPPv4N3ipc28edge_edge_mollifier_gradientEKdKd"], [10, "_CPPv4N3ipc28edge_edge_mollifier_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd"]], "ipc::edge_edge_mollifier_hessian (c++ function)": [[10, "_CPPv4N3ipc27edge_edge_mollifier_hessianEKdKd"], [10, "_CPPv4N3ipc27edge_edge_mollifier_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEEKd"]], "ipc::edge_edge_mollifier_threshold (c++ function)": [[10, "_CPPv4N3ipc29edge_edge_mollifier_thresholdERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::line_line_distance (c++ function)": [[10, "_CPPv4N3ipc18line_line_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::line_line_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc27line_line_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::line_line_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc26line_line_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_edge_distance (c++ function)": [[10, "_CPPv4N3ipc19point_edge_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType"]], "ipc::point_edge_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc28point_edge_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType"]], "ipc::point_edge_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc27point_edge_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE21PointEdgeDistanceType"]], "ipc::point_edge_distance_type (c++ function)": [[10, "_CPPv4N3ipc24point_edge_distance_typeERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_line_distance (c++ function)": [[10, "_CPPv4N3ipc19point_line_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_line_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc28point_line_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_line_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc27point_line_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_plane_distance (c++ function)": [[10, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"], [10, "_CPPv4N3ipc20point_plane_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_plane_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"], [10, "_CPPv4N3ipc29point_plane_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_plane_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"], [10, "_CPPv4N3ipc28point_plane_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_point_distance (c++ function)": [[10, "_CPPv4N3ipc20point_point_distanceERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_point_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc29point_point_distance_gradientERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_point_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc28point_point_distance_hessianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_triangle_distance (c++ function)": [[10, "_CPPv4N3ipc23point_triangle_distanceERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType"]], "ipc::point_triangle_distance_gradient (c++ function)": [[10, "_CPPv4N3ipc32point_triangle_distance_gradientERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType"]], "ipc::point_triangle_distance_hessian (c++ function)": [[10, "_CPPv4N3ipc31point_triangle_distance_hessianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE25PointTriangleDistanceType"]], "ipc::point_triangle_distance_type (c++ function)": [[10, "_CPPv4N3ipc28point_triangle_distance_typeERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::smooth_friction_f0 (c++ function)": [[11, "_CPPv4N3ipc18smooth_friction_f0EKdKd"]], "ipc::smooth_friction_f1 (c++ function)": [[11, "_CPPv4N3ipc18smooth_friction_f1EKdKd"]], "ipc::smooth_friction_f1_over_x (c++ function)": [[11, "_CPPv4N3ipc25smooth_friction_f1_over_xEKdKd"]], "ipc::smooth_friction_f2 (c++ function)": [[11, "_CPPv4N3ipc18smooth_friction_f2EKdKd"]], "ipc::smooth_friction_f2_x_minus_f1_over_x3 (c++ function)": [[11, "_CPPv4N3ipc37smooth_friction_f2_x_minus_f1_over_x3EKdKd"]], "ipc::has_intersections (c++ function)": [[12, "_CPPv4N3ipc17has_intersectionsERK13CollisionMeshRKN5Eigen8MatrixXdEK16BroadPhaseMethod"]], "ipc::is_edge_intersecting_triangle (c++ function)": [[12, "_CPPv4N3ipc29is_edge_intersecting_triangleERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dERKN5Eigen8Vector3dE"]], "ipc::edgeedgenormalcollision (c++ class)": [[13, "_CPPv4N3ipc23EdgeEdgeNormalCollisionE"]], "ipc::edgeedgenormalcollision::abslhashvalue (c++ function)": [[13, "_CPPv4I0EN3ipc23EdgeEdgeNormalCollision13AbslHashValueE1H1HRK23EdgeEdgeNormalCollision"]], "ipc::edgeedgenormalcollision::edgeedgenormalcollision (c++ function)": [[13, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdK20EdgeEdgeDistanceType"], [13, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionEKlKlKdKdRKN5Eigen12SparseVectorIdEEK20EdgeEdgeDistanceType"], [13, "_CPPv4N3ipc23EdgeEdgeNormalCollision23EdgeEdgeNormalCollisionERK17EdgeEdgeCandidateKdK20EdgeEdgeDistanceType"]], "ipc::edgeedgenormalcollision::dtype (c++ member)": [[13, "_CPPv4N3ipc23EdgeEdgeNormalCollision5dtypeE"]], "ipc::edgeedgenormalcollision::eps_x (c++ member)": [[13, "_CPPv4N3ipc23EdgeEdgeNormalCollision5eps_xE"]], "ipc::edgeedgenormalcollision::is_mollified (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision12is_mollifiedEv"]], "ipc::edgeedgenormalcollision::known_dtype (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision11known_dtypeEv"]], "ipc::edgeedgenormalcollision::mollifier (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12d"], [13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision9mollifierERK12VectorMax12dd"]], "ipc::edgeedgenormalcollision::mollifier_gradient (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12d"], [13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision18mollifier_gradientERK12VectorMax12dd"]], "ipc::edgeedgenormalcollision::mollifier_gradient_jacobian_wrt_x (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d"]], "ipc::edgeedgenormalcollision::mollifier_gradient_wrt_x (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d"]], "ipc::edgeedgenormalcollision::mollifier_hessian (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12d"], [13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision17mollifier_hessianERK12VectorMax12dd"]], "ipc::edgeedgenormalcollision::mollifier_threshold (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollision19mollifier_thresholdERK12VectorMax12d"]], "ipc::edgeedgenormalcollision::operator!= (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionneERK23EdgeEdgeNormalCollision"]], "ipc::edgeedgenormalcollision::operator< (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollisionltERK23EdgeEdgeNormalCollision"]], "ipc::edgeedgenormalcollision::operator== (c++ function)": [[13, "_CPPv4NK3ipc23EdgeEdgeNormalCollisioneqERK23EdgeEdgeNormalCollision"]], "ipc::edgevertexnormalcollision (c++ class)": [[13, "_CPPv4N3ipc25EdgeVertexNormalCollisionE"]], "ipc::edgevertexnormalcollision::abslhashvalue (c++ function)": [[13, "_CPPv4I0EN3ipc25EdgeVertexNormalCollision13AbslHashValueE1H1HRK25EdgeVertexNormalCollision"]], "ipc::edgevertexnormalcollision::edgevertexcandidate (c++ function)": [[13, "_CPPv4N3ipc25EdgeVertexNormalCollision19EdgeVertexCandidateEll"]], "ipc::edgevertexnormalcollision::edgevertexnormalcollision (c++ function)": [[13, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE"], [13, "_CPPv4N3ipc25EdgeVertexNormalCollision25EdgeVertexNormalCollisionERK19EdgeVertexCandidate"]], "ipc::edgevertexnormalcollision::known_dtype (c++ function)": [[13, "_CPPv4NK3ipc25EdgeVertexNormalCollision11known_dtypeEv"]], "ipc::facevertexnormalcollision (c++ class)": [[13, "_CPPv4N3ipc25FaceVertexNormalCollisionE"]], "ipc::facevertexnormalcollision::abslhashvalue (c++ function)": [[13, "_CPPv4I0EN3ipc25FaceVertexNormalCollision13AbslHashValueE1H1HRK25FaceVertexNormalCollision"]], "ipc::facevertexnormalcollision::facevertexcandidate (c++ function)": [[13, "_CPPv4N3ipc25FaceVertexNormalCollision19FaceVertexCandidateEll"]], "ipc::facevertexnormalcollision::facevertexnormalcollision (c++ function)": [[13, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE"], [13, "_CPPv4N3ipc25FaceVertexNormalCollision25FaceVertexNormalCollisionERK19FaceVertexCandidate"]], "ipc::facevertexnormalcollision::known_dtype (c++ function)": [[13, "_CPPv4NK3ipc25FaceVertexNormalCollision11known_dtypeEv"]], "ipc::normalcollision (c++ class)": [[13, "_CPPv4N3ipc15NormalCollisionE"]], "ipc::normalcollision::normalcollision (c++ function)": [[13, "_CPPv4N3ipc15NormalCollision15NormalCollisionEKdRKN5Eigen12SparseVectorIdEE"], [13, "_CPPv4N3ipc15NormalCollision15NormalCollisionEv"]], "ipc::normalcollision::dmin (c++ member)": [[13, "_CPPv4N3ipc15NormalCollision4dminE"]], "ipc::normalcollision::is_mollified (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision12is_mollifiedEv"]], "ipc::normalcollision::mollifier (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12d"], [13, "_CPPv4NK3ipc15NormalCollision9mollifierERK12VectorMax12dd"]], "ipc::normalcollision::mollifier_gradient (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12d"], [13, "_CPPv4NK3ipc15NormalCollision18mollifier_gradientERK12VectorMax12dd"]], "ipc::normalcollision::mollifier_gradient_jacobian_wrt_x (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision33mollifier_gradient_jacobian_wrt_xERK12VectorMax12dRK12VectorMax12d"]], "ipc::normalcollision::mollifier_gradient_wrt_x (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision24mollifier_gradient_wrt_xERK12VectorMax12dRK12VectorMax12d"]], "ipc::normalcollision::mollifier_hessian (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12d"], [13, "_CPPv4NK3ipc15NormalCollision17mollifier_hessianERK12VectorMax12dd"]], "ipc::normalcollision::mollifier_threshold (c++ function)": [[13, "_CPPv4NK3ipc15NormalCollision19mollifier_thresholdERK12VectorMax12d"]], "ipc::normalcollision::weight (c++ member)": [[13, "_CPPv4N3ipc15NormalCollision6weightE"]], "ipc::normalcollision::weight_gradient (c++ member)": [[13, "_CPPv4N3ipc15NormalCollision15weight_gradientE"]], "ipc::normalcollision::~normalcollision (c++ function)": [[13, "_CPPv4N3ipc15NormalCollisionD0Ev"]], "ipc::normalcollisions (c++ class)": [[13, "_CPPv4N3ipc16NormalCollisionsE"]], "ipc::normalcollisions::normalcollisions (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions16NormalCollisionsEv"]], "ipc::normalcollisions::build (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions5buildERK10CandidatesRK13CollisionMeshRKN5Eigen8MatrixXdEKdKd"], [13, "_CPPv4N3ipc16NormalCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdEKdKdK16BroadPhaseMethod"]], "ipc::normalcollisions::clear (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions5clearEv"]], "ipc::normalcollisions::compute_minimum_distance (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions24compute_minimum_distanceERK13CollisionMeshRKN5Eigen8MatrixXdE"]], "ipc::normalcollisions::ee_collisions (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions13ee_collisionsE"]], "ipc::normalcollisions::empty (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions5emptyEv"]], "ipc::normalcollisions::enable_shape_derivatives (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions24enable_shape_derivativesEv"]], "ipc::normalcollisions::ev_collisions (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions13ev_collisionsE"]], "ipc::normalcollisions::fv_collisions (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions13fv_collisionsE"]], "ipc::normalcollisions::is_edge_edge (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions12is_edge_edgeE6size_t"]], "ipc::normalcollisions::is_edge_vertex (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions14is_edge_vertexE6size_t"]], "ipc::normalcollisions::is_face_vertex (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions14is_face_vertexE6size_t"]], "ipc::normalcollisions::is_plane_vertex (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions15is_plane_vertexE6size_t"]], "ipc::normalcollisions::is_vertex_vertex (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions16is_vertex_vertexE6size_t"]], "ipc::normalcollisions::m_enable_shape_derivatives (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions26m_enable_shape_derivativesE"]], "ipc::normalcollisions::m_use_area_weighting (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions20m_use_area_weightingE"]], "ipc::normalcollisions::m_use_improved_max_approximator (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions31m_use_improved_max_approximatorE"]], "ipc::normalcollisions::operator[] (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisionsixE6size_t"], [13, "_CPPv4NK3ipc16NormalCollisionsixE6size_t"]], "ipc::normalcollisions::pv_collisions (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions13pv_collisionsE"]], "ipc::normalcollisions::set_enable_shape_derivatives (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions28set_enable_shape_derivativesEKb"]], "ipc::normalcollisions::set_use_area_weighting (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions22set_use_area_weightingEKb"]], "ipc::normalcollisions::set_use_improved_max_approximator (c++ function)": [[13, "_CPPv4N3ipc16NormalCollisions33set_use_improved_max_approximatorEKb"]], "ipc::normalcollisions::size (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions4sizeEv"]], "ipc::normalcollisions::to_string (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions9to_stringERK13CollisionMeshRKN5Eigen8MatrixXdE"]], "ipc::normalcollisions::use_area_weighting (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions18use_area_weightingEv"]], "ipc::normalcollisions::use_improved_max_approximator (c++ function)": [[13, "_CPPv4NK3ipc16NormalCollisions29use_improved_max_approximatorEv"]], "ipc::normalcollisions::value_type (c++ type)": [[13, "_CPPv4N3ipc16NormalCollisions10value_typeE"]], "ipc::normalcollisions::vv_collisions (c++ member)": [[13, "_CPPv4N3ipc16NormalCollisions13vv_collisionsE"]], "ipc::planevertexnormalcollision (c++ class)": [[13, "_CPPv4N3ipc26PlaneVertexNormalCollisionE"]], "ipc::planevertexnormalcollision::planevertexnormalcollision (c++ function)": [[13, "_CPPv4N3ipc26PlaneVertexNormalCollision26PlaneVertexNormalCollisionERK11VectorMax3dRK11VectorMax3dKl"]], "ipc::planevertexnormalcollision::compute_distance (c++ function)": [[13, "_CPPv4NK3ipc26PlaneVertexNormalCollision16compute_distanceERK12VectorMax12d"]], "ipc::planevertexnormalcollision::compute_distance_gradient (c++ function)": [[13, "_CPPv4NK3ipc26PlaneVertexNormalCollision25compute_distance_gradientERK12VectorMax12d"]], "ipc::planevertexnormalcollision::compute_distance_hessian (c++ function)": [[13, "_CPPv4NK3ipc26PlaneVertexNormalCollision24compute_distance_hessianERK12VectorMax12d"]], "ipc::planevertexnormalcollision::num_vertices (c++ function)": [[13, "_CPPv4NK3ipc26PlaneVertexNormalCollision12num_verticesEv"]], "ipc::planevertexnormalcollision::plane_normal (c++ member)": [[13, "_CPPv4N3ipc26PlaneVertexNormalCollision12plane_normalE"]], "ipc::planevertexnormalcollision::plane_origin (c++ member)": [[13, "_CPPv4N3ipc26PlaneVertexNormalCollision12plane_originE"]], "ipc::planevertexnormalcollision::vertex_id (c++ member)": [[13, "_CPPv4N3ipc26PlaneVertexNormalCollision9vertex_idE"]], "ipc::planevertexnormalcollision::vertex_ids (c++ function)": [[13, "_CPPv4NK3ipc26PlaneVertexNormalCollision10vertex_idsERKN5Eigen8MatrixXiERKN5Eigen8MatrixXiE"]], "ipc::vertexvertexnormalcollision (c++ class)": [[13, "_CPPv4N3ipc27VertexVertexNormalCollisionE"]], "ipc::vertexvertexnormalcollision::abslhashvalue (c++ function)": [[13, "_CPPv4I0EN3ipc27VertexVertexNormalCollision13AbslHashValueE1H1HRK27VertexVertexNormalCollision"]], "ipc::vertexvertexnormalcollision::vertexvertexcandidate (c++ function)": [[13, "_CPPv4N3ipc27VertexVertexNormalCollision21VertexVertexCandidateEll"]], "ipc::vertexvertexnormalcollision::vertexvertexnormalcollision (c++ function)": [[13, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionEKlKlKdRKN5Eigen12SparseVectorIdEE"], [13, "_CPPv4N3ipc27VertexVertexNormalCollision27VertexVertexNormalCollisionERK21VertexVertexCandidate"]], "ipc::barrierpotential (c++ class)": [[14, "_CPPv4N3ipc16BarrierPotentialE"]], "ipc::barrierpotential::barrierpotential (c++ function)": [[14, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKNSt10shared_ptrI7BarrierEEKdKb"], [14, "_CPPv4N3ipc16BarrierPotential16BarrierPotentialEKdKb"]], "ipc::barrierpotential::super (c++ type)": [[14, "_CPPv4N3ipc16BarrierPotential5SuperE"]], "ipc::barrierpotential::barrier (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential7barrierEv"]], "ipc::barrierpotential::dhat (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential4dhatEv"]], "ipc::barrierpotential::force_magnitude (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential15force_magnitudeEKdKdKd"]], "ipc::barrierpotential::force_magnitude_gradient (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd"]], "ipc::barrierpotential::gradient (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential8gradientEKdKd"], [14, "_CPPv4NK3ipc16BarrierPotential8gradientERK15NormalCollisionRK12VectorMax12d"]], "ipc::barrierpotential::hessian (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential7hessianEKdKd"], [14, "_CPPv4NK3ipc16BarrierPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod"]], "ipc::barrierpotential::m_barrier (c++ member)": [[14, "_CPPv4N3ipc16BarrierPotential9m_barrierE"]], "ipc::barrierpotential::m_dhat (c++ member)": [[14, "_CPPv4N3ipc16BarrierPotential6m_dhatE"]], "ipc::barrierpotential::m_use_physical_barrier (c++ member)": [[14, "_CPPv4N3ipc16BarrierPotential22m_use_physical_barrierE"]], "ipc::barrierpotential::operator() (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotentialclEKdKd"]], "ipc::barrierpotential::set_barrier (c++ function)": [[14, "_CPPv4N3ipc16BarrierPotential11set_barrierEKNSt10shared_ptrI7BarrierEE"]], "ipc::barrierpotential::set_dhat (c++ function)": [[14, "_CPPv4N3ipc16BarrierPotential8set_dhatEKd"]], "ipc::barrierpotential::set_use_physical_barrier (c++ function)": [[14, "_CPPv4N3ipc16BarrierPotential24set_use_physical_barrierEb"]], "ipc::barrierpotential::use_physical_barrier (c++ function)": [[14, "_CPPv4NK3ipc16BarrierPotential20use_physical_barrierEv"]], "ipc::frictionpotential (c++ class)": [[14, "_CPPv4N3ipc17FrictionPotentialE"]], "ipc::frictionpotential::frictionpotential (c++ function)": [[14, "_CPPv4N3ipc17FrictionPotential17FrictionPotentialEKd"]], "ipc::frictionpotential::super (c++ type)": [[14, "_CPPv4N3ipc17FrictionPotential5SuperE"]], "ipc::frictionpotential::eps_v (c++ function)": [[14, "_CPPv4NK3ipc17FrictionPotential5eps_vEv"]], "ipc::frictionpotential::f0 (c++ function)": [[14, "_CPPv4NK3ipc17FrictionPotential2f0EKd"]], "ipc::frictionpotential::f1_over_x (c++ function)": [[14, "_CPPv4NK3ipc17FrictionPotential9f1_over_xEKd"]], "ipc::frictionpotential::f2_x_minus_f1_over_x3 (c++ function)": [[14, "_CPPv4NK3ipc17FrictionPotential21f2_x_minus_f1_over_x3EKd"]], "ipc::frictionpotential::is_dynamic (c++ function)": [[14, "_CPPv4NK3ipc17FrictionPotential10is_dynamicEKd"]], "ipc::frictionpotential::m_eps_v (c++ member)": [[14, "_CPPv4N3ipc17FrictionPotential7m_eps_vE"]], "ipc::frictionpotential::set_eps_v (c++ function)": [[14, "_CPPv4N3ipc17FrictionPotential9set_eps_vEKd"]], "ipc::normaladhesionpotential (c++ class)": [[14, "_CPPv4N3ipc23NormalAdhesionPotentialE"]], "ipc::normaladhesionpotential::normaladhesionpotential (c++ function)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential23NormalAdhesionPotentialEKdKdKdKd"]], "ipc::normaladhesionpotential::super (c++ type)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential5SuperE"]], "ipc::normaladhesionpotential::y (c++ member)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential1YE"]], "ipc::normaladhesionpotential::dhat_a (c++ member)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential6dhat_aE"]], "ipc::normaladhesionpotential::dhat_p (c++ member)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential6dhat_pE"]], "ipc::normaladhesionpotential::eps_c (c++ member)": [[14, "_CPPv4N3ipc23NormalAdhesionPotential5eps_cE"]], "ipc::normaladhesionpotential::force_magnitude (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotential15force_magnitudeEKdKdKd"]], "ipc::normaladhesionpotential::force_magnitude_gradient (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd"]], "ipc::normaladhesionpotential::gradient (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientEKdKd"], [14, "_CPPv4NK3ipc23NormalAdhesionPotential8gradientERK15NormalCollisionRK12VectorMax12d"]], "ipc::normaladhesionpotential::hessian (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianEKdKd"], [14, "_CPPv4NK3ipc23NormalAdhesionPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod"]], "ipc::normaladhesionpotential::normal_adhesion_potential_args (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotential30normal_adhesion_potential_argsEKd"]], "ipc::normaladhesionpotential::operator() (c++ function)": [[14, "_CPPv4NK3ipc23NormalAdhesionPotentialclEKdKd"]], "ipc::normalpotential (c++ class)": [[14, "_CPPv4N3ipc15NormalPotentialE"]], "ipc::normalpotential::normalpotential (c++ function)": [[14, "_CPPv4N3ipc15NormalPotential15NormalPotentialEv"]], "ipc::normalpotential::super (c++ type)": [[14, "_CPPv4N3ipc15NormalPotential5SuperE"]], "ipc::normalpotential::force_magnitude (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotential15force_magnitudeEKdKdKd"]], "ipc::normalpotential::force_magnitude_gradient (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotential24force_magnitude_gradientEKdRK12VectorMax12dKdKd"]], "ipc::normalpotential::gradient (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotential8gradientEKdKd"], [14, "_CPPv4NK3ipc15NormalPotential8gradientERK15NormalCollisionRK12VectorMax12d"]], "ipc::normalpotential::hessian (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotential7hessianEKdKd"], [14, "_CPPv4NK3ipc15NormalPotential7hessianERK15NormalCollisionRK12VectorMax12dK19PSDProjectionMethod"]], "ipc::normalpotential::operator() (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotentialclEKdKd"], [14, "_CPPv4NK3ipc15NormalPotentialclERK15NormalCollisionRK12VectorMax12d"]], "ipc::normalpotential::shape_derivative (c++ function)": [[14, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK15NormalCollisionRKNSt5arrayIlXL4EEEERK12VectorMax12dRK12VectorMax12dRNSt6vectorIN5Eigen7TripletIdEEEE"], [14, "_CPPv4NK3ipc15NormalPotential16shape_derivativeERK16NormalCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE"]], "ipc::normalpotential::~normalpotential (c++ function)": [[14, "_CPPv4N3ipc15NormalPotentialD0Ev"]], "ipc::potential (c++ class)": [[14, "_CPPv4I0EN3ipc9PotentialE"]], "ipc::potential::potential (c++ function)": [[14, "_CPPv4N3ipc9Potential9PotentialEv"]], "ipc::potential::tcollision (c++ type)": [[14, "_CPPv4N3ipc9Potential10TCollisionE"]], "ipc::potential::gradient (c++ function)": [[14, "_CPPv4NK3ipc9Potential8gradientERK10TCollisionRK12VectorMax12d"], [14, "_CPPv4NK3ipc9Potential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE"]], "ipc::potential::hessian (c++ function)": [[14, "_CPPv4NK3ipc9Potential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod"], [14, "_CPPv4NK3ipc9Potential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod"]], "ipc::potential::operator() (c++ function)": [[14, "_CPPv4NK3ipc9PotentialclERK10TCollisionRK12VectorMax12d"], [14, "_CPPv4NK3ipc9PotentialclERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE"]], "ipc::potential::~potential (c++ function)": [[14, "_CPPv4N3ipc9PotentialD0Ev"]], "ipc::tangentialadhesionpotential (c++ class)": [[14, "_CPPv4N3ipc27TangentialAdhesionPotentialE"]], "ipc::tangentialadhesionpotential::super (c++ type)": [[14, "_CPPv4N3ipc27TangentialAdhesionPotential5SuperE"]], "ipc::tangentialadhesionpotential::tangentialadhesionpotential (c++ function)": [[14, "_CPPv4N3ipc27TangentialAdhesionPotential27TangentialAdhesionPotentialEKd"]], "ipc::tangentialadhesionpotential::eps_a (c++ function)": [[14, "_CPPv4NK3ipc27TangentialAdhesionPotential5eps_aEv"]], "ipc::tangentialadhesionpotential::f0 (c++ function)": [[14, "_CPPv4NK3ipc27TangentialAdhesionPotential2f0EKd"]], "ipc::tangentialadhesionpotential::f1_over_x (c++ function)": [[14, "_CPPv4NK3ipc27TangentialAdhesionPotential9f1_over_xEKd"]], "ipc::tangentialadhesionpotential::f2_x_minus_f1_over_x3 (c++ function)": [[14, "_CPPv4NK3ipc27TangentialAdhesionPotential21f2_x_minus_f1_over_x3EKd"]], "ipc::tangentialadhesionpotential::is_dynamic (c++ function)": [[14, "_CPPv4NK3ipc27TangentialAdhesionPotential10is_dynamicEKd"]], "ipc::tangentialadhesionpotential::m_eps_a (c++ member)": [[14, "_CPPv4N3ipc27TangentialAdhesionPotential7m_eps_aE"]], "ipc::tangentialadhesionpotential::set_eps_a (c++ function)": [[14, "_CPPv4N3ipc27TangentialAdhesionPotential9set_eps_aEKd"]], "ipc::tangentialpotential (c++ class)": [[14, "_CPPv4N3ipc19TangentialPotentialE"]], "ipc::tangentialpotential::diffwrt (c++ enum)": [[14, "_CPPv4N3ipc19TangentialPotential7DiffWRTE"]], "ipc::tangentialpotential::diffwrt::lagged_displacements (c++ enumerator)": [[14, "_CPPv4N3ipc19TangentialPotential7DiffWRT20LAGGED_DISPLACEMENTSE"]], "ipc::tangentialpotential::diffwrt::rest_positions (c++ enumerator)": [[14, "_CPPv4N3ipc19TangentialPotential7DiffWRT14REST_POSITIONSE"]], "ipc::tangentialpotential::diffwrt::velocities (c++ enumerator)": [[14, "_CPPv4N3ipc19TangentialPotential7DiffWRT10VELOCITIESE"]], "ipc::tangentialpotential::super (c++ type)": [[14, "_CPPv4N3ipc19TangentialPotential5SuperE"]], "ipc::tangentialpotential::f0 (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential2f0EKd"]], "ipc::tangentialpotential::f1_over_x (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential9f1_over_xEKd"]], "ipc::tangentialpotential::f2_x_minus_f1_over_x3 (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential21f2_x_minus_f1_over_x3EKd"]], "ipc::tangentialpotential::force (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential5forceERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdKdKb"], [14, "_CPPv4NK3ipc19TangentialPotential5forceERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdKdKb"]], "ipc::tangentialpotential::force_jacobian (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK19TangentialCollisionRK12VectorMax12dRK12VectorMax12dRK12VectorMax12dRK16BarrierPotentialKdK7DiffWRTKd"], [14, "_CPPv4NK3ipc19TangentialPotential14force_jacobianERK20TangentialCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERKN5Eigen8MatrixXdERK16BarrierPotentialKdK7DiffWRTKd"]], "ipc::tangentialpotential::gradient (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential8gradientERK10TCollisionRK12VectorMax12d"], [14, "_CPPv4NK3ipc19TangentialPotential8gradientERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdE"], [14, "_CPPv4NK3ipc19TangentialPotential8gradientERK19TangentialCollisionRK12VectorMax12d"]], "ipc::tangentialpotential::hessian (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential7hessianERK10TCollisionRK12VectorMax12dK19PSDProjectionMethod"], [14, "_CPPv4NK3ipc19TangentialPotential7hessianERK11TCollisionsRK13CollisionMeshRKN5Eigen8MatrixXdEK19PSDProjectionMethod"], [14, "_CPPv4NK3ipc19TangentialPotential7hessianERK19TangentialCollisionRK12VectorMax12dK19PSDProjectionMethod"]], "ipc::tangentialpotential::is_dynamic (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotential10is_dynamicEKd"]], "ipc::tangentialpotential::operator() (c++ function)": [[14, "_CPPv4NK3ipc19TangentialPotentialclERK19TangentialCollisionRK12VectorMax12d"]], "ipc::tangentialpotential::~tangentialpotential (c++ function)": [[14, "_CPPv4N3ipc19TangentialPotentialD0Ev"]], "ipc::edge_edge_closest_point (c++ function)": [[15, "_CPPv4N3ipc23edge_edge_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_closest_point_jacobian (c++ function)": [[15, "_CPPv4N3ipc32edge_edge_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_relative_velocity (c++ function)": [[15, "_CPPv4N3ipc27edge_edge_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::edge_edge_relative_velocity_matrix (c++ function)": [[15, "_CPPv4N3ipc34edge_edge_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::edge_edge_relative_velocity_matrix_jacobian (c++ function)": [[15, "_CPPv4N3ipc43edge_edge_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::edge_edge_tangent_basis (c++ function)": [[15, "_CPPv4N3ipc23edge_edge_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edge_edge_tangent_basis_jacobian (c++ function)": [[15, "_CPPv4N3ipc32edge_edge_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_edge_closest_point (c++ function)": [[15, "_CPPv4N3ipc24point_edge_closest_pointERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_edge_closest_point_jacobian (c++ function)": [[15, "_CPPv4N3ipc33point_edge_closest_point_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_edge_relative_velocity (c++ function)": [[15, "_CPPv4N3ipc28point_edge_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEEKd"]], "ipc::point_edge_relative_velocity_matrix (c++ function)": [[15, "_CPPv4N3ipc35point_edge_relative_velocity_matrixEKiKd"]], "ipc::point_edge_relative_velocity_matrix_jacobian (c++ function)": [[15, "_CPPv4N3ipc44point_edge_relative_velocity_matrix_jacobianEKiKd"]], "ipc::point_edge_tangent_basis (c++ function)": [[15, "_CPPv4N3ipc24point_edge_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_edge_tangent_basis_jacobian (c++ function)": [[15, "_CPPv4N3ipc33point_edge_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_point_relative_velocity (c++ function)": [[15, "_CPPv4N3ipc29point_point_relative_velocityERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_point_relative_velocity_matrix (c++ function)": [[15, "_CPPv4N3ipc36point_point_relative_velocity_matrixEKi"]], "ipc::point_point_relative_velocity_matrix_jacobian (c++ function)": [[15, "_CPPv4N3ipc45point_point_relative_velocity_matrix_jacobianEKi"]], "ipc::point_point_tangent_basis (c++ function)": [[15, "_CPPv4N3ipc25point_point_tangent_basisERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_point_tangent_basis_jacobian (c++ function)": [[15, "_CPPv4N3ipc34point_point_tangent_basis_jacobianERKN5Eigen3RefIK11VectorMax3dEERKN5Eigen3RefIK11VectorMax3dEE"]], "ipc::point_triangle_closest_point (c++ function)": [[15, "_CPPv4N3ipc28point_triangle_closest_pointERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_triangle_closest_point_jacobian (c++ function)": [[15, "_CPPv4N3ipc37point_triangle_closest_point_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_triangle_relative_velocity (c++ function)": [[15, "_CPPv4N3ipc32point_triangle_relative_velocityERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::point_triangle_relative_velocity_matrix (c++ function)": [[15, "_CPPv4N3ipc39point_triangle_relative_velocity_matrixEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::point_triangle_relative_velocity_matrix_jacobian (c++ function)": [[15, "_CPPv4N3ipc48point_triangle_relative_velocity_matrix_jacobianEKiRKN5Eigen3RefIKN5Eigen8Vector2dEEE"]], "ipc::point_triangle_tangent_basis (c++ function)": [[15, "_CPPv4N3ipc28point_triangle_tangent_basisERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::point_triangle_tangent_basis_jacobian (c++ function)": [[15, "_CPPv4N3ipc37point_triangle_tangent_basis_jacobianERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEERKN5Eigen3RefIKN5Eigen8Vector3dEEE"]], "ipc::edgeedgetangentialcollision (c++ class)": [[16, "_CPPv4N3ipc27EdgeEdgeTangentialCollisionE"]], "ipc::edgeedgetangentialcollision::edgeedgecandidate (c++ function)": [[16, "_CPPv4N3ipc27EdgeEdgeTangentialCollision17EdgeEdgeCandidateEll"]], "ipc::edgeedgetangentialcollision::edgeedgetangentialcollision (c++ function)": [[16, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollision"], [16, "_CPPv4N3ipc27EdgeEdgeTangentialCollision27EdgeEdgeTangentialCollisionERK23EdgeEdgeNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd"]], "ipc::edgeedgetangentialcollision::compute_closest_point (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_closest_pointERK12VectorMax12d"]], "ipc::edgeedgetangentialcollision::compute_closest_point_jacobian (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d"]], "ipc::edgeedgetangentialcollision::compute_tangent_basis (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision21compute_tangent_basisERK12VectorMax12d"]], "ipc::edgeedgetangentialcollision::compute_tangent_basis_jacobian (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d"]], "ipc::edgeedgetangentialcollision::known_dtype (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision11known_dtypeEv"]], "ipc::edgeedgetangentialcollision::relative_velocity (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision17relative_velocityERK12VectorMax12d"]], "ipc::edgeedgetangentialcollision::relative_velocity_matrix (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision24relative_velocity_matrixERK11VectorMax2d"], [16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision24relative_velocity_matrixEv"]], "ipc::edgeedgetangentialcollision::relative_velocity_matrix_jacobian (c++ function)": [[16, "_CPPv4NK3ipc27EdgeEdgeTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d"]], "ipc::edgevertextangentialcollision (c++ class)": [[16, "_CPPv4N3ipc29EdgeVertexTangentialCollisionE"]], "ipc::edgevertextangentialcollision::edgevertexcandidate (c++ function)": [[16, "_CPPv4N3ipc29EdgeVertexTangentialCollision19EdgeVertexCandidateEll"]], "ipc::edgevertextangentialcollision::edgevertextangentialcollision (c++ function)": [[16, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollision"], [16, "_CPPv4N3ipc29EdgeVertexTangentialCollision29EdgeVertexTangentialCollisionERK25EdgeVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd"]], "ipc::edgevertextangentialcollision::compute_closest_point (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_closest_pointERK12VectorMax12d"]], "ipc::edgevertextangentialcollision::compute_closest_point_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d"]], "ipc::edgevertextangentialcollision::compute_tangent_basis (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d"]], "ipc::edgevertextangentialcollision::compute_tangent_basis_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d"]], "ipc::edgevertextangentialcollision::relative_velocity (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision17relative_velocityERK12VectorMax12d"]], "ipc::edgevertextangentialcollision::relative_velocity_matrix (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d"], [16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision24relative_velocity_matrixEv"]], "ipc::edgevertextangentialcollision::relative_velocity_matrix_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29EdgeVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d"]], "ipc::facevertextangentialcollision (c++ class)": [[16, "_CPPv4N3ipc29FaceVertexTangentialCollisionE"]], "ipc::facevertextangentialcollision::facevertexcandidate (c++ function)": [[16, "_CPPv4N3ipc29FaceVertexTangentialCollision19FaceVertexCandidateEll"]], "ipc::facevertextangentialcollision::facevertextangentialcollision (c++ function)": [[16, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollision"], [16, "_CPPv4N3ipc29FaceVertexTangentialCollision29FaceVertexTangentialCollisionERK25FaceVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd"]], "ipc::facevertextangentialcollision::compute_closest_point (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_closest_pointERK12VectorMax12d"]], "ipc::facevertextangentialcollision::compute_closest_point_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d"]], "ipc::facevertextangentialcollision::compute_tangent_basis (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d"]], "ipc::facevertextangentialcollision::compute_tangent_basis_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d"]], "ipc::facevertextangentialcollision::relative_velocity (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision17relative_velocityERK12VectorMax12d"]], "ipc::facevertextangentialcollision::relative_velocity_matrix (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d"], [16, "_CPPv4NK3ipc29FaceVertexTangentialCollision24relative_velocity_matrixEv"]], "ipc::facevertextangentialcollision::relative_velocity_matrix_jacobian (c++ function)": [[16, "_CPPv4NK3ipc29FaceVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d"]], "ipc::tangentialcollision (c++ class)": [[16, "_CPPv4N3ipc19TangentialCollisionE"]], "ipc::tangentialcollision::closest_point (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision13closest_pointE"]], "ipc::tangentialcollision::compute_closest_point (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision21compute_closest_pointERK12VectorMax12d"]], "ipc::tangentialcollision::compute_closest_point_jacobian (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision30compute_closest_point_jacobianERK12VectorMax12d"]], "ipc::tangentialcollision::compute_tangent_basis (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision21compute_tangent_basisERK12VectorMax12d"]], "ipc::tangentialcollision::compute_tangent_basis_jacobian (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d"]], "ipc::tangentialcollision::dim (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision3dimEv"]], "ipc::tangentialcollision::init (c++ function)": [[16, "_CPPv4N3ipc19TangentialCollision4initERK15NormalCollisionRK12VectorMax12dRK15NormalPotentialKd"]], "ipc::tangentialcollision::mu (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision2muE"]], "ipc::tangentialcollision::ndof (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision4ndofEv"]], "ipc::tangentialcollision::normal_force_magnitude (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision22normal_force_magnitudeE"]], "ipc::tangentialcollision::relative_velocity (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision17relative_velocityERK12VectorMax12d"]], "ipc::tangentialcollision::relative_velocity_matrix (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision24relative_velocity_matrixERK11VectorMax2d"], [16, "_CPPv4NK3ipc19TangentialCollision24relative_velocity_matrixEv"]], "ipc::tangentialcollision::relative_velocity_matrix_jacobian (c++ function)": [[16, "_CPPv4NK3ipc19TangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d"]], "ipc::tangentialcollision::tangent_basis (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision13tangent_basisE"]], "ipc::tangentialcollision::weight (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision6weightE"]], "ipc::tangentialcollision::weight_gradient (c++ member)": [[16, "_CPPv4N3ipc19TangentialCollision15weight_gradientE"]], "ipc::tangentialcollision::~tangentialcollision (c++ function)": [[16, "_CPPv4N3ipc19TangentialCollisionD0Ev"]], "ipc::tangentialcollisions (c++ class)": [[16, "_CPPv4N3ipc20TangentialCollisionsE"]], "ipc::tangentialcollisions::tangentialcollisions (c++ function)": [[16, "_CPPv4N3ipc20TangentialCollisions20TangentialCollisionsEv"]], "ipc::tangentialcollisions::build (c++ function)": [[16, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialKdRKN5Eigen8VectorXdERKNSt8functionIFdddEEE"], [16, "_CPPv4N3ipc20TangentialCollisions5buildERK13CollisionMeshRKN5Eigen8MatrixXdERK16NormalCollisionsRK16BarrierPotentialdd"]], "ipc::tangentialcollisions::clear (c++ function)": [[16, "_CPPv4N3ipc20TangentialCollisions5clearEv"]], "ipc::tangentialcollisions::default_blend_mu (c++ function)": [[16, "_CPPv4N3ipc20TangentialCollisions16default_blend_muEdd"]], "ipc::tangentialcollisions::ee_collisions (c++ member)": [[16, "_CPPv4N3ipc20TangentialCollisions13ee_collisionsE"]], "ipc::tangentialcollisions::empty (c++ function)": [[16, "_CPPv4NK3ipc20TangentialCollisions5emptyEv"]], "ipc::tangentialcollisions::ev_collisions (c++ member)": [[16, "_CPPv4N3ipc20TangentialCollisions13ev_collisionsE"]], "ipc::tangentialcollisions::fv_collisions (c++ member)": [[16, "_CPPv4N3ipc20TangentialCollisions13fv_collisionsE"]], "ipc::tangentialcollisions::operator[] (c++ function)": [[16, "_CPPv4N3ipc20TangentialCollisionsixEK6size_t"], [16, "_CPPv4NK3ipc20TangentialCollisionsixEK6size_t"]], "ipc::tangentialcollisions::size (c++ function)": [[16, "_CPPv4NK3ipc20TangentialCollisions4sizeEv"]], "ipc::tangentialcollisions::value_type (c++ type)": [[16, "_CPPv4N3ipc20TangentialCollisions10value_typeE"]], "ipc::tangentialcollisions::vv_collisions (c++ member)": [[16, "_CPPv4N3ipc20TangentialCollisions13vv_collisionsE"]], "ipc::vertexvertextangentialcollision (c++ class)": [[16, "_CPPv4N3ipc31VertexVertexTangentialCollisionE"]], "ipc::vertexvertextangentialcollision::vertexvertexcandidate (c++ function)": [[16, "_CPPv4N3ipc31VertexVertexTangentialCollision21VertexVertexCandidateEll"]], "ipc::vertexvertextangentialcollision::vertexvertextangentialcollision (c++ function)": [[16, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollision"], [16, "_CPPv4N3ipc31VertexVertexTangentialCollision31VertexVertexTangentialCollisionERK27VertexVertexNormalCollisionRK12VectorMax12dRK16BarrierPotentialKd"]], "ipc::vertexvertextangentialcollision::compute_closest_point (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_closest_pointERK12VectorMax12d"]], "ipc::vertexvertextangentialcollision::compute_closest_point_jacobian (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_closest_point_jacobianERK12VectorMax12d"]], "ipc::vertexvertextangentialcollision::compute_tangent_basis (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision21compute_tangent_basisERK12VectorMax12d"]], "ipc::vertexvertextangentialcollision::compute_tangent_basis_jacobian (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision30compute_tangent_basis_jacobianERK12VectorMax12d"]], "ipc::vertexvertextangentialcollision::relative_velocity (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision17relative_velocityERK12VectorMax12d"]], "ipc::vertexvertextangentialcollision::relative_velocity_matrix (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision24relative_velocity_matrixERK11VectorMax2d"], [16, "_CPPv4NK3ipc31VertexVertexTangentialCollision24relative_velocity_matrixEv"]], "ipc::vertexvertextangentialcollision::relative_velocity_matrix_jacobian (c++ function)": [[16, "_CPPv4NK3ipc31VertexVertexTangentialCollision33relative_velocity_matrix_jacobianERK11VectorMax2d"]], "ipc::psdprojectionmethod (c++ enum)": [[17, "_CPPv4N3ipc19PSDProjectionMethodE"]], "ipc::psdprojectionmethod::abs (c++ enumerator)": [[17, "_CPPv4N3ipc19PSDProjectionMethod3ABSE"]], "ipc::psdprojectionmethod::clamp (c++ enumerator)": [[17, "_CPPv4N3ipc19PSDProjectionMethod5CLAMPE"]], "ipc::psdprojectionmethod::none (c++ enumerator)": [[17, "_CPPv4N3ipc19PSDProjectionMethod4NONEE"]], "ipc::logger (c++ function)": [[17, "_CPPv4N3ipc6loggerEv"]], "ipc::project_to_pd (c++ function)": [[17, "_CPPv4I0_i_i_i_i_iEN3ipc13project_to_pdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEd"]], "ipc::project_to_psd (c++ function)": [[17, "_CPPv4I0_i_i_i_i_iEN3ipc14project_to_psdEN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEERKN5Eigen6MatrixI7_Scalar5_Rows5_Cols8_Options8_MaxRows8_MaxColsEEK19PSDProjectionMethod"]], "ipc::set_logger (c++ function)": [[17, "_CPPv4N3ipc10set_loggerENSt10shared_ptrIN6spdlog6loggerEEE"]], "max_normal_adhesion_force_magnitude() (in module ipctk)": [[21, "ipctk.max_normal_adhesion_force_magnitude"]], "normal_adhesion_potential() (in module ipctk)": [[21, "ipctk.normal_adhesion_potential"]], "normal_adhesion_potential_first_derivative() (in module ipctk)": [[21, "ipctk.normal_adhesion_potential_first_derivative"]], "normal_adhesion_potential_second_derivative() (in module ipctk)": [[21, "ipctk.normal_adhesion_potential_second_derivative"]], "tangential_adhesion_f0() (in module ipctk)": [[21, "ipctk.tangential_adhesion_f0"]], "tangential_adhesion_f1() (in module ipctk)": [[21, "ipctk.tangential_adhesion_f1"]], "tangential_adhesion_f1_over_x() (in module ipctk)": [[21, "ipctk.tangential_adhesion_f1_over_x"]], "tangential_adhesion_f2() (in module ipctk)": [[21, "ipctk.tangential_adhesion_f2"]], "tangential_adhesion_f2_x_minus_f1_over_x3() (in module ipctk)": [[21, "ipctk.tangential_adhesion_f2_x_minus_f1_over_x3"]], "barrier (class in ipctk)": [[22, "ipctk.Barrier"]], "clampedlogbarrier (class in ipctk)": [[22, "ipctk.ClampedLogBarrier"]], "__annotations__ (ipctk.clampedlogbarrier attribute)": [[22, "ipctk.ClampedLogBarrier.__annotations__"]], "__call__() (ipctk.barrier method)": [[22, "ipctk.Barrier.__call__"]], "__init__() (ipctk.barrier method)": [[22, "ipctk.Barrier.__init__"]], "__init__() (ipctk.clampedlogbarrier method)": [[22, "ipctk.ClampedLogBarrier.__init__"]], "__module__ (ipctk.barrier attribute)": [[22, "ipctk.Barrier.__module__"]], "__module__ (ipctk.clampedlogbarrier attribute)": [[22, "ipctk.ClampedLogBarrier.__module__"]], "barrier() (in module ipctk)": [[22, "ipctk.barrier"]], "barrier_first_derivative() (in module ipctk)": [[22, "ipctk.barrier_first_derivative"]], "barrier_force_magnitude() (in module ipctk)": [[22, "ipctk.barrier_force_magnitude"]], "barrier_force_magnitude_gradient() (in module ipctk)": [[22, "ipctk.barrier_force_magnitude_gradient"]], "barrier_second_derivative() (in module ipctk)": [[22, "ipctk.barrier_second_derivative"]], "first_derivative() (ipctk.barrier method)": [[22, "ipctk.Barrier.first_derivative"]], "initial_barrier_stiffness() (in module ipctk)": [[22, "ipctk.initial_barrier_stiffness"]], "second_derivative() (ipctk.barrier method)": [[22, "ipctk.Barrier.second_derivative"]], "units() (ipctk.barrier method)": [[22, "ipctk.Barrier.units"]], "update_barrier_stiffness() (in module ipctk)": [[22, "ipctk.update_barrier_stiffness"]], "aabb (class in ipctk)": [[23, "ipctk.AABB"]], "bounding_volume_hierarchy (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.BOUNDING_VOLUME_HIERARCHY"]], "brute_force (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.BRUTE_FORCE"]], "bvh (class in ipctk)": [[23, "ipctk.BVH"]], "broadphase (class in ipctk)": [[23, "ipctk.BroadPhase"]], "broadphasemethod (class in ipctk)": [[23, "ipctk.BroadPhaseMethod"]], "bruteforce (class in ipctk)": [[23, "ipctk.BruteForce"]], "hash_grid (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.HASH_GRID"]], "hashgrid (class in ipctk)": [[23, "ipctk.HashGrid"]], "spatial_hash (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.SPATIAL_HASH"]], "sweep_and_prune (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.SWEEP_AND_PRUNE"]], "sweep_and_tiniest_queue (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.SWEEP_AND_TINIEST_QUEUE"]], "spatialhash (class in ipctk)": [[23, "ipctk.SpatialHash"]], "sweepandprune (class in ipctk)": [[23, "ipctk.SweepAndPrune"]], "__annotations__ (ipctk.aabb attribute)": [[23, "ipctk.AABB.__annotations__"]], "__annotations__ (ipctk.bvh attribute)": [[23, "ipctk.BVH.__annotations__"]], "__annotations__ (ipctk.broadphase attribute)": [[23, "ipctk.BroadPhase.__annotations__"]], "__annotations__ (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.__annotations__"]], "__annotations__ (ipctk.bruteforce attribute)": [[23, "ipctk.BruteForce.__annotations__"]], "__annotations__ (ipctk.hashgrid attribute)": [[23, "ipctk.HashGrid.__annotations__"]], "__annotations__ (ipctk.spatialhash attribute)": [[23, "ipctk.SpatialHash.__annotations__"]], "__annotations__ (ipctk.sweepandprune attribute)": [[23, "ipctk.SweepAndPrune.__annotations__"]], "__eq__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__eq__"]], "__getstate__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__getstate__"]], "__hash__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__hash__"]], "__index__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__index__"]], "__init__() (ipctk.aabb method)": [[23, "ipctk.AABB.__init__"]], "__init__() (ipctk.bvh method)": [[23, "ipctk.BVH.__init__"]], "__init__() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.__init__"]], "__init__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__init__"]], "__init__() (ipctk.bruteforce method)": [[23, "ipctk.BruteForce.__init__"]], "__init__() (ipctk.hashgrid method)": [[23, "ipctk.HashGrid.__init__"]], "__init__() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.__init__"]], "__init__() (ipctk.sweepandprune method)": [[23, "ipctk.SweepAndPrune.__init__"]], "__int__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__int__"]], "__members__ (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.__members__"]], "__module__ (ipctk.aabb attribute)": [[23, "ipctk.AABB.__module__"]], "__module__ (ipctk.bvh attribute)": [[23, "ipctk.BVH.__module__"]], "__module__ (ipctk.broadphase attribute)": [[23, "ipctk.BroadPhase.__module__"]], "__module__ (ipctk.broadphasemethod attribute)": [[23, "ipctk.BroadPhaseMethod.__module__"]], "__module__ (ipctk.bruteforce attribute)": [[23, "ipctk.BruteForce.__module__"]], "__module__ (ipctk.hashgrid attribute)": [[23, "ipctk.HashGrid.__module__"]], "__module__ (ipctk.spatialhash attribute)": [[23, "ipctk.SpatialHash.__module__"]], "__module__ (ipctk.sweepandprune attribute)": [[23, "ipctk.SweepAndPrune.__module__"]], "__ne__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__ne__"]], "__repr__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__repr__"]], "__setstate__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__setstate__"]], "__str__() (ipctk.broadphasemethod method)": [[23, "ipctk.BroadPhaseMethod.__str__"]], "build() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.build"]], "build() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.build"]], "can_vertices_collide (ipctk.broadphase property)": [[23, "ipctk.BroadPhase.can_vertices_collide"]], "cell_size (ipctk.hashgrid property)": [[23, "ipctk.HashGrid.cell_size"]], "clear() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.clear"]], "clear() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.clear"]], "conservative_inflation() (ipctk.aabb static method)": [[23, "ipctk.AABB.conservative_inflation"]], "detect_collision_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_collision_candidates"]], "detect_edge_edge_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_edge_edge_candidates"]], "detect_edge_face_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_edge_face_candidates"]], "detect_edge_vertex_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_edge_vertex_candidates"]], "detect_face_face_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_face_face_candidates"]], "detect_face_vertex_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_face_vertex_candidates"]], "detect_vertex_vertex_candidates() (ipctk.broadphase method)": [[23, "ipctk.BroadPhase.detect_vertex_vertex_candidates"]], "domain_max (ipctk.hashgrid property)": [[23, "ipctk.HashGrid.domain_max"]], "domain_min (ipctk.hashgrid property)": [[23, "ipctk.HashGrid.domain_min"]], "edge_start_ind (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.edge_start_ind"]], "edge_to_voxels (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.edge_to_voxels"]], "face_to_voxels (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.face_to_voxels"]], "from_point() (ipctk.aabb static method)": [[23, "ipctk.AABB.from_point"]], "grid_size (ipctk.hashgrid property)": [[23, "ipctk.HashGrid.grid_size"]], "intersects() (ipctk.aabb method)": [[23, "ipctk.AABB.intersects"]], "is_edge_index() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.is_edge_index"]], "is_triangle_index() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.is_triangle_index"]], "is_vertex_index() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.is_vertex_index"]], "left_bottom_corner (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.left_bottom_corner"]], "make_broad_phase() (ipctk.broadphase static method)": [[23, "ipctk.BroadPhase.make_broad_phase"]], "max (ipctk.aabb property)": [[23, "ipctk.AABB.max"]], "min (ipctk.aabb property)": [[23, "ipctk.AABB.min"]], "name (ipctk.broadphasemethod property)": [[23, "ipctk.BroadPhaseMethod.name"]], "one_div_voxelsize (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.one_div_voxelSize"]], "point_to_voxels (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.point_to_voxels"]], "right_top_corner (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.right_top_corner"]], "to_edge_index() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.to_edge_index"]], "to_triangle_index() (ipctk.spatialhash method)": [[23, "ipctk.SpatialHash.to_triangle_index"]], "tri_start_ind (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.tri_start_ind"]], "value (ipctk.broadphasemethod property)": [[23, "ipctk.BroadPhaseMethod.value"]], "vertex_ids (ipctk.aabb property)": [[23, "ipctk.AABB.vertex_ids"]], "voxel_count (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.voxel_count"]], "voxel_count_0x1 (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.voxel_count_0x1"]], "voxel_to_primitives (ipctk.spatialhash property)": [[23, "ipctk.SpatialHash.voxel_to_primitives"]], "candidates (class in ipctk)": [[24, "ipctk.Candidates"]], "continuouscollisioncandidate (class in ipctk)": [[24, "ipctk.ContinuousCollisionCandidate"]], "edgeedgecandidate (class in ipctk)": [[24, "ipctk.EdgeEdgeCandidate"]], "edgefacecandidate (class in ipctk)": [[24, "ipctk.EdgeFaceCandidate"]], "edgevertexcandidate (class in ipctk)": [[24, "ipctk.EdgeVertexCandidate"]], "facevertexcandidate (class in ipctk)": [[24, "ipctk.FaceVertexCandidate"]], "vertexvertexcandidate (class in ipctk)": [[24, "ipctk.VertexVertexCandidate"]], "__annotations__ (ipctk.candidates attribute)": [[24, "ipctk.Candidates.__annotations__"]], "__annotations__ (ipctk.continuouscollisioncandidate attribute)": [[24, "ipctk.ContinuousCollisionCandidate.__annotations__"]], "__annotations__ (ipctk.edgeedgecandidate attribute)": [[24, "ipctk.EdgeEdgeCandidate.__annotations__"]], "__annotations__ (ipctk.edgefacecandidate attribute)": [[24, "ipctk.EdgeFaceCandidate.__annotations__"]], "__annotations__ (ipctk.edgevertexcandidate attribute)": [[24, "ipctk.EdgeVertexCandidate.__annotations__"]], "__annotations__ (ipctk.facevertexcandidate attribute)": [[24, "ipctk.FaceVertexCandidate.__annotations__"]], "__annotations__ (ipctk.vertexvertexcandidate attribute)": [[24, "ipctk.VertexVertexCandidate.__annotations__"]], "__eq__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__eq__"]], "__eq__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__eq__"]], "__eq__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__eq__"]], "__eq__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__eq__"]], "__eq__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__eq__"]], "__getitem__() (ipctk.candidates method)": [[24, "ipctk.Candidates.__getitem__"]], "__hash__ (ipctk.edgeedgecandidate attribute)": [[24, "ipctk.EdgeEdgeCandidate.__hash__"]], "__hash__ (ipctk.edgefacecandidate attribute)": [[24, "ipctk.EdgeFaceCandidate.__hash__"]], "__hash__ (ipctk.edgevertexcandidate attribute)": [[24, "ipctk.EdgeVertexCandidate.__hash__"]], "__hash__ (ipctk.facevertexcandidate attribute)": [[24, "ipctk.FaceVertexCandidate.__hash__"]], "__hash__ (ipctk.vertexvertexcandidate attribute)": [[24, "ipctk.VertexVertexCandidate.__hash__"]], "__init__() (ipctk.candidates method)": [[24, "ipctk.Candidates.__init__"]], "__init__() (ipctk.continuouscollisioncandidate method)": [[24, "ipctk.ContinuousCollisionCandidate.__init__"]], "__init__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__init__"]], "__init__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__init__"]], "__init__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__init__"]], "__init__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__init__"]], "__init__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__init__"]], "__len__() (ipctk.candidates method)": [[24, "ipctk.Candidates.__len__"]], "__lt__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__lt__"]], "__lt__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__lt__"]], "__lt__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__lt__"]], "__lt__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__lt__"]], "__lt__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__lt__"]], "__module__ (ipctk.candidates attribute)": [[24, "ipctk.Candidates.__module__"]], "__module__ (ipctk.continuouscollisioncandidate attribute)": [[24, "ipctk.ContinuousCollisionCandidate.__module__"]], "__module__ (ipctk.edgeedgecandidate attribute)": [[24, "ipctk.EdgeEdgeCandidate.__module__"]], "__module__ (ipctk.edgefacecandidate attribute)": [[24, "ipctk.EdgeFaceCandidate.__module__"]], "__module__ (ipctk.edgevertexcandidate attribute)": [[24, "ipctk.EdgeVertexCandidate.__module__"]], "__module__ (ipctk.facevertexcandidate attribute)": [[24, "ipctk.FaceVertexCandidate.__module__"]], "__module__ (ipctk.vertexvertexcandidate attribute)": [[24, "ipctk.VertexVertexCandidate.__module__"]], "__ne__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__ne__"]], "__ne__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__ne__"]], "__ne__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__ne__"]], "__ne__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__ne__"]], "__ne__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__ne__"]], "__repr__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__repr__"]], "__repr__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__repr__"]], "__repr__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__repr__"]], "__repr__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__repr__"]], "__repr__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__repr__"]], "__str__() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.__str__"]], "__str__() (ipctk.edgefacecandidate method)": [[24, "ipctk.EdgeFaceCandidate.__str__"]], "__str__() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.__str__"]], "__str__() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.__str__"]], "__str__() (ipctk.vertexvertexcandidate method)": [[24, "ipctk.VertexVertexCandidate.__str__"]], "build() (ipctk.candidates method)": [[24, "ipctk.Candidates.build"]], "ccd() (ipctk.continuouscollisioncandidate method)": [[24, "ipctk.ContinuousCollisionCandidate.ccd"]], "clear() (ipctk.candidates method)": [[24, "ipctk.Candidates.clear"]], "compute_cfl_stepsize() (ipctk.candidates method)": [[24, "ipctk.Candidates.compute_cfl_stepsize"]], "compute_collision_free_stepsize() (ipctk.candidates method)": [[24, "ipctk.Candidates.compute_collision_free_stepsize"]], "compute_noncandidate_conservative_stepsize() (ipctk.candidates method)": [[24, "ipctk.Candidates.compute_noncandidate_conservative_stepsize"]], "edge0_id (ipctk.edgeedgecandidate property)": [[24, "ipctk.EdgeEdgeCandidate.edge0_id"]], "edge1_id (ipctk.edgeedgecandidate property)": [[24, "ipctk.EdgeEdgeCandidate.edge1_id"]], "edge_id (ipctk.edgefacecandidate property)": [[24, "ipctk.EdgeFaceCandidate.edge_id"]], "edge_id (ipctk.edgevertexcandidate property)": [[24, "ipctk.EdgeVertexCandidate.edge_id"]], "ee_candidates (ipctk.candidates property)": [[24, "ipctk.Candidates.ee_candidates"]], "empty() (ipctk.candidates method)": [[24, "ipctk.Candidates.empty"]], "ev_candidates (ipctk.candidates property)": [[24, "ipctk.Candidates.ev_candidates"]], "face_id (ipctk.edgefacecandidate property)": [[24, "ipctk.EdgeFaceCandidate.face_id"]], "face_id (ipctk.facevertexcandidate property)": [[24, "ipctk.FaceVertexCandidate.face_id"]], "fv_candidates (ipctk.candidates property)": [[24, "ipctk.Candidates.fv_candidates"]], "is_step_collision_free() (ipctk.candidates method)": [[24, "ipctk.Candidates.is_step_collision_free"]], "known_dtype() (ipctk.edgeedgecandidate method)": [[24, "ipctk.EdgeEdgeCandidate.known_dtype"]], "known_dtype() (ipctk.edgevertexcandidate method)": [[24, "ipctk.EdgeVertexCandidate.known_dtype"]], "known_dtype() (ipctk.facevertexcandidate method)": [[24, "ipctk.FaceVertexCandidate.known_dtype"]], "print_ccd_query() (ipctk.continuouscollisioncandidate method)": [[24, "ipctk.ContinuousCollisionCandidate.print_ccd_query"]], "save_obj() (ipctk.candidates method)": [[24, "ipctk.Candidates.save_obj"]], "vertex0_id (ipctk.vertexvertexcandidate property)": [[24, "ipctk.VertexVertexCandidate.vertex0_id"]], "vertex1_id (ipctk.vertexvertexcandidate property)": [[24, "ipctk.VertexVertexCandidate.vertex1_id"]], "vertex_id (ipctk.edgevertexcandidate property)": [[24, "ipctk.EdgeVertexCandidate.vertex_id"]], "vertex_id (ipctk.facevertexcandidate property)": [[24, "ipctk.FaceVertexCandidate.vertex_id"]], "vv_candidates (ipctk.candidates property)": [[24, "ipctk.Candidates.vv_candidates"]], "intervalnonlineartrajectory (class in ipctk)": [[25, "ipctk.IntervalNonlinearTrajectory"]], "nonlineartrajectory (class in ipctk)": [[25, "ipctk.NonlinearTrajectory"]], "__annotations__ (ipctk.intervalnonlineartrajectory attribute)": [[25, "ipctk.IntervalNonlinearTrajectory.__annotations__"]], "__annotations__ (ipctk.nonlineartrajectory attribute)": [[25, "ipctk.NonlinearTrajectory.__annotations__"]], "__call__() (ipctk.intervalnonlineartrajectory method)": [[25, "ipctk.IntervalNonlinearTrajectory.__call__"]], "__call__() (ipctk.nonlineartrajectory method)": [[25, "ipctk.NonlinearTrajectory.__call__"]], "__init__() (ipctk.intervalnonlineartrajectory method)": [[25, "ipctk.IntervalNonlinearTrajectory.__init__"]], "__init__() (ipctk.nonlineartrajectory method)": [[25, "ipctk.NonlinearTrajectory.__init__"]], "__module__ (ipctk.intervalnonlineartrajectory attribute)": [[25, "ipctk.IntervalNonlinearTrajectory.__module__"]], "__module__ (ipctk.nonlineartrajectory attribute)": [[25, "ipctk.NonlinearTrajectory.__module__"]], "compute_ccd_filters() (in module ipctk.tight_inclusion)": [[25, "ipctk.tight_inclusion.compute_ccd_filters"]], "compute_collision_free_stepsize() (in module ipctk)": [[25, "ipctk.compute_collision_free_stepsize"]], "conservative_piecewise_linear_ccd() (in module ipctk)": [[25, "ipctk.conservative_piecewise_linear_ccd"]], "edge_edge_ccd() (in module ipctk.tight_inclusion)": [[25, "ipctk.tight_inclusion.edge_edge_ccd"]], "edge_edge_nonlinear_ccd() (in module ipctk)": [[25, "ipctk.edge_edge_nonlinear_ccd"]], "is_step_collision_free() (in module ipctk)": [[25, "ipctk.is_step_collision_free"]], "max_distance_from_linear() (ipctk.intervalnonlineartrajectory method)": [[25, "ipctk.IntervalNonlinearTrajectory.max_distance_from_linear"]], "max_distance_from_linear() (ipctk.nonlineartrajectory method)": [[25, "ipctk.NonlinearTrajectory.max_distance_from_linear"]], "point_edge_nonlinear_ccd() (in module ipctk)": [[25, "ipctk.point_edge_nonlinear_ccd"]], "point_point_nonlinear_ccd() (in module ipctk)": [[25, "ipctk.point_point_nonlinear_ccd"]], "point_triangle_ccd() (in module ipctk.tight_inclusion)": [[25, "ipctk.tight_inclusion.point_triangle_ccd"]], "point_triangle_nonlinear_ccd() (in module ipctk)": [[25, "ipctk.point_triangle_nonlinear_ccd"]], "collisionmesh (class in ipctk)": [[26, "ipctk.CollisionMesh"]], "__annotations__ (ipctk.collisionmesh attribute)": [[26, "ipctk.CollisionMesh.__annotations__"]], "__init__() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.__init__"]], "__module__ (ipctk.collisionmesh attribute)": [[26, "ipctk.CollisionMesh.__module__"]], "are_adjacencies_initialized() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.are_adjacencies_initialized"]], "are_area_jacobians_initialized() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.are_area_jacobians_initialized"]], "build_from_full_mesh() (ipctk.collisionmesh static method)": [[26, "ipctk.CollisionMesh.build_from_full_mesh"]], "can_collide (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.can_collide"]], "codim_edges (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.codim_edges"]], "codim_vertices (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.codim_vertices"]], "construct_faces_to_edges() (ipctk.collisionmesh static method)": [[26, "ipctk.CollisionMesh.construct_faces_to_edges"]], "construct_is_on_surface() (ipctk.collisionmesh static method)": [[26, "ipctk.CollisionMesh.construct_is_on_surface"]], "dim (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.dim"]], "displace_vertices() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.displace_vertices"]], "edge_area() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.edge_area"]], "edge_area_gradient() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.edge_area_gradient"]], "edge_areas() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.edge_areas"]], "edge_vertex_adjacencies (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.edge_vertex_adjacencies"]], "edges (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.edges"]], "faces (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.faces"]], "faces_to_edges (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.faces_to_edges"]], "full_ndof (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.full_ndof"]], "full_num_vertices (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.full_num_vertices"]], "init_adjacencies() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.init_adjacencies"]], "init_area_jacobians() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.init_area_jacobians"]], "is_vertex_on_boundary() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.is_vertex_on_boundary"]], "map_displacements() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.map_displacements"]], "ndof (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.ndof"]], "num_codim_edges (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.num_codim_edges"]], "num_codim_vertices (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.num_codim_vertices"]], "num_edges (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.num_edges"]], "num_faces (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.num_faces"]], "num_vertices (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.num_vertices"]], "rest_positions (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.rest_positions"]], "to_full_dof() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.to_full_dof"]], "to_full_vertex_id() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.to_full_vertex_id"]], "vertex_area() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.vertex_area"]], "vertex_area_gradient() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.vertex_area_gradient"]], "vertex_areas (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.vertex_areas"]], "vertex_edge_adjacencies (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.vertex_edge_adjacencies"]], "vertex_vertex_adjacencies (ipctk.collisionmesh property)": [[26, "ipctk.CollisionMesh.vertex_vertex_adjacencies"]], "vertices() (ipctk.collisionmesh method)": [[26, "ipctk.CollisionMesh.vertices"]], "auto (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.AUTO"]], "auto (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.AUTO"]], "auto (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.AUTO"]], "ea0_eb (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA0_EB"]], "ea0_eb0 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA0_EB0"]], "ea0_eb1 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA0_EB1"]], "ea1_eb (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA1_EB"]], "ea1_eb0 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA1_EB0"]], "ea1_eb1 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA1_EB1"]], "ea_eb (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA_EB"]], "ea_eb0 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA_EB0"]], "ea_eb1 (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.EA_EB1"]], "edgeedgedistancetype (class in ipctk)": [[27, "ipctk.EdgeEdgeDistanceType"]], "p_e (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.P_E"]], "p_e0 (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.P_E0"]], "p_e0 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_E0"]], "p_e1 (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.P_E1"]], "p_e1 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_E1"]], "p_e2 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_E2"]], "p_t (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_T"]], "p_t0 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_T0"]], "p_t1 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_T1"]], "p_t2 (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.P_T2"]], "pointedgedistancetype (class in ipctk)": [[27, "ipctk.PointEdgeDistanceType"]], "pointtriangledistancetype (class in ipctk)": [[27, "ipctk.PointTriangleDistanceType"]], "__annotations__ (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.__annotations__"]], "__annotations__ (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.__annotations__"]], "__annotations__ (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.__annotations__"]], "__eq__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__eq__"]], "__eq__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__eq__"]], "__eq__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__eq__"]], "__getstate__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__getstate__"]], "__getstate__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__getstate__"]], "__getstate__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__getstate__"]], "__hash__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__hash__"]], "__hash__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__hash__"]], "__hash__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__hash__"]], "__index__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__index__"]], "__index__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__index__"]], "__index__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__index__"]], "__init__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__init__"]], "__init__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__init__"]], "__init__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__init__"]], "__int__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__int__"]], "__int__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__int__"]], "__int__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__int__"]], "__members__ (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.__members__"]], "__members__ (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.__members__"]], "__members__ (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.__members__"]], "__module__ (ipctk.edgeedgedistancetype attribute)": [[27, "ipctk.EdgeEdgeDistanceType.__module__"]], "__module__ (ipctk.pointedgedistancetype attribute)": [[27, "ipctk.PointEdgeDistanceType.__module__"]], "__module__ (ipctk.pointtriangledistancetype attribute)": [[27, "ipctk.PointTriangleDistanceType.__module__"]], "__ne__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__ne__"]], "__ne__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__ne__"]], "__ne__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__ne__"]], "__repr__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__repr__"]], "__repr__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__repr__"]], "__repr__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__repr__"]], "__setstate__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__setstate__"]], "__setstate__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__setstate__"]], "__setstate__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__setstate__"]], "__str__() (ipctk.edgeedgedistancetype method)": [[27, "ipctk.EdgeEdgeDistanceType.__str__"]], "__str__() (ipctk.pointedgedistancetype method)": [[27, "ipctk.PointEdgeDistanceType.__str__"]], "__str__() (ipctk.pointtriangledistancetype method)": [[27, "ipctk.PointTriangleDistanceType.__str__"]], "edge_edge_cross_squarednorm() (in module ipctk)": [[27, "ipctk.edge_edge_cross_squarednorm"]], "edge_edge_cross_squarednorm_gradient() (in module ipctk)": [[27, "ipctk.edge_edge_cross_squarednorm_gradient"]], "edge_edge_cross_squarednorm_hessian() (in module ipctk)": [[27, "ipctk.edge_edge_cross_squarednorm_hessian"]], "edge_edge_distance() (in module ipctk)": [[27, "ipctk.edge_edge_distance"]], "edge_edge_distance_gradient() (in module ipctk)": [[27, "ipctk.edge_edge_distance_gradient"]], "edge_edge_distance_hessian() (in module ipctk)": [[27, "ipctk.edge_edge_distance_hessian"]], "edge_edge_distance_type() (in module ipctk)": [[27, "ipctk.edge_edge_distance_type"]], "edge_edge_mollifier() (in module ipctk)": [[27, "ipctk.edge_edge_mollifier"]], "edge_edge_mollifier_gradient() (in module ipctk)": [[27, "ipctk.edge_edge_mollifier_gradient"]], "edge_edge_mollifier_hessian() (in module ipctk)": [[27, "ipctk.edge_edge_mollifier_hessian"]], "edge_edge_mollifier_threshold() (in module ipctk)": [[27, "ipctk.edge_edge_mollifier_threshold"]], "line_line_distance() (in module ipctk)": [[27, "ipctk.line_line_distance"]], "line_line_distance_gradient() (in module ipctk)": [[27, "ipctk.line_line_distance_gradient"]], "line_line_distance_hessian() (in module ipctk)": [[27, "ipctk.line_line_distance_hessian"]], "name (ipctk.edgeedgedistancetype property)": [[27, "ipctk.EdgeEdgeDistanceType.name"]], "name (ipctk.pointedgedistancetype property)": [[27, "ipctk.PointEdgeDistanceType.name"]], "name (ipctk.pointtriangledistancetype property)": [[27, "ipctk.PointTriangleDistanceType.name"]], "point_edge_distance() (in module ipctk)": [[27, "ipctk.point_edge_distance"]], "point_edge_distance_gradient() (in module ipctk)": [[27, "ipctk.point_edge_distance_gradient"]], "point_edge_distance_hessian() (in module ipctk)": [[27, "ipctk.point_edge_distance_hessian"]], "point_edge_distance_type() (in module ipctk)": [[27, "ipctk.point_edge_distance_type"]], "point_line_distance() (in module ipctk)": [[27, "ipctk.point_line_distance"]], "point_line_distance_gradient() (in module ipctk)": [[27, "ipctk.point_line_distance_gradient"]], "point_line_distance_hessian() (in module ipctk)": [[27, "ipctk.point_line_distance_hessian"]], "point_plane_distance() (in module ipctk)": [[27, "ipctk.point_plane_distance"]], "point_plane_distance_gradient() (in module ipctk)": [[27, "ipctk.point_plane_distance_gradient"]], "point_plane_distance_hessian() (in module ipctk)": [[27, "ipctk.point_plane_distance_hessian"]], "point_point_distance() (in module ipctk)": [[27, "ipctk.point_point_distance"]], "point_point_distance_gradient() (in module ipctk)": [[27, "ipctk.point_point_distance_gradient"]], "point_point_distance_hessian() (in module ipctk)": [[27, "ipctk.point_point_distance_hessian"]], "point_triangle_distance() (in module ipctk)": [[27, "ipctk.point_triangle_distance"]], "point_triangle_distance_gradient() (in module ipctk)": [[27, "ipctk.point_triangle_distance_gradient"]], "point_triangle_distance_hessian() (in module ipctk)": [[27, "ipctk.point_triangle_distance_hessian"]], "point_triangle_distance_type() (in module ipctk)": [[27, "ipctk.point_triangle_distance_type"]], "value (ipctk.edgeedgedistancetype property)": [[27, "ipctk.EdgeEdgeDistanceType.value"]], "value (ipctk.pointedgedistancetype property)": [[27, "ipctk.PointEdgeDistanceType.value"]], "value (ipctk.pointtriangledistancetype property)": [[27, "ipctk.PointTriangleDistanceType.value"]], "smooth_friction_f0() (in module ipctk)": [[28, "ipctk.smooth_friction_f0"]], "smooth_friction_f1() (in module ipctk)": [[28, "ipctk.smooth_friction_f1"]], "smooth_friction_f1_over_x() (in module ipctk)": [[28, "ipctk.smooth_friction_f1_over_x"]], "smooth_friction_f2() (in module ipctk)": [[28, "ipctk.smooth_friction_f2"]], "smooth_friction_f2_x_minus_f1_over_x3() (in module ipctk)": [[28, "ipctk.smooth_friction_f2_x_minus_f1_over_x3"]], "has_intersections() (in module ipctk)": [[29, "ipctk.has_intersections"]], "is_edge_intersecting_triangle() (in module ipctk)": [[29, "ipctk.is_edge_intersecting_triangle"]], "segment_segment_intersect() (in module ipctk)": [[29, "ipctk.segment_segment_intersect"]], "edgeedgenormalcollision (class in ipctk)": [[30, "ipctk.EdgeEdgeNormalCollision"]], "edgevertexnormalcollision (class in ipctk)": [[30, "ipctk.EdgeVertexNormalCollision"]], "facevertexnormalcollision (class in ipctk)": [[30, "ipctk.FaceVertexNormalCollision"]], "normalcollision (class in ipctk)": [[30, "ipctk.NormalCollision"]], "normalcollisions (class in ipctk)": [[30, "ipctk.NormalCollisions"]], "planevertexnormalcollision (class in ipctk)": [[30, "ipctk.PlaneVertexNormalCollision"]], "vertexvertexnormalcollision (class in ipctk)": [[30, "ipctk.VertexVertexNormalCollision"]], "__annotations__ (ipctk.edgeedgenormalcollision attribute)": [[30, "ipctk.EdgeEdgeNormalCollision.__annotations__"]], "__annotations__ (ipctk.edgevertexnormalcollision attribute)": [[30, "ipctk.EdgeVertexNormalCollision.__annotations__"]], "__annotations__ (ipctk.facevertexnormalcollision attribute)": [[30, "ipctk.FaceVertexNormalCollision.__annotations__"]], "__annotations__ (ipctk.normalcollision attribute)": [[30, "ipctk.NormalCollision.__annotations__"]], "__annotations__ (ipctk.normalcollisions attribute)": [[30, "ipctk.NormalCollisions.__annotations__"]], "__annotations__ (ipctk.planevertexnormalcollision attribute)": [[30, "ipctk.PlaneVertexNormalCollision.__annotations__"]], "__annotations__ (ipctk.vertexvertexnormalcollision attribute)": [[30, "ipctk.VertexVertexNormalCollision.__annotations__"]], "__eq__() (ipctk.edgeedgenormalcollision method)": [[30, "ipctk.EdgeEdgeNormalCollision.__eq__"]], "__getitem__() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.__getitem__"]], "__hash__ (ipctk.edgeedgenormalcollision attribute)": [[30, "ipctk.EdgeEdgeNormalCollision.__hash__"]], "__init__() (ipctk.edgeedgenormalcollision method)": [[30, "ipctk.EdgeEdgeNormalCollision.__init__"]], "__init__() (ipctk.edgevertexnormalcollision method)": [[30, "ipctk.EdgeVertexNormalCollision.__init__"]], "__init__() (ipctk.facevertexnormalcollision method)": [[30, "ipctk.FaceVertexNormalCollision.__init__"]], "__init__() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.__init__"]], "__init__() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.__init__"]], "__init__() (ipctk.planevertexnormalcollision method)": [[30, "ipctk.PlaneVertexNormalCollision.__init__"]], "__init__() (ipctk.vertexvertexnormalcollision method)": [[30, "ipctk.VertexVertexNormalCollision.__init__"]], "__len__() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.__len__"]], "__lt__() (ipctk.edgeedgenormalcollision method)": [[30, "ipctk.EdgeEdgeNormalCollision.__lt__"]], "__module__ (ipctk.edgeedgenormalcollision attribute)": [[30, "ipctk.EdgeEdgeNormalCollision.__module__"]], "__module__ (ipctk.edgevertexnormalcollision attribute)": [[30, "ipctk.EdgeVertexNormalCollision.__module__"]], "__module__ (ipctk.facevertexnormalcollision attribute)": [[30, "ipctk.FaceVertexNormalCollision.__module__"]], "__module__ (ipctk.normalcollision attribute)": [[30, "ipctk.NormalCollision.__module__"]], "__module__ (ipctk.normalcollisions attribute)": [[30, "ipctk.NormalCollisions.__module__"]], "__module__ (ipctk.planevertexnormalcollision attribute)": [[30, "ipctk.PlaneVertexNormalCollision.__module__"]], "__module__ (ipctk.vertexvertexnormalcollision attribute)": [[30, "ipctk.VertexVertexNormalCollision.__module__"]], "__ne__() (ipctk.edgeedgenormalcollision method)": [[30, "ipctk.EdgeEdgeNormalCollision.__ne__"]], "__str__() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.__str__"]], "build() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.build"]], "clear() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.clear"]], "compute_minimum_distance() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.compute_minimum_distance"]], "dmin (ipctk.normalcollision property)": [[30, "ipctk.NormalCollision.dmin"]], "dtype (ipctk.edgeedgenormalcollision property)": [[30, "ipctk.EdgeEdgeNormalCollision.dtype"]], "ee_collisions (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.ee_collisions"]], "empty() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.empty"]], "enable_shape_derivatives (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.enable_shape_derivatives"]], "eps_x (ipctk.edgeedgenormalcollision property)": [[30, "ipctk.EdgeEdgeNormalCollision.eps_x"]], "ev_collisions (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.ev_collisions"]], "fv_collisions (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.fv_collisions"]], "is_edge_edge() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.is_edge_edge"]], "is_edge_vertex() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.is_edge_vertex"]], "is_face_vertex() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.is_face_vertex"]], "is_mollified() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.is_mollified"]], "is_plane_vertex() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.is_plane_vertex"]], "is_vertex_vertex() (ipctk.normalcollisions method)": [[30, "ipctk.NormalCollisions.is_vertex_vertex"]], "mollifier() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier"]], "mollifier_gradient() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier_gradient"]], "mollifier_gradient_jacobian_wrt_x() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier_gradient_jacobian_wrt_x"]], "mollifier_gradient_wrt_x() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier_gradient_wrt_x"]], "mollifier_hessian() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier_hessian"]], "mollifier_threshold() (ipctk.normalcollision method)": [[30, "ipctk.NormalCollision.mollifier_threshold"]], "plane_normal (ipctk.planevertexnormalcollision property)": [[30, "ipctk.PlaneVertexNormalCollision.plane_normal"]], "plane_origin (ipctk.planevertexnormalcollision property)": [[30, "ipctk.PlaneVertexNormalCollision.plane_origin"]], "pv_collisions (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.pv_collisions"]], "use_area_weighting (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.use_area_weighting"]], "use_improved_max_approximator (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.use_improved_max_approximator"]], "vertex_id (ipctk.planevertexnormalcollision property)": [[30, "ipctk.PlaneVertexNormalCollision.vertex_id"]], "vv_collisions (ipctk.normalcollisions property)": [[30, "ipctk.NormalCollisions.vv_collisions"]], "weight (ipctk.normalcollision property)": [[30, "ipctk.NormalCollision.weight"]], "weight_gradient (ipctk.normalcollision property)": [[30, "ipctk.NormalCollision.weight_gradient"]], "barrierpotential (class in ipctk)": [[31, "ipctk.BarrierPotential"]], "frictionpotential (class in ipctk)": [[31, "ipctk.FrictionPotential"]], "lagged_displacements (ipctk.tangentialpotential attribute)": [[31, "ipctk.TangentialPotential.LAGGED_DISPLACEMENTS"]], "lagged_displacements (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.LAGGED_DISPLACEMENTS"]], "normaladhesionpotential (class in ipctk)": [[31, "ipctk.NormalAdhesionPotential"]], "normalpotential (class in ipctk)": [[31, "ipctk.NormalPotential"]], "rest_positions (ipctk.tangentialpotential attribute)": [[31, "ipctk.TangentialPotential.REST_POSITIONS"]], "rest_positions (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.REST_POSITIONS"]], "tangentialadhesionpotential (class in ipctk)": [[31, "ipctk.TangentialAdhesionPotential"]], "tangentialpotential (class in ipctk)": [[31, "ipctk.TangentialPotential"]], "tangentialpotential.diffwrt (class in ipctk)": [[31, "ipctk.TangentialPotential.DiffWRT"]], "velocities (ipctk.tangentialpotential attribute)": [[31, "ipctk.TangentialPotential.VELOCITIES"]], "velocities (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.VELOCITIES"]], "y (ipctk.normaladhesionpotential property)": [[31, "ipctk.NormalAdhesionPotential.Y"]], "__annotations__ (ipctk.barrierpotential attribute)": [[31, "ipctk.BarrierPotential.__annotations__"]], "__annotations__ (ipctk.frictionpotential attribute)": [[31, "ipctk.FrictionPotential.__annotations__"]], "__annotations__ (ipctk.normaladhesionpotential attribute)": [[31, "ipctk.NormalAdhesionPotential.__annotations__"]], "__annotations__ (ipctk.normalpotential attribute)": [[31, "ipctk.NormalPotential.__annotations__"]], "__annotations__ (ipctk.tangentialadhesionpotential attribute)": [[31, "ipctk.TangentialAdhesionPotential.__annotations__"]], "__annotations__ (ipctk.tangentialpotential attribute)": [[31, "ipctk.TangentialPotential.__annotations__"]], "__annotations__ (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.__annotations__"]], "__call__() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.__call__"]], "__call__() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.__call__"]], "__eq__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__eq__"]], "__getstate__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__getstate__"]], "__hash__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__hash__"]], "__index__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__index__"]], "__init__() (ipctk.barrierpotential method)": [[31, "ipctk.BarrierPotential.__init__"]], "__init__() (ipctk.frictionpotential method)": [[31, "ipctk.FrictionPotential.__init__"]], "__init__() (ipctk.normaladhesionpotential method)": [[31, "ipctk.NormalAdhesionPotential.__init__"]], "__init__() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.__init__"]], "__init__() (ipctk.tangentialadhesionpotential method)": [[31, "ipctk.TangentialAdhesionPotential.__init__"]], "__init__() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.__init__"]], "__init__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__init__"]], "__int__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__int__"]], "__members__ (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.__members__"]], "__module__ (ipctk.barrierpotential attribute)": [[31, "ipctk.BarrierPotential.__module__"]], "__module__ (ipctk.frictionpotential attribute)": [[31, "ipctk.FrictionPotential.__module__"]], "__module__ (ipctk.normaladhesionpotential attribute)": [[31, "ipctk.NormalAdhesionPotential.__module__"]], "__module__ (ipctk.normalpotential attribute)": [[31, "ipctk.NormalPotential.__module__"]], "__module__ (ipctk.tangentialadhesionpotential attribute)": [[31, "ipctk.TangentialAdhesionPotential.__module__"]], "__module__ (ipctk.tangentialpotential attribute)": [[31, "ipctk.TangentialPotential.__module__"]], "__module__ (ipctk.tangentialpotential.diffwrt attribute)": [[31, "ipctk.TangentialPotential.DiffWRT.__module__"]], "__ne__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__ne__"]], "__repr__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__repr__"]], "__setstate__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__setstate__"]], "__str__() (ipctk.tangentialpotential.diffwrt method)": [[31, "ipctk.TangentialPotential.DiffWRT.__str__"]], "barrier (ipctk.barrierpotential property)": [[31, "ipctk.BarrierPotential.barrier"]], "dhat (ipctk.barrierpotential property)": [[31, "ipctk.BarrierPotential.dhat"]], "dhat_a (ipctk.normaladhesionpotential property)": [[31, "ipctk.NormalAdhesionPotential.dhat_a"]], "dhat_p (ipctk.normaladhesionpotential property)": [[31, "ipctk.NormalAdhesionPotential.dhat_p"]], "eps_a (ipctk.tangentialadhesionpotential property)": [[31, "ipctk.TangentialAdhesionPotential.eps_a"]], "eps_c (ipctk.normaladhesionpotential property)": [[31, "ipctk.NormalAdhesionPotential.eps_c"]], "eps_v (ipctk.frictionpotential property)": [[31, "ipctk.FrictionPotential.eps_v"]], "force() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.force"]], "force_jacobian() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.force_jacobian"]], "force_magnitude() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.force_magnitude"]], "force_magnitude_gradient() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.force_magnitude_gradient"]], "gradient() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.gradient"]], "gradient() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.gradient"]], "hessian() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.hessian"]], "hessian() (ipctk.tangentialpotential method)": [[31, "ipctk.TangentialPotential.hessian"]], "name (ipctk.tangentialpotential.diffwrt property)": [[31, "ipctk.TangentialPotential.DiffWRT.name"]], "shape_derivative() (ipctk.normalpotential method)": [[31, "ipctk.NormalPotential.shape_derivative"]], "value (ipctk.tangentialpotential.diffwrt property)": [[31, "ipctk.TangentialPotential.DiffWRT.value"]], "edge_edge_closest_point() (in module ipctk)": [[32, "ipctk.edge_edge_closest_point"]], "edge_edge_closest_point_jacobian() (in module ipctk)": [[32, "ipctk.edge_edge_closest_point_jacobian"]], "edge_edge_relative_velocity() (in module ipctk)": [[32, "ipctk.edge_edge_relative_velocity"]], "edge_edge_relative_velocity_matrix() (in module ipctk)": [[32, "ipctk.edge_edge_relative_velocity_matrix"]], "edge_edge_relative_velocity_matrix_jacobian() (in module ipctk)": [[32, "ipctk.edge_edge_relative_velocity_matrix_jacobian"]], "edge_edge_tangent_basis() (in module ipctk)": [[32, "ipctk.edge_edge_tangent_basis"]], "edge_edge_tangent_basis_jacobian() (in module ipctk)": [[32, "ipctk.edge_edge_tangent_basis_jacobian"]], "point_edge_closest_point() (in module ipctk)": [[32, "ipctk.point_edge_closest_point"]], "point_edge_closest_point_jacobian() (in module ipctk)": [[32, "ipctk.point_edge_closest_point_jacobian"]], "point_edge_relative_velocity() (in module ipctk)": [[32, "ipctk.point_edge_relative_velocity"]], "point_edge_relative_velocity_matrix() (in module ipctk)": [[32, "ipctk.point_edge_relative_velocity_matrix"]], "point_edge_relative_velocity_matrix_jacobian() (in module ipctk)": [[32, "ipctk.point_edge_relative_velocity_matrix_jacobian"]], "point_edge_tangent_basis() (in module ipctk)": [[32, "ipctk.point_edge_tangent_basis"]], "point_edge_tangent_basis_jacobian() (in module ipctk)": [[32, "ipctk.point_edge_tangent_basis_jacobian"]], "point_point_relative_velocity() (in module ipctk)": [[32, "ipctk.point_point_relative_velocity"]], "point_point_relative_velocity_matrix() (in module ipctk)": [[32, "ipctk.point_point_relative_velocity_matrix"]], "point_point_relative_velocity_matrix_jacobian() (in module ipctk)": [[32, "ipctk.point_point_relative_velocity_matrix_jacobian"]], "point_point_tangent_basis() (in module ipctk)": [[32, "ipctk.point_point_tangent_basis"]], "point_point_tangent_basis_jacobian() (in module ipctk)": [[32, "ipctk.point_point_tangent_basis_jacobian"]], "point_triangle_closest_point() (in module ipctk)": [[32, "ipctk.point_triangle_closest_point"]], "point_triangle_closest_point_jacobian() (in module ipctk)": [[32, "ipctk.point_triangle_closest_point_jacobian"]], "point_triangle_relative_velocity() (in module ipctk)": [[32, "ipctk.point_triangle_relative_velocity"]], "point_triangle_relative_velocity_matrix() (in module ipctk)": [[32, "ipctk.point_triangle_relative_velocity_matrix"]], "point_triangle_relative_velocity_matrix_jacobian() (in module ipctk)": [[32, "ipctk.point_triangle_relative_velocity_matrix_jacobian"]], "point_triangle_tangent_basis() (in module ipctk)": [[32, "ipctk.point_triangle_tangent_basis"]], "point_triangle_tangent_basis_jacobian() (in module ipctk)": [[32, "ipctk.point_triangle_tangent_basis_jacobian"]], "edgeedgetangentialcollision (class in ipctk)": [[33, "ipctk.EdgeEdgeTangentialCollision"]], "edgevertextangentialcollision (class in ipctk)": [[33, "ipctk.EdgeVertexTangentialCollision"]], "facevertextangentialcollision (class in ipctk)": [[33, "ipctk.FaceVertexTangentialCollision"]], "tangentialcollision (class in ipctk)": [[33, "ipctk.TangentialCollision"]], "tangentialcollisions (class in ipctk)": [[33, "ipctk.TangentialCollisions"]], "vertexvertextangentialcollision (class in ipctk)": [[33, "ipctk.VertexVertexTangentialCollision"]], "__annotations__ (ipctk.edgeedgetangentialcollision attribute)": [[33, "ipctk.EdgeEdgeTangentialCollision.__annotations__"]], "__annotations__ (ipctk.edgevertextangentialcollision attribute)": [[33, "ipctk.EdgeVertexTangentialCollision.__annotations__"]], "__annotations__ (ipctk.facevertextangentialcollision attribute)": [[33, "ipctk.FaceVertexTangentialCollision.__annotations__"]], "__annotations__ (ipctk.tangentialcollision attribute)": [[33, "ipctk.TangentialCollision.__annotations__"]], "__annotations__ (ipctk.tangentialcollisions attribute)": [[33, "ipctk.TangentialCollisions.__annotations__"]], "__annotations__ (ipctk.vertexvertextangentialcollision attribute)": [[33, "ipctk.VertexVertexTangentialCollision.__annotations__"]], "__getitem__() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.__getitem__"]], "__init__() (ipctk.edgeedgetangentialcollision method)": [[33, "ipctk.EdgeEdgeTangentialCollision.__init__"]], "__init__() (ipctk.edgevertextangentialcollision method)": [[33, "ipctk.EdgeVertexTangentialCollision.__init__"]], "__init__() (ipctk.facevertextangentialcollision method)": [[33, "ipctk.FaceVertexTangentialCollision.__init__"]], "__init__() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.__init__"]], "__init__() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.__init__"]], "__init__() (ipctk.vertexvertextangentialcollision method)": [[33, "ipctk.VertexVertexTangentialCollision.__init__"]], "__len__() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.__len__"]], "__module__ (ipctk.edgeedgetangentialcollision attribute)": [[33, "ipctk.EdgeEdgeTangentialCollision.__module__"]], "__module__ (ipctk.edgevertextangentialcollision attribute)": [[33, "ipctk.EdgeVertexTangentialCollision.__module__"]], "__module__ (ipctk.facevertextangentialcollision attribute)": [[33, "ipctk.FaceVertexTangentialCollision.__module__"]], "__module__ (ipctk.tangentialcollision attribute)": [[33, "ipctk.TangentialCollision.__module__"]], "__module__ (ipctk.tangentialcollisions attribute)": [[33, "ipctk.TangentialCollisions.__module__"]], "__module__ (ipctk.vertexvertextangentialcollision attribute)": [[33, "ipctk.VertexVertexTangentialCollision.__module__"]], "build() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.build"]], "clear() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.clear"]], "closest_point (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.closest_point"]], "compute_closest_point() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.compute_closest_point"]], "compute_closest_point_jacobian() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.compute_closest_point_jacobian"]], "compute_tangent_basis() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.compute_tangent_basis"]], "compute_tangent_basis_jacobian() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.compute_tangent_basis_jacobian"]], "default_blend_mu() (ipctk.tangentialcollisions static method)": [[33, "ipctk.TangentialCollisions.default_blend_mu"]], "dim (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.dim"]], "ee_collisions (ipctk.tangentialcollisions property)": [[33, "ipctk.TangentialCollisions.ee_collisions"]], "empty() (ipctk.tangentialcollisions method)": [[33, "ipctk.TangentialCollisions.empty"]], "ev_collisions (ipctk.tangentialcollisions property)": [[33, "ipctk.TangentialCollisions.ev_collisions"]], "fv_collisions (ipctk.tangentialcollisions property)": [[33, "ipctk.TangentialCollisions.fv_collisions"]], "mu (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.mu"]], "ndof (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.ndof"]], "normal_force_magnitude (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.normal_force_magnitude"]], "relative_velocity() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.relative_velocity"]], "relative_velocity_matrix() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.relative_velocity_matrix"]], "relative_velocity_matrix_jacobian() (ipctk.tangentialcollision method)": [[33, "ipctk.TangentialCollision.relative_velocity_matrix_jacobian"]], "tangent_basis (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.tangent_basis"]], "vv_collisions (ipctk.tangentialcollisions property)": [[33, "ipctk.TangentialCollisions.vv_collisions"]], "weight (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.weight"]], "weight_gradient (ipctk.tangentialcollision property)": [[33, "ipctk.TangentialCollision.weight_gradient"]], "abs (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.ABS"]], "clamp (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.CLAMP"]], "loggerlevel (class in ipctk)": [[34, "ipctk.LoggerLevel"]], "none (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.NONE"]], "psdprojectionmethod (class in ipctk)": [[34, "ipctk.PSDProjectionMethod"]], "__annotations__ (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.__annotations__"]], "__annotations__ (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.__annotations__"]], "__eq__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__eq__"]], "__eq__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__eq__"]], "__getstate__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__getstate__"]], "__getstate__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__getstate__"]], "__hash__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__hash__"]], "__hash__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__hash__"]], "__index__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__index__"]], "__index__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__index__"]], "__init__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__init__"]], "__init__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__init__"]], "__int__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__int__"]], "__int__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__int__"]], "__members__ (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.__members__"]], "__members__ (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.__members__"]], "__module__ (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.__module__"]], "__module__ (ipctk.psdprojectionmethod attribute)": [[34, "ipctk.PSDProjectionMethod.__module__"]], "__ne__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__ne__"]], "__ne__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__ne__"]], "__repr__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__repr__"]], "__repr__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__repr__"]], "__setstate__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__setstate__"]], "__setstate__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__setstate__"]], "__str__() (ipctk.loggerlevel method)": [[34, "ipctk.LoggerLevel.__str__"]], "__str__() (ipctk.psdprojectionmethod method)": [[34, "ipctk.PSDProjectionMethod.__str__"]], "critical (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.critical"]], "debug (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.debug"]], "error (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.error"]], "get_num_threads() (in module ipctk)": [[34, "ipctk.get_num_threads"]], "info (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.info"]], "name (ipctk.loggerlevel property)": [[34, "ipctk.LoggerLevel.name"]], "name (ipctk.psdprojectionmethod property)": [[34, "ipctk.PSDProjectionMethod.name"]], "off (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.off"]], "project_to_pd() (in module ipctk)": [[34, "ipctk.project_to_pd"]], "project_to_psd() (in module ipctk)": [[34, "ipctk.project_to_psd"]], "set_logger_level() (in module ipctk)": [[34, "ipctk.set_logger_level"]], "set_num_threads() (in module ipctk)": [[34, "ipctk.set_num_threads"]], "trace (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.trace"]], "value (ipctk.loggerlevel property)": [[34, "ipctk.LoggerLevel.value"]], "value (ipctk.psdprojectionmethod property)": [[34, "ipctk.PSDProjectionMethod.value"]], "warn (ipctk.loggerlevel attribute)": [[34, "ipctk.LoggerLevel.warn"]]}, "docurls": ["changelog.html", "code_of_conduct.html", "contributing.html", "cpp.html", "cpp-api/adhesion.html", "cpp-api/barrier.html", "cpp-api/broad_phase.html", "cpp-api/candidates.html", "cpp-api/ccd.html", "cpp-api/collision_mesh.html", "cpp-api/distance.html", "cpp-api/friction.html", "cpp-api/intersections.html", "cpp-api/normal_collisions.html", "cpp-api/potentials.html", "cpp-api/tangent.html", "cpp-api/tangential_collisions.html", "cpp-api/utils.html", "index.html", "license.html", "python.html", "python-api/adhesion.html", "python-api/barrier.html", "python-api/broad_phase.html", "python-api/candidates.html", "python-api/ccd.html", "python-api/collision_mesh.html", "python-api/distance.html", "python-api/friction.html", "python-api/intersections.html", "python-api/normal_collisions.html", "python-api/potentials.html", "python-api/tangent.html", "python-api/tangential_collisions.html", "python-api/utils.html", "style_guide.html", "tutorial/convergent.html", "tutorial/faq.html", "tutorial/getting_started.html", "tutorial/misc.html", "tutorial/nonlinear_ccd.html", "tutorial/references.html", "tutorial/simulation.html"]})