################################################################################
# Tests
################################################################################

add_executable(ipc_toolkit_tests
  main.cpp

  # Test barrier and dertivatives
  barrier/test_barrier.cpp

  # Test CCD
  broad_phase/benchmark_spatial_hash.cpp
  broad_phase/brute_force_comparison.cpp
  broad_phase/brute_force_comparison.hpp
  broad_phase/test_broad_phase.cpp
  broad_phase/test_hash_grid.cpp
  broad_phase/test_spatial_hash.cpp
  ccd/benchmark_ccd.cpp
  ccd/collision_generator.cpp
  ccd/test_ccd.cpp

  # Test distances and dertivatives
  distance/test_distance_type.cpp
  distance/test_edge_edge.cpp
  distance/test_line_line.cpp
  distance/test_point_edge.cpp
  distance/test_point_line.cpp
  distance/test_point_plane.cpp
  distance/test_point_point.cpp
  distance/test_point_triangle.cpp

  # Test friction
  friction/test_friction.cpp
  friction/test_tangent_basis.cpp
  friction/test_closest_point.cpp
  friction/test_relative_displacement.cpp

  # Test general interface
  test_ipc.cpp

  # Test intersection checks
  test_has_intersections.cpp

  # Utilities for tests
  test_utils.cpp

  static_vs_dynamic.cpp
)

target_include_directories(ipc_toolkit_tests PUBLIC ".")

################################################################################
# Required Libraries
################################################################################

target_link_libraries(ipc_toolkit_tests PUBLIC ipc::toolkit)

include(ipc_toolkit_warnings)
target_link_libraries(ipc_toolkit_tests PRIVATE ipc::toolkit::warnings)

include(catch2)
target_link_libraries(ipc_toolkit_tests PUBLIC Catch2::Catch2)

include(finite_diff)
target_link_libraries(ipc_toolkit_tests PUBLIC finitediff::finitediff)

if(IPC_TOOLKIT_WITH_LOGGER)
  include(spdlog)
  target_link_libraries(ipc_toolkit_tests PRIVATE spdlog::spdlog)
else()
  include(fmt)
  target_link_libraries(ipc_toolkit_tests PRIVATE fmt::fmt)
endif()

include(json)
target_link_libraries(ipc_toolkit_tests PUBLIC nlohmann::json)

find_package(CUDAToolkit)
target_link_libraries(ipc_toolkit_tests PRIVATE CUDA::cudart)

################################################################################
# Compiler options
################################################################################

target_compile_definitions(ipc_toolkit_tests PUBLIC CATCH_CONFIG_ENABLE_BENCHMARKING)

# Test data directory definition
if(WIN32)
  target_compile_definitions(ipc_toolkit_tests PUBLIC TEST_DATA_DIR="${CMAKE_CURRENT_SOURCE_DIR}\\\\data\\\\")
else()
  target_compile_definitions(ipc_toolkit_tests PUBLIC TEST_DATA_DIR="${CMAKE_CURRENT_SOURCE_DIR}/data/")
endif()

################################################################################
# Register tests
################################################################################

set(PARSE_CATCH_TESTS_ADD_TO_CONFIGURE_DEPENDS ON)

# Include Catch2 and provide function `catch_discover_tests` to register tests.
FetchContent_GetProperties(catch2)
include("${catch2_SOURCE_DIR}/contrib/Catch.cmake")

catch_discover_tests(ipc_toolkit_tests)
